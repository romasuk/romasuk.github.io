!function e(t,i,s){function a(n,o){if(!i[n]){if(!t[n]){var l="function"==typeof require&&require;if(!o&&l)return l(n,!0);if(r)return r(n,!0);var d=new Error("Cannot find module '"+n+"'");throw d.code="MODULE_NOT_FOUND",d}var u=i[n]={exports:{}};t[n][0].call(u.exports,(function(e){return a(t[n][1][e]||e)}),u,u.exports,e,t,i,s)}return i[n].exports}for(var r="function"==typeof require&&require,n=0;n<s.length;n++)a(s[n]);return a}({1:[function(e,t,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=e("ssr-window");function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function n(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function o(e,t,i){return(o=n()?Reflect.construct:function(e,t,i){var s=[null];s.push.apply(s,t);var a=new(Function.bind.apply(e,s));return i&&r(a,i.prototype),a}).apply(null,arguments)}function l(e){var t="function"==typeof Map?new Map:void 0;return(l=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,s)}function s(){return o(e,arguments,a(this).constructor)}return s.prototype=Object.create(e.prototype,{constructor:{value:s,enumerable:!1,writable:!0,configurable:!0}}),r(s,e)})(e)}var d=function(e){var t,i;function s(t){var i,s,a;return i=e.call.apply(e,[this].concat(t))||this,s=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(i),a=s.__proto__,Object.defineProperty(s,"__proto__",{get:function(){return a},set:function(e){a.__proto__=e}}),i}return i=e,(t=s).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,s}(l(Array));function u(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,u(e)):t.push(e)})),t}function c(e,t){return Array.prototype.filter.call(e,t)}function h(e,t){var i=s.getWindow(),a=s.getDocument(),r=[];if(!t&&e instanceof d)return e;if(!e)return new d(r);if("string"==typeof e){var n=e.trim();if(n.indexOf("<")>=0&&n.indexOf(">")>=0){var o="div";0===n.indexOf("<li")&&(o="ul"),0===n.indexOf("<tr")&&(o="tbody"),0!==n.indexOf("<td")&&0!==n.indexOf("<th")||(o="tr"),0===n.indexOf("<tbody")&&(o="table"),0===n.indexOf("<option")&&(o="select");var l=a.createElement(o);l.innerHTML=n;for(var u=0;u<l.childNodes.length;u+=1)r.push(l.childNodes[u])}else r=function(e,t){if("string"!=typeof e)return[e];for(var i=[],s=t.querySelectorAll(e),a=0;a<s.length;a+=1)i.push(s[a]);return i}(e.trim(),t||a)}else if(e.nodeType||e===i||e===a)r.push(e);else if(Array.isArray(e)){if(e instanceof d)return e;r=e}return new d(function(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}(r))}h.fn=d.prototype;var p="resize scroll".split(" ");function f(e){return function(){for(var t=arguments.length,i=new Array(t),s=0;s<t;s++)i[s]=arguments[s];if(void 0===i[0]){for(var a=0;a<this.length;a+=1)p.indexOf(e)<0&&(e in this[a]?this[a][e]():h(this[a]).trigger(e));return this}return this.on.apply(this,[e].concat(i))}}var v=f("click"),m=f("blur"),g=f("focus"),w=f("focusin"),y=f("focusout"),b=f("keyup"),x=f("keydown"),E=f("keypress"),T=f("submit"),S=f("change"),C=f("mousedown"),M=f("mousemove"),z=f("mouseup"),P=f("mouseenter"),k=f("mouseleave"),_=f("mouseout"),L=f("mouseover"),O=f("touchstart"),A=f("touchend"),$=f("touchmove"),D=f("resize"),I=f("scroll");i.$=h,i.add=function(){for(var e,t,i=this,s=arguments.length,a=new Array(s),r=0;r<s;r++)a[r]=arguments[r];for(e=0;e<a.length;e+=1){var n=h(a[e]);for(t=0;t<n.length;t+=1)i.push(n[t])}return i},i.addClass=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=u(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,s)})),this},i.animate=function(e,t){var i,a=s.getWindow(),r=this,n={props:Object.assign({},e),params:Object.assign({duration:300,easing:"swing"},t),elements:r,animating:!1,que:[],easingProgress:function(e,t){return"swing"===e?.5-Math.cos(t*Math.PI)/2:"function"==typeof e?e(t):t},stop:function(){n.frameId&&a.cancelAnimationFrame(n.frameId),n.animating=!1,n.elements.each((function(e){delete e.dom7AnimateInstance})),n.que=[]},done:function(e){if(n.animating=!1,n.elements.each((function(e){delete e.dom7AnimateInstance})),e&&e(r),n.que.length>0){var t=n.que.shift();n.animate(t[0],t[1])}},animate:function(e,t){if(n.animating)return n.que.push([e,t]),n;var i=[];n.elements.each((function(t,s){var r,o,l,d,u;t.dom7AnimateInstance||(n.elements[s].dom7AnimateInstance=n),i[s]={container:t},Object.keys(e).forEach((function(n){r=a.getComputedStyle(t,null).getPropertyValue(n).replace(",","."),o=parseFloat(r),l=r.replace(o,""),d=parseFloat(e[n]),u=e[n]+l,i[s][n]={initialFullValue:r,initialValue:o,unit:l,finalValue:d,finalFullValue:u,currentValue:o}}))}));var s,o,l=null,d=0,u=0,c=!1;return n.animating=!0,n.frameId=a.requestAnimationFrame((function h(){var p,f;s=(new Date).getTime(),c||(c=!0,t.begin&&t.begin(r)),null===l&&(l=s),t.progress&&t.progress(r,Math.max(Math.min((s-l)/t.duration,1),0),l+t.duration-s<0?0:l+t.duration-s,l),i.forEach((function(a){var r=a;o||r.done||Object.keys(e).forEach((function(a){if(!o&&!r.done){p=Math.max(Math.min((s-l)/t.duration,1),0),f=n.easingProgress(t.easing,p);var c=r[a],h=c.initialValue,v=c.finalValue,m=c.unit;r[a].currentValue=h+f*(v-h);var g=r[a].currentValue;(v>h&&g>=v||v<h&&g<=v)&&(r.container.style[a]=v+m,(u+=1)===Object.keys(e).length&&(r.done=!0,d+=1),d===i.length&&(o=!0)),o?n.done(t.complete):r.container.style[a]=g+m}}))})),o||(n.frameId=a.requestAnimationFrame(h))})),n}};if(0===n.elements.length)return r;for(var o=0;o<n.elements.length;o+=1)n.elements[o].dom7AnimateInstance?i=n.elements[o].dom7AnimateInstance:n.elements[o].dom7AnimateInstance=n;return i||(i=n),"stop"===e?i.stop():i.animate(n.props,n.params),r},i.animationEnd=function(e){var t=this;return e&&t.on("animationend",(function i(s){s.target===this&&(e.call(this,s),t.off("animationend",i))})),this},i.append=function(){for(var e,t=s.getDocument(),i=0;i<arguments.length;i+=1){e=i<0||arguments.length<=i?void 0:arguments[i];for(var a=0;a<this.length;a+=1)if("string"==typeof e){var r=t.createElement("div");for(r.innerHTML=e;r.firstChild;)this[a].appendChild(r.firstChild)}else if(e instanceof d)for(var n=0;n<e.length;n+=1)this[a].appendChild(e[n]);else this[a].appendChild(e)}return this},i.appendTo=function(e){return h(e).append(this),this},i.attr=function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(var s in e)this[i][s]=e[s],this[i].setAttribute(s,e[s]);return this},i.blur=m,i.change=S,i.children=function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].children,a=0;a<s.length;a+=1)e&&!h(s[a]).is(e)||t.push(s[a]);return h(t)},i.click=v,i.closest=function(e){var t=this;return void 0===e?h([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},i.css=function(e,t){var i,a=s.getWindow();if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var r in e)this[i].style[r]=e[r];return this}if(this[0])return a.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},i.data=function(e,t){var i;if(void 0===t){if(!(i=this[0]))return;if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];var s=i.getAttribute("data-"+e);return s||void 0}for(var a=0;a<this.length;a+=1)(i=this[a]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this},i.dataset=function(){var e=this[0];if(e){var t,i={};if(e.dataset)for(var s in e.dataset)i[s]=e.dataset[s];else for(var a=0;a<e.attributes.length;a+=1){var r=e.attributes[a];r.name.indexOf("data-")>=0&&(i[(t=r.name.split("data-")[1],t.toLowerCase().replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=r.value)}for(var n in i)"false"===i[n]?i[n]=!1:"true"===i[n]?i[n]=!0:parseFloat(i[n])===1*i[n]&&(i[n]*=1);return i}},i.default=h,i.detach=function(){return this.remove()},i.each=function(e){return e?(this.forEach((function(t,i){e.apply(t,[t,i])})),this):this},i.empty=function(){for(var e=0;e<this.length;e+=1){var t=this[e];if(1===t.nodeType){for(var i=0;i<t.childNodes.length;i+=1)t.childNodes[i].parentNode&&t.childNodes[i].parentNode.removeChild(t.childNodes[i]);t.textContent=""}}return this},i.eq=function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return h([]);if(e<0){var i=t+e;return h(i<0?[]:[this[i]])}return h([this[e]])},i.filter=function(e){return h(c(this,e))},i.find=function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].querySelectorAll(e),a=0;a<s.length;a+=1)t.push(s[a]);return h(t)},i.focus=g,i.focusin=w,i.focusout=y,i.hasClass=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=u(t.map((function(e){return e.split(" ")})));return c(this,(function(e){return s.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},i.height=function(){var e=s.getWindow();return this[0]===e?e.innerHeight:this.length>0?parseFloat(this.css("height")):null},i.hide=function(){for(var e=0;e<this.length;e+=1)this[e].style.display="none";return this},i.html=function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},i.index=function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},i.insertAfter=function(e){for(var t=h(e),i=0;i<this.length;i+=1)if(1===t.length)t[0].parentNode.insertBefore(this[i],t[0].nextSibling);else if(t.length>1)for(var s=0;s<t.length;s+=1)t[s].parentNode.insertBefore(this[i].cloneNode(!0),t[s].nextSibling)},i.insertBefore=function(e){for(var t=h(e),i=0;i<this.length;i+=1)if(1===t.length)t[0].parentNode.insertBefore(this[i],t[0]);else if(t.length>1)for(var s=0;s<t.length;s+=1)t[s].parentNode.insertBefore(this[i].cloneNode(!0),t[s])},i.is=function(e){var t,i,a=s.getWindow(),r=s.getDocument(),n=this[0];if(!n||void 0===e)return!1;if("string"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=h(e),i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}if(e===r)return n===r;if(e===a)return n===a;if(e.nodeType||e instanceof d){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}return!1},i.keydown=x,i.keypress=E,i.keyup=b,i.mousedown=C,i.mouseenter=P,i.mouseleave=k,i.mousemove=M,i.mouseout=_,i.mouseover=L,i.mouseup=z,i.next=function(e){return this.length>0?e?this[0].nextElementSibling&&h(this[0].nextElementSibling).is(e)?h([this[0].nextElementSibling]):h([]):this[0].nextElementSibling?h([this[0].nextElementSibling]):h([]):h([])},i.nextAll=function(e){var t=[],i=this[0];if(!i)return h([]);for(;i.nextElementSibling;){var s=i.nextElementSibling;e?h(s).is(e)&&t.push(s):t.push(s),i=s}return h(t)},i.off=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=t[0],a=t[1],r=t[2],n=t[3];"function"==typeof t[1]&&(s=t[0],r=t[1],n=t[2],a=void 0),n||(n=!1);for(var o=s.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],u=0;u<this.length;u+=1){var c=this[u],h=void 0;if(!a&&c.dom7Listeners?h=c.dom7Listeners[d]:a&&c.dom7LiveListeners&&(h=c.dom7LiveListeners[d]),h&&h.length)for(var p=h.length-1;p>=0;p-=1){var f=h[p];r&&f.listener===r||r&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===r?(c.removeEventListener(d,f.proxyListener,n),h.splice(p,1)):r||(c.removeEventListener(d,f.proxyListener,n),h.splice(p,1))}}return this},i.offset=function(){if(this.length>0){var e=s.getWindow(),t=s.getDocument(),i=this[0],a=i.getBoundingClientRect(),r=t.body,n=i.clientTop||r.clientTop||0,o=i.clientLeft||r.clientLeft||0,l=i===e?e.scrollY:i.scrollTop,d=i===e?e.scrollX:i.scrollLeft;return{top:a.top+l-n,left:a.left+d-o}}return null},i.on=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=t[0],a=t[1],r=t[2],n=t[3];function o(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),h(t).is(a))r.apply(t,i);else for(var s=h(t).parents(),n=0;n<s.length;n+=1)h(s[n]).is(a)&&r.apply(s[n],i)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof t[1]&&(s=t[0],r=t[1],n=t[2],a=void 0),n||(n=!1);for(var d,u=s.split(" "),c=0;c<this.length;c+=1){var p=this[c];if(a)for(d=0;d<u.length;d+=1){var f=u[d];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[f]||(p.dom7LiveListeners[f]=[]),p.dom7LiveListeners[f].push({listener:r,proxyListener:o}),p.addEventListener(f,o,n)}else for(d=0;d<u.length;d+=1){var v=u[d];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[v]||(p.dom7Listeners[v]=[]),p.dom7Listeners[v].push({listener:r,proxyListener:l}),p.addEventListener(v,l,n)}}return this},i.once=function(){for(var e=this,t=arguments.length,i=new Array(t),s=0;s<t;s++)i[s]=arguments[s];var a=i[0],r=i[1],n=i[2],o=i[3];function l(){for(var t=arguments.length,i=new Array(t),s=0;s<t;s++)i[s]=arguments[s];n.apply(this,i),e.off(a,r,l,o),l.dom7proxy&&delete l.dom7proxy}return"function"==typeof i[1]&&(a=i[0],n=i[1],o=i[2],r=void 0),l.dom7proxy=n,e.on(a,r,l,o)},i.outerHeight=function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},i.outerWidth=function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},i.parent=function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?h(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return h(t)},i.parents=function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].parentNode;s;)e?h(s).is(e)&&t.push(s):t.push(s),s=s.parentNode;return h(t)},i.prepend=function(e){var t,i,a=s.getDocument();for(t=0;t<this.length;t+=1)if("string"==typeof e){var r=a.createElement("div");for(r.innerHTML=e,i=r.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(r.childNodes[i],this[t].childNodes[0])}else if(e instanceof d)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},i.prependTo=function(e){return h(e).prepend(this),this},i.prev=function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&h(t.previousElementSibling).is(e)?h([t.previousElementSibling]):h([]):t.previousElementSibling?h([t.previousElementSibling]):h([])}return h([])},i.prevAll=function(e){var t=[],i=this[0];if(!i)return h([]);for(;i.previousElementSibling;){var s=i.previousElementSibling;e?h(s).is(e)&&t.push(s):t.push(s),i=s}return h(t)},i.prop=function(e,t){if(1!==arguments.length||"string"!=typeof e){for(var i=0;i<this.length;i+=1)if(2===arguments.length)this[i][e]=t;else for(var s in e)this[i][s]=e[s];return this}return this[0]?this[0][e]:this},i.remove=function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},i.removeAttr=function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},i.removeClass=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=u(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,s)})),this},i.removeData=function(e){for(var t=0;t<this.length;t+=1){var i=this[t];i.dom7ElementDataStorage&&i.dom7ElementDataStorage[e]&&(i.dom7ElementDataStorage[e]=null,delete i.dom7ElementDataStorage[e])}},i.resize=D,i.scroll=I,i.scrollLeft=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=t[0],a=t[1],r=t[2],n=t[3];3===t.length&&"function"==typeof r&&(s=t[0],a=t[1],n=t[2],r=t[3]);var o=this;return void 0===s?o.length>0?o[0].scrollLeft:null:o.scrollTo(s,void 0,a,r,n)},i.scrollTo=function(){for(var e=s.getWindow(),t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];var r=i[0],n=i[1],o=i[2],l=i[3],d=i[4];return 4===i.length&&"function"==typeof l&&(d=l,r=i[0],n=i[1],o=i[2],d=i[3],l=i[4]),void 0===l&&(l="swing"),this.each((function(){var t,i,s,a,u,c,h,p,f=this,v=n>0||0===n,m=r>0||0===r;if(void 0===l&&(l="swing"),v&&(t=f.scrollTop,o||(f.scrollTop=n)),m&&(i=f.scrollLeft,o||(f.scrollLeft=r)),o){v&&(s=f.scrollHeight-f.offsetHeight,u=Math.max(Math.min(n,s),0)),m&&(a=f.scrollWidth-f.offsetWidth,c=Math.max(Math.min(r,a),0));var g=null;v&&u===t&&(v=!1),m&&c===i&&(m=!1),e.requestAnimationFrame((function s(a){void 0===a&&(a=(new Date).getTime()),null===g&&(g=a);var r,n=Math.max(Math.min((a-g)/o,1),0),w="linear"===l?n:.5-Math.cos(n*Math.PI)/2;v&&(h=t+w*(u-t)),m&&(p=i+w*(c-i)),v&&u>t&&h>=u&&(f.scrollTop=u,r=!0),v&&u<t&&h<=u&&(f.scrollTop=u,r=!0),m&&c>i&&p>=c&&(f.scrollLeft=c,r=!0),m&&c<i&&p<=c&&(f.scrollLeft=c,r=!0),r?d&&d():(v&&(f.scrollTop=h),m&&(f.scrollLeft=p),e.requestAnimationFrame(s))}))}}))},i.scrollTop=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=t[0],a=t[1],r=t[2],n=t[3];3===t.length&&"function"==typeof r&&(s=t[0],a=t[1],n=t[2],r=t[3]);var o=this;return void 0===s?o.length>0?o[0].scrollTop:null:o.scrollTo(void 0,s,a,r,n)},i.show=function(){for(var e=s.getWindow(),t=0;t<this.length;t+=1){var i=this[t];"none"===i.style.display&&(i.style.display=""),"none"===e.getComputedStyle(i,null).getPropertyValue("display")&&(i.style.display="block")}return this},i.siblings=function(e){return this.nextAll(e).add(this.prevAll(e))},i.stop=function(){for(var e=0;e<this.length;e+=1)this[e].dom7AnimateInstance&&this[e].dom7AnimateInstance.stop()},i.styles=function(){var e=s.getWindow();return this[0]?e.getComputedStyle(this[0],null):{}},i.submit=T,i.text=function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},i.toggleClass=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var s=u(t.map((function(e){return e.split(" ")})));this.forEach((function(e){s.forEach((function(t){e.classList.toggle(t)}))}))},i.touchend=A,i.touchmove=$,i.touchstart=O,i.transform=function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},i.transition=function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},i.transitionEnd=function(e){var t=this;return e&&t.on("transitionend",(function i(s){s.target===this&&(e.call(this,s),t.off("transitionend",i))})),this},i.trigger=function(){for(var e=s.getWindow(),t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];for(var r=i[0].split(" "),n=i[1],o=0;o<r.length;o+=1)for(var l=r[o],d=0;d<this.length;d+=1){var u=this[d];if(e.CustomEvent){var c=new e.CustomEvent(l,{detail:n,bubbles:!0,cancelable:!0});u.dom7EventData=i.filter((function(e,t){return t>0})),u.dispatchEvent(c),u.dom7EventData=[],delete u.dom7EventData}}return this},i.val=function(e){if(void 0===e){var t=this[0];if(!t)return;if(t.multiple&&"select"===t.nodeName.toLowerCase()){for(var i=[],s=0;s<t.selectedOptions.length;s+=1)i.push(t.selectedOptions[s].value);return i}return t.value}for(var a=0;a<this.length;a+=1){var r=this[a];if(Array.isArray(e)&&r.multiple&&"select"===r.nodeName.toLowerCase())for(var n=0;n<r.options.length;n+=1)r.options[n].selected=e.indexOf(r.options[n].value)>=0;else r.value=e}return this},i.value=function(e){return this.val(e)},i.width=function(){var e=s.getWindow();return this[0]===e?e.innerWidth:this.length>0?parseFloat(this.css("width")):null}},{"ssr-window":5}],2:[function(e,t,i){!function(e,i){var s=function(e,t,i){"use strict";var s,a;if(function(){var t,i={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",fastLoadedClass:"ls-is-cached",iframeLoadMode:0,srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(t in a=e.lazySizesConfig||e.lazysizesConfig||{},i)t in a||(a[t]=i[t])}(),!t||!t.getElementsByClassName)return{init:function(){},cfg:a,noSupport:!0};var r=t.documentElement,n=e.HTMLPictureElement,o=e.addEventListener.bind(e),l=e.setTimeout,d=e.requestAnimationFrame||l,u=e.requestIdleCallback,c=/^picture$/i,h=["load","error","lazyincluded","_lazyloaded"],p={},f=Array.prototype.forEach,v=function(e,t){return p[t]||(p[t]=new RegExp("(\\s|^)"+t+"(\\s|$)")),p[t].test(e.getAttribute("class")||"")&&p[t]},m=function(e,t){v(e,t)||e.setAttribute("class",(e.getAttribute("class")||"").trim()+" "+t)},g=function(e,t){var i;(i=v(e,t))&&e.setAttribute("class",(e.getAttribute("class")||"").replace(i," "))},w=function(e,t,i){var s=i?"addEventListener":"removeEventListener";i&&w(e,t),h.forEach((function(i){e[s](i,t)}))},y=function(e,i,a,r,n){var o=t.createEvent("Event");return a||(a={}),a.instance=s,o.initEvent(i,!r,!n),o.detail=a,e.dispatchEvent(o),o},b=function(t,i){var s;!n&&(s=e.picturefill||a.pf)?(i&&i.src&&!t.getAttribute("srcset")&&t.setAttribute("srcset",i.src),s({reevaluate:!0,elements:[t]})):i&&i.src&&(t.src=i.src)},x=function(e,t){return(getComputedStyle(e,null)||{})[t]},E=function(e,t,i){for(i=i||e.offsetWidth;i<a.minSize&&t&&!e._lazysizesWidth;)i=t.offsetWidth,t=t.parentNode;return i},T=(pe=[],fe=[],ve=pe,me=function(){var e=ve;for(ve=pe.length?fe:pe,ce=!0,he=!1;e.length;)e.shift()();ce=!1},ge=function(e,i){ce&&!i?e.apply(this,arguments):(ve.push(e),he||(he=!0,(t.hidden?l:d)(me)))},ge._lsFlush=me,ge),S=function(e,t){return t?function(){T(e)}:function(){var t=this,i=arguments;T((function(){e.apply(t,i)}))}},C=function(e){var t,s,a=function(){t=null,e()},r=function(){var e=i.now()-s;e<99?l(r,99-e):(u||a)(a)};return function(){s=i.now(),t||(t=l(r,99))}},M=(V=/^img$/i,X=/^iframe$/i,Y="onscroll"in e&&!/(gle|ing)bot/.test(navigator.userAgent),q=0,U=0,K=-1,Z=function(e){U--,(!e||U<0||!e.target)&&(U=0)},Q=function(e){return null==R&&(R="hidden"==x(t.body,"visibility")),R||!("hidden"==x(e.parentNode,"visibility")&&"hidden"==x(e,"visibility"))},J=function(e,i){var s,a=e,n=Q(e);for(H-=i,F+=i,W-=i,G+=i;n&&(a=a.offsetParent)&&a!=t.body&&a!=r;)(n=(x(a,"opacity")||1)>0)&&"visible"!=x(a,"overflow")&&(s=a.getBoundingClientRect(),n=G>s.left&&W<s.right&&F>s.top-1&&H<s.bottom+1);return n},ee=function(){var e,i,n,o,l,d,u,c,h,p,f,v,m=s.elements;if((I=a.loadMode)&&U<8&&(e=m.length)){for(i=0,K++;i<e;i++)if(m[i]&&!m[i]._lazyRace)if(!Y||s.prematureUnveil&&s.prematureUnveil(m[i]))oe(m[i]);else if((c=m[i].getAttribute("data-expand"))&&(d=1*c)||(d=q),p||(p=!a.expand||a.expand<1?r.clientHeight>500&&r.clientWidth>500?500:370:a.expand,s._defEx=p,f=p*a.expFactor,v=a.hFac,R=null,q<f&&U<1&&K>2&&I>2&&!t.hidden?(q=f,K=0):q=I>1&&K>1&&U<6?p:0),h!==d&&(N=innerWidth+d*v,B=innerHeight+d,u=-1*d,h=d),n=m[i].getBoundingClientRect(),(F=n.bottom)>=u&&(H=n.top)<=B&&(G=n.right)>=u*v&&(W=n.left)<=N&&(F||G||W||H)&&(a.loadHidden||Q(m[i]))&&($&&U<3&&!c&&(I<3||K<4)||J(m[i],d))){if(oe(m[i]),l=!0,U>9)break}else!l&&$&&!o&&U<4&&K<4&&I>2&&(A[0]||a.preloadAfterLoad)&&(A[0]||!c&&(F||G||W||H||"auto"!=m[i].getAttribute(a.sizesAttr)))&&(o=A[0]||m[i]);o&&!l&&oe(o)}},te=function(e){var t,s=0,r=a.throttleDelay,n=a.ricTimeout,o=function(){t=!1,s=i.now(),e()},d=u&&n>49?function(){u(o,{timeout:n}),n!==a.ricTimeout&&(n=a.ricTimeout)}:S((function(){l(o)}),!0);return function(e){var a;(e=!0===e)&&(n=33),t||(t=!0,(a=r-(i.now()-s))<0&&(a=0),e||a<9?d():l(d,a))}}(ee),ie=function(e){var t=e.target;t._lazyCache?delete t._lazyCache:(Z(e),m(t,a.loadedClass),g(t,a.loadingClass),w(t,ae),y(t,"lazyloaded"))},se=S(ie),ae=function(e){se({target:e.target})},re=function(e){var t,i=e.getAttribute(a.srcsetAttr);(t=a.customMedia[e.getAttribute("data-media")||e.getAttribute("media")])&&e.setAttribute("media",t),i&&e.setAttribute("srcset",i)},ne=S((function(e,t,i,s,r){var n,o,d,u,h,p;(h=y(e,"lazybeforeunveil",t)).defaultPrevented||(s&&(i?m(e,a.autosizesClass):e.setAttribute("sizes",s)),o=e.getAttribute(a.srcsetAttr),n=e.getAttribute(a.srcAttr),r&&(u=(d=e.parentNode)&&c.test(d.nodeName||"")),p=t.firesLoad||"src"in e&&(o||n||u),h={target:e},m(e,a.loadingClass),p&&(clearTimeout(D),D=l(Z,2500),w(e,ae,!0)),u&&f.call(d.getElementsByTagName("source"),re),o?e.setAttribute("srcset",o):n&&!u&&(X.test(e.nodeName)?function(e,t){var i=e.getAttribute("data-load-mode")||a.iframeLoadMode;0==i?e.contentWindow.location.replace(t):1==i&&(e.src=t)}(e,n):e.src=n),r&&(o||u)&&b(e,{src:n})),e._lazyRace&&delete e._lazyRace,g(e,a.lazyClass),T((function(){var t=e.complete&&e.naturalWidth>1;p&&!t||(t&&m(e,a.fastLoadedClass),ie(h),e._lazyCache=!0,l((function(){"_lazyCache"in e&&delete e._lazyCache}),9)),"lazy"==e.loading&&U--}),!0)})),oe=function(e){if(!e._lazyRace){var t,i=V.test(e.nodeName),s=i&&(e.getAttribute(a.sizesAttr)||e.getAttribute("sizes")),r="auto"==s;(!r&&$||!i||!e.getAttribute("src")&&!e.srcset||e.complete||v(e,a.errorClass)||!v(e,a.lazyClass))&&(t=y(e,"lazyunveilread").detail,r&&z.updateElem(e,!0,e.offsetWidth),e._lazyRace=!0,U++,ne(e,t,r,s,i))}},le=C((function(){a.loadMode=3,te()})),de=function(){3==a.loadMode&&(a.loadMode=2),le()},ue=function(){$||(i.now()-j<999?l(ue,999):($=!0,a.loadMode=3,te(),o("scroll",de,!0)))},{_:function(){j=i.now(),s.elements=t.getElementsByClassName(a.lazyClass),A=t.getElementsByClassName(a.lazyClass+" "+a.preloadClass),o("scroll",te,!0),o("resize",te,!0),o("pageshow",(function(e){if(e.persisted){var i=t.querySelectorAll("."+a.loadingClass);i.length&&i.forEach&&d((function(){i.forEach((function(e){e.complete&&oe(e)}))}))}})),e.MutationObserver?new MutationObserver(te).observe(r,{childList:!0,subtree:!0,attributes:!0}):(r.addEventListener("DOMNodeInserted",te,!0),r.addEventListener("DOMAttrModified",te,!0),setInterval(te,999)),o("hashchange",te,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach((function(e){t.addEventListener(e,te,!0)})),/d$|^c/.test(t.readyState)?ue():(o("load",ue),t.addEventListener("DOMContentLoaded",te),l(ue,2e4)),s.elements.length?(ee(),T._lsFlush()):te()},checkElems:te,unveil:oe,_aLSL:de}),z=(_=S((function(e,t,i,s){var a,r,n;if(e._lazysizesWidth=s,s+="px",e.setAttribute("sizes",s),c.test(t.nodeName||""))for(r=0,n=(a=t.getElementsByTagName("source")).length;r<n;r++)a[r].setAttribute("sizes",s);i.detail.dataAttr||b(e,i.detail)})),L=function(e,t,i){var s,a=e.parentNode;a&&(i=E(e,a,i),(s=y(e,"lazybeforesizes",{width:i,dataAttr:!!t})).defaultPrevented||(i=s.detail.width)&&i!==e._lazysizesWidth&&_(e,a,s,i))},O=C((function(){var e,t=k.length;if(t)for(e=0;e<t;e++)L(k[e])})),{_:function(){k=t.getElementsByClassName(a.autosizesClass),o("resize",O)},checkElems:O,updateElem:L}),P=function(){!P.i&&t.getElementsByClassName&&(P.i=!0,z._(),M._())};var k,_,L,O;var A,$,D,I,j,N,B,H,W,G,F,R,V,X,Y,q,U,K,Z,Q,J,ee,te,ie,se,ae,re,ne,oe,le,de,ue;var ce,he,pe,fe,ve,me,ge;return l((function(){a.init&&P()})),s={cfg:a,autoSizer:z,loader:M,init:P,uP:b,aC:m,rC:g,hC:v,fire:y,gW:E,rAF:T}}(e,e.document,Date);e.lazySizes=s,"object"==typeof t&&t.exports&&(t.exports=s)}("undefined"!=typeof window?window:{})},{}],3:[function(e,t,i){!function(i,s){if(i){var a=function(){s(i.lazySizes),i.removeEventListener("lazyunveilread",a,!0)};s=s.bind(null,i,i.document),"object"==typeof t&&t.exports?s(e("lazysizes")):"function"==typeof define&&define.amd?define(["lazysizes"],s):i.lazySizes?a():i.addEventListener("lazyunveilread",a,!0)}}("undefined"!=typeof window?window:0,(function(e,t,i){"use strict";if(e.addEventListener){var s=/\s+(\d+)(w|h)\s+(\d+)(w|h)/,a=/parent-fit["']*\s*:\s*["']*(contain|cover|width)/,r=/parent-container["']*\s*:\s*["']*(.+?)(?=(\s|$|,|'|"|;))/,n=/^picture$/i,o=i.cfg,l={getParent:function(t,i){var s=t,a=t.parentNode;return i&&"prev"!=i||!a||!n.test(a.nodeName||"")||(a=a.parentNode),"self"!=i&&(s="prev"==i?t.previousElementSibling:i&&(a.closest||e.jQuery)&&(a.closest?a.closest(i):jQuery(a).closest(i)[0])||a),s},getFit:function(e){var t,i,s=getComputedStyle(e,null)||{},n=s.content||s.fontFamily,o={fit:e._lazysizesParentFit||e.getAttribute("data-parent-fit")};return!o.fit&&n&&(t=n.match(a))&&(o.fit=t[1]),o.fit?(!(i=e._lazysizesParentContainer||e.getAttribute("data-parent-container"))&&n&&(t=n.match(r))&&(i=t[1]),o.parent=l.getParent(e,i)):o.fit=s.objectFit,o},getImageRatio:function(t){var i,a,r,l,d,u,c,h=t.parentNode,p=h&&n.test(h.nodeName||"")?h.querySelectorAll("source, img"):[t];for(i=0;i<p.length;i++)if(a=(t=p[i]).getAttribute(o.srcsetAttr)||t.getAttribute("srcset")||t.getAttribute("data-pfsrcset")||t.getAttribute("data-risrcset")||"",r=t._lsMedia||t.getAttribute("media"),r=o.customMedia[t.getAttribute("data-media")||r]||r,a&&(!r||(e.matchMedia&&matchMedia(r)||{}).matches)){(l=parseFloat(t.getAttribute("data-aspectratio")))||((d=a.match(s))?"w"==d[2]?(u=d[1],c=d[3]):(u=d[3],c=d[1]):(u=t.getAttribute("width"),c=t.getAttribute("height")),l=u/c);break}return l},calculateSize:function(e,t){var i,s,a,r=this.getFit(e),n=r.fit,o=r.parent;return"width"==n||("contain"==n||"cover"==n)&&(s=this.getImageRatio(e))?(o?t=o.clientWidth:o=e,a=t,"width"==n?a=t:(i=t/o.clientHeight)&&("cover"==n&&i<s||"contain"==n&&i>s)&&(a=t*(s/i)),a):t}};i.parentFit=l,t.addEventListener("lazybeforesizes",(function(e){if(!e.defaultPrevented&&e.detail.instance==i){var t=e.target;e.detail.width=l.calculateSize(t,e.detail.width)}}))}}))},{lazysizes:2}],4:[function(e,t,i){!function(){var e,s,a,r,n={frameRate:150,animationTime:400,stepSize:100,pulseAlgorithm:!0,pulseScale:4,pulseNormalize:1,accelerationDelta:50,accelerationMax:3,keyboardSupport:!0,arrowScroll:50,fixedBackground:!0,excluded:""},o=n,l=!1,d={x:0,y:0},u=!1,c=document.documentElement,h=[],p=/^Mac/.test(navigator.platform),f=37,v=38,m=39,g=40,w=32,y=33,b=34,x=35,E=36,T={37:1,38:1,39:1,40:1};function S(){if(!u&&document.body){u=!0;var t=document.body,i=document.documentElement,r=window.innerHeight,n=t.scrollHeight;if(c=document.compatMode.indexOf("CSS")>=0?i:t,e=t,o.keyboardSupport&&V("keydown",_),top!=self)l=!0;else if(le&&n>r&&(t.offsetHeight<=r||i.offsetHeight<=r)){var d,h=document.createElement("div");h.style.cssText="position:absolute; z-index:-10000; top:0; left:0; right:0; height:"+c.scrollHeight+"px",document.body.appendChild(h),a=function(){d||(d=setTimeout((function(){h.style.height="0",h.style.height=c.scrollHeight+"px",d=null}),500))},setTimeout(a,10),V("resize",a);if((s=new Q(a)).observe(t,{attributes:!0,childList:!0,characterData:!1}),c.offsetHeight<=r){var p=document.createElement("div");p.style.clear="both",t.appendChild(p)}}o.fixedBackground||(t.style.backgroundAttachment="scroll",i.style.backgroundAttachment="scroll")}}var C=[],M=!1,z=Date.now();function P(e,t,i){var s,a;if(s=(s=t)>0?1:-1,a=(a=i)>0?1:-1,(d.x!==s||d.y!==a)&&(d.x=s,d.y=a,C=[],z=0),1!=o.accelerationMax){var r=Date.now()-z;if(r<o.accelerationDelta){var n=(1+50/r)/2;n>1&&(n=Math.min(n,o.accelerationMax),t*=n,i*=n)}z=Date.now()}if(C.push({x:t,y:i,lastX:t<0?.99:-.99,lastY:i<0?.99:-.99,start:Date.now()}),!M){var l=J(),u=e===l||e===document.body;null==e.$scrollBehavior&&function(e){var t=$(e);if(null==j[t]){var i=getComputedStyle(e,"")["scroll-behavior"];j[t]="smooth"==i}return j[t]}(e)&&(e.$scrollBehavior=e.style.scrollBehavior,e.style.scrollBehavior="auto");var c=function(s){for(var a=Date.now(),r=0,n=0,l=0;l<C.length;l++){var d=C[l],h=a-d.start,p=h>=o.animationTime,f=p?1:h/o.animationTime;o.pulseAlgorithm&&(f=te(f));var v=d.x*f-d.lastX>>0,m=d.y*f-d.lastY>>0;r+=v,n+=m,d.lastX+=v,d.lastY+=m,p&&(C.splice(l,1),l--)}u?window.scrollBy(r,n):(r&&(e.scrollLeft+=r),n&&(e.scrollTop+=n)),t||i||(C=[]),C.length?Z(c,e,1e3/o.frameRate+1):(M=!1,null!=e.$scrollBehavior&&(e.style.scrollBehavior=e.$scrollBehavior,e.$scrollBehavior=null))};Z(c,e,0),M=!0}}function k(t){u||S();var i=t.target;if(t.defaultPrevented||t.ctrlKey)return!0;if(Y(e,"embed")||Y(i,"embed")&&/\.pdf/i.test(i.src)||Y(e,"object")||i.shadowRoot)return!0;var s=-t.wheelDeltaX||t.deltaX||0,a=-t.wheelDeltaY||t.deltaY||0;p&&(t.wheelDeltaX&&q(t.wheelDeltaX,120)&&(s=t.wheelDeltaX/Math.abs(t.wheelDeltaX)*-120),t.wheelDeltaY&&q(t.wheelDeltaY,120)&&(a=t.wheelDeltaY/Math.abs(t.wheelDeltaY)*-120)),s||a||(a=-t.wheelDelta||0),1===t.deltaMode&&(s*=40,a*=40);var n=W(i);return n?!!function(e){if(!e)return;h.length||(h=[e,e,e]);e=Math.abs(e),h.push(e),h.shift(),clearTimeout(r),r=setTimeout((function(){try{localStorage.SS_deltaBuffer=h.join(",")}catch(e){}}),1e3);var t=e>120&&U(e),i=!U(120)&&!U(100)&&!t;return e<50||i}(a)||(Math.abs(s)>1.2&&(s*=o.stepSize/120),Math.abs(a)>1.2&&(a*=o.stepSize/120),P(n,s,a),t.preventDefault(),void N()):!l||!ae||(Object.defineProperty(t,"target",{value:window.frameElement}),parent.wheel(t))}function _(t){var i=t.target,s=t.ctrlKey||t.altKey||t.metaKey||t.shiftKey&&t.keyCode!==w;document.body.contains(e)||(e=document.activeElement);var a=/^(button|submit|radio|checkbox|file|color|image)$/i;if(t.defaultPrevented||/^(textarea|select|embed|object)$/i.test(i.nodeName)||Y(i,"input")&&!a.test(i.type)||Y(e,"video")||function(e){var t=e.target,i=!1;if(-1!=document.URL.indexOf("www.youtube.com/watch"))do{if(i=t.classList&&t.classList.contains("html5-video-controls"))break}while(t=t.parentNode);return i}(t)||i.isContentEditable||s)return!0;if((Y(i,"button")||Y(i,"input")&&a.test(i.type))&&t.keyCode===w)return!0;if(Y(i,"input")&&"radio"==i.type&&T[t.keyCode])return!0;var r=0,n=0,d=W(e);if(!d)return!l||!ae||parent.keydown(t);var u=d.clientHeight;switch(d==document.body&&(u=window.innerHeight),t.keyCode){case v:n=-o.arrowScroll;break;case g:n=o.arrowScroll;break;case w:n=-(t.shiftKey?1:-1)*u*.9;break;case y:n=.9*-u;break;case b:n=.9*u;break;case E:d==document.body&&document.scrollingElement&&(d=document.scrollingElement),n=-d.scrollTop;break;case x:var c=d.scrollHeight-d.scrollTop-u;n=c>0?c+10:0;break;case f:r=-o.arrowScroll;break;case m:r=o.arrowScroll;break;default:return!0}P(d,r,n),t.preventDefault(),N()}function L(t){e=t.target}var O,A,$=(O=0,function(e){return e.uniqueID||(e.uniqueID=O++)}),D={},I={},j={};function N(){clearTimeout(A),A=setInterval((function(){D=I=j={}}),1e3)}function B(e,t,i){for(var s=i?D:I,a=e.length;a--;)s[$(e[a])]=t;return t}function H(e,t){return(t?D:I)[$(e)]}function W(e){var t=[],i=document.body,s=c.scrollHeight;do{var a=H(e,!1);if(a)return B(t,a);if(t.push(e),s===e.scrollHeight){var r=F(c)&&F(i)||R(c);if(l&&G(c)||!l&&r)return B(t,J())}else if(G(e)&&R(e))return B(t,e)}while(e=e.parentElement)}function G(e){return e.clientHeight+10<e.scrollHeight}function F(e){return"hidden"!==getComputedStyle(e,"").getPropertyValue("overflow-y")}function R(e){var t=getComputedStyle(e,"").getPropertyValue("overflow-y");return"scroll"===t||"auto"===t}function V(e,t,i){window.addEventListener(e,t,i||!1)}function X(e,t,i){window.removeEventListener(e,t,i||!1)}function Y(e,t){return e&&(e.nodeName||"").toLowerCase()===t.toLowerCase()}if(window.localStorage&&localStorage.SS_deltaBuffer)try{h=localStorage.SS_deltaBuffer.split(",")}catch(e){}function q(e,t){return Math.floor(e/t)==e/t}function U(e){return q(h[0],e)&&q(h[1],e)&&q(h[2],e)}var K,Z=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e,t,i){window.setTimeout(e,i||1e3/60)},Q=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,J=(K=document.scrollingElement,function(){if(!K){var e=document.createElement("div");e.style.cssText="height:10000px;width:1px;",document.body.appendChild(e);var t=document.body.scrollTop;document.documentElement.scrollTop,window.scrollBy(0,3),K=document.body.scrollTop!=t?document.body:document.documentElement,window.scrollBy(0,-3),document.body.removeChild(e)}return K});function ee(e){var t,i;return(e*=o.pulseScale)<1?t=e-(1-Math.exp(-e)):(e-=1,t=(i=Math.exp(-1))+(1-Math.exp(-e))*(1-i)),t*o.pulseNormalize}function te(e){return e>=1?1:e<=0?0:(1==o.pulseNormalize&&(o.pulseNormalize/=ee(1)),ee(e))}var ie=window.navigator.userAgent,se=/Edge/.test(ie),ae=/chrome/i.test(ie)&&!se,re=/safari/i.test(ie)&&!se,ne=/mobile/i.test(ie),oe=/Windows NT 6.1/i.test(ie)&&/rv:11/i.test(ie),le=re&&(/Version\/8/i.test(ie)||/Version\/9/i.test(ie)),de=(ae||re||oe)&&!ne,ue=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){ue=!0}}))}catch(e){}var ce=!!ue&&{passive:!1},he="onwheel"in document.createElement("div")?"wheel":"mousewheel";function pe(e){for(var t in e)n.hasOwnProperty(t)&&(o[t]=e[t])}he&&de&&(V(he,k,ce),V("mousedown",L),V("load",S)),pe.destroy=function(){s&&s.disconnect(),X(he,k),X("mousedown",L),X("keydown",_),X("resize",a),X("load",S)},window.SmoothScrollOptions&&pe(window.SmoothScrollOptions),"function"==typeof define&&define.amd?define((function(){return pe})):"object"==typeof i?t.exports=pe:window.SmoothScroll=pe}()},{}],5:[function(e,t,i){var s,a;s=this,a=function(e){"use strict";function t(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(e,s){void 0===e&&(e={}),void 0===s&&(s={}),Object.keys(s).forEach((function(a){void 0===e[a]?e[a]=s[a]:t(s[a])&&t(e[a])&&Object.keys(s[a]).length>0&&i(e[a],s[a])}))}var s={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}},a={document:s,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};e.extend=i,e.getDocument=function(){var e="undefined"!=typeof document?document:{};return i(e,s),e},e.getWindow=function(){var e="undefined"!=typeof window?window:{};return i(e,a),e},e.ssrDocument=s,e.ssrWindow=a,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof i&&void 0!==t?a(i):"function"==typeof define&&define.amd?define(["exports"],a):a((s=s||self).ssrWindow={})},{}],6:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={getRandomNumber:function(e){void 0===e&&(e=16);return"x".repeat(e).replace(/x/g,(function(){return Math.round(16*Math.random()).toString(16)}))},makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElRoleDescription:function(e,t){return e.attr("aria-role-description",t),e},addElControls:function(e,t){return e.attr("aria-controls",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},addElId:function(e,t){return e.attr("id",t),e},addElLive:function(e,t){return e.attr("aria-live",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this.params.a11y;if(13===e.keyCode){var i=(0,a.default)(e.target);this.navigation&&this.navigation.$nextEl&&i.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(t.lastSlideMessage):this.a11y.notify(t.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&i.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(t.firstSlideMessage):this.a11y.notify(t.prevSlideMessage)),this.pagination&&i.is("."+this.params.pagination.bulletClass.replace(/ /g,"."))&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){if(!this.params.loop&&this.navigation){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;i&&i.length>0&&(this.isBeginning?(this.a11y.disableEl(i),this.a11y.makeElNotFocusable(i)):(this.a11y.enableEl(i),this.a11y.makeElFocusable(i))),t&&t.length>0&&(this.isEnd?(this.a11y.disableEl(t),this.a11y.makeElNotFocusable(t)):(this.a11y.enableEl(t),this.a11y.makeElFocusable(t)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(i){var s=(0,a.default)(i);e.a11y.makeElFocusable(s),e.params.pagination.renderBullet||(e.a11y.addElRole(s,"button"),e.a11y.addElLabel(s,t.paginationBulletMessage.replace(/\{\{index\}\}/,s.index()+1)))}))},init:function(){var e=this,t=e.params.a11y;e.$el.append(e.a11y.liveRegion);var i=e.$el;t.containerRoleDescriptionMessage&&e.a11y.addElRoleDescription(i,t.containerRoleDescriptionMessage),t.containerMessage&&e.a11y.addElLabel(i,t.containerMessage);var s,r,n,o=e.$wrapperEl,l=o.attr("id")||"swiper-wrapper-"+e.a11y.getRandomNumber(16);e.a11y.addElId(o,l),s=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite",e.a11y.addElLive(o,s),t.itemRoleDescriptionMessage&&e.a11y.addElRoleDescription((0,a.default)(e.slides),t.itemRoleDescriptionMessage),e.a11y.addElRole((0,a.default)(e.slides),"group"),e.slides.each((function(t){var i=(0,a.default)(t);e.a11y.addElLabel(i,i.index()+1+" / "+e.slides.length)})),e.navigation&&e.navigation.$nextEl&&(r=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(n=e.navigation.$prevEl),r&&r.length&&(e.a11y.makeElFocusable(r),"BUTTON"!==r[0].tagName&&(e.a11y.addElRole(r,"button"),r.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(r,t.nextSlideMessage),e.a11y.addElControls(r,l)),n&&n.length&&(e.a11y.makeElFocusable(n),"BUTTON"!==n[0].tagName&&(e.a11y.addElRole(n,"button"),n.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(n,t.prevSlideMessage),e.a11y.addElControls(n,l)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass.replace(/ /g,"."),e.a11y.onEnterKey)},destroy:function(){var e,t;this.a11y.liveRegion&&this.a11y.liveRegion.length>0&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&e.off("keydown",this.a11y.onEnterKey),t&&t.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass.replace(/ /g,"."),this.a11y.onEnterKey)}},l={name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null}},create:function(){(0,r.bindModuleMethods)(this,{a11y:n({},o,{liveRegion:(0,a.default)('<span class="'+this.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],7:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("ssr-window"),a=e("../../utils/utils");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var n={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=(0,a.nextTick)((function(){var t;e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),(e.params.cssMode&&e.autoplay.running||!1===t)&&e.autoplay.run()}),i)},start:function(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop:function(){return!!this.autoplay.running&&(void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0))},pause:function(e){this.autoplay.running&&(this.autoplay.paused||(this.autoplay.timeout&&clearTimeout(this.autoplay.timeout),this.autoplay.paused=!0,0!==e&&this.params.autoplay.waitForTransition?(this.$wrapperEl[0].addEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].addEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd)):(this.autoplay.paused=!1,this.autoplay.run())))},onVisibilityChange:function(){var e=(0,s.getDocument)();"hidden"===e.visibilityState&&this.autoplay.running&&this.autoplay.pause(),"visible"===e.visibilityState&&this.autoplay.paused&&(this.autoplay.run(),this.autoplay.paused=!1)},onTransitionEnd:function(e){this&&!this.destroyed&&this.$wrapperEl&&e.target===this.$wrapperEl[0]&&(this.$wrapperEl[0].removeEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].removeEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd),this.autoplay.paused=!1,this.autoplay.running?this.autoplay.run():this.autoplay.stop())}},o={name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){(0,a.bindModuleMethods)(this,{autoplay:r({},n,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),(0,s.getDocument)().addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,i){e.autoplay.running&&(i||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),(0,s.getDocument)().removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}};i.default=o},{"../../utils/utils":93,"ssr-window":5}],8:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("../../utils/utils");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var r={LinearSpline:function(e,t){var i,s,a,r,n,o=function(e,t){for(s=-1,i=e.length;i-s>1;)e[a=i+s>>1]<=t?s=a:i=a;return i};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=o(this.x,e),r=n-1,(e-this.x[r])*(this.y[n]-this.y[r])/(this.x[n]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new r.LinearSpline(this.slidesGrid,e.slidesGrid):new r.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,s,a=this,r=a.controller.control,n=a.constructor;function o(e){var t=a.rtlTranslate?-a.translate:a.translate;"slide"===a.params.controller.by&&(a.controller.getInterpolateFunction(e),s=-a.controller.spline.interpolate(-t)),s&&"container"!==a.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(a.maxTranslate()-a.minTranslate()),s=(t-a.minTranslate())*i+e.minTranslate()),a.params.controller.inverse&&(s=e.maxTranslate()-s),e.updateProgress(s),e.setTranslate(s,a),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var l=0;l<r.length;l+=1)r[l]!==t&&r[l]instanceof n&&o(r[l]);else r instanceof n&&t!==r&&o(r)},setTransition:function(e,t){var i,a=this,r=a.constructor,n=a.controller.control;function o(t){t.setTransition(e,a),0!==e&&(t.transitionStart(),t.params.autoHeight&&(0,s.nextTick)((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){n&&(t.params.loop&&"slide"===a.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(n))for(i=0;i<n.length;i+=1)n[i]!==t&&n[i]instanceof r&&o(n[i]);else n instanceof r&&t!==n&&o(n)}},n={name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){(0,s.bindModuleMethods)(this,{controller:a({control:this.params.controller.control},r)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,i){e.controller.control&&e.controller.setTranslate(t,i)},setTransition:function(e,t,i){e.controller.control&&e.controller.setTransition(t,i)}}};i.default=n},{"../../utils/utils":93}],9:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=(0,s.getWindow)();if(!e)return;var i=!1,a=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var i=parseFloat(e.substr(1));return{value:t.innerHeight*i,point:e}}return{value:e,point:e}}));a.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var r=0;r<a.length;r+=1){var n=a[r],o=n.point;n.value<=t.innerWidth&&(i=o)}return i||"max"};var s=e("ssr-window")},{"ssr-window":5}],10:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=r(e("./setBreakpoint")),a=r(e("./getBreakpoint"));function r(e){return e&&e.__esModule?e:{default:e}}var n={setBreakpoint:s.default,getBreakpoint:a.default};i.default=n},{"./getBreakpoint":9,"./setBreakpoint":11}],11:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=this.activeIndex,t=this.initialized,i=this.loopedSlides,a=void 0===i?0:i,r=this.params,n=this.$el,o=r.breakpoints;if(!o||o&&0===Object.keys(o).length)return;var l=this.getBreakpoint(o);if(l&&this.currentBreakpoint!==l){var d=l in o?o[l]:void 0;d&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var u=d||this.originalParams,c=r.slidesPerColumn>1,h=u.slidesPerColumn>1;c&&!h?(n.removeClass(r.containerModifierClass+"multirow "+r.containerModifierClass+"multirow-column"),this.emitContainerClasses()):!c&&h&&(n.addClass(r.containerModifierClass+"multirow"),"column"===u.slidesPerColumnFill&&n.addClass(r.containerModifierClass+"multirow-column"),this.emitContainerClasses());var p=u.direction&&u.direction!==r.direction,f=r.loop&&(u.slidesPerView!==r.slidesPerView||p);p&&t&&this.changeDirection(),(0,s.extend)(this.params,u),(0,s.extend)(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=l,this.emit("_beforeBreakpoint",u),f&&t&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-a+this.loopedSlides,0,!1)),this.emit("breakpoint",u)}};var s=e("../../../utils/utils")},{"../../../utils/utils":93}],12:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s={checkOverflow:function(){var e=this.params,t=this.isLocked,i=this.slides.length>0&&e.slidesOffsetBefore+e.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;e.slidesOffsetBefore&&e.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,t!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation&&this.navigation.update())}};i.default=s},{}],13:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=this.classNames,t=this.params,i=this.rtl,s=this.$el,a=this.device,r=[];r.push("initialized"),r.push(t.direction),t.freeMode&&r.push("free-mode");t.autoHeight&&r.push("autoheight");i&&r.push("rtl");t.slidesPerColumn>1&&(r.push("multirow"),"column"===t.slidesPerColumnFill&&r.push("multirow-column"));a.android&&r.push("android");a.ios&&r.push("ios");t.cssMode&&r.push("css-mode");r.forEach((function(i){e.push(t.containerModifierClass+i)})),s.addClass(e.join(" ")),this.emitContainerClasses()}},{}],14:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=r(e("./addClasses")),a=r(e("./removeClasses"));function r(e){return e&&e.__esModule?e:{default:e}}var n={addClasses:s.default,removeClasses:a.default};i.default=n},{"./addClasses":13,"./removeClasses":15}],15:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" ")),this.emitContainerClasses()}},{}],16:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=C(e("../../utils/dom")),a=e("../../utils/utils"),r=e("../../utils/get-support"),n=e("../../utils/get-device"),o=e("../../utils/get-browser"),l=C(e("../../modules/resize/resize")),d=C(e("../../modules/observer/observer")),u=C(e("./modular")),c=C(e("./events-emitter")),h=C(e("./update/index")),p=C(e("./translate/index")),f=C(e("./transition/index")),v=C(e("./slide/index")),m=C(e("./loop/index")),g=C(e("./grab-cursor/index")),w=C(e("./manipulation/index")),y=C(e("./events/index")),b=C(e("./breakpoints/index")),x=C(e("./classes/index")),E=C(e("./images/index")),T=C(e("./check-overflow/index")),S=C(e("./defaults"));function C(e){return e&&e.__esModule?e:{default:e}}function M(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var z={modular:u.default,eventsEmitter:c.default,update:h.default,translate:p.default,transition:f.default,slide:v.default,loop:m.default,grabCursor:g.default,manipulation:w.default,events:y.default,breakpoints:b.default,checkOverflow:T.default,classes:x.default,images:E.default},P={},k=function(){function e(){for(var t,i,l=arguments.length,d=new Array(l),u=0;u<l;u++)d[u]=arguments[u];1===d.length&&d[0].constructor&&d[0].constructor===Object?i=d[0]:(t=d[0],i=d[1]),i||(i={}),i=(0,a.extend)({},i),t&&!i.el&&(i.el=t);var c=this;c.support=(0,r.getSupport)(),c.device=(0,n.getDevice)({userAgent:i.userAgent}),c.browser=(0,o.getBrowser)(),c.eventsListeners={},c.eventsAnyListeners=[],void 0===c.modules&&(c.modules={}),Object.keys(c.modules).forEach((function(e){var t=c.modules[e];if(t.params){var s=Object.keys(t.params)[0],a=t.params[s];if("object"!=typeof a||null===a)return;if(!(s in i)||!("enabled"in a))return;!0===i[s]&&(i[s]={enabled:!0}),"object"!=typeof i[s]||"enabled"in i[s]||(i[s].enabled=!0),i[s]||(i[s]={enabled:!1})}}));var h=(0,a.extend)({},S.default);c.useParams(h),c.params=(0,a.extend)({},h,P,i),c.originalParams=(0,a.extend)({},c.params),c.passedParams=(0,a.extend)({},i),c.params&&c.params.on&&Object.keys(c.params.on).forEach((function(e){c.on(e,c.params.on[e])})),c.params&&c.params.onAny&&c.onAny(c.params.onAny),c.$=s.default;var p=(0,s.default)(c.params.el);if(t=p[0]){if(p.length>1){var f=[];return p.each((function(t){var s=(0,a.extend)({},i,{el:t});f.push(new e(s))})),f}var v,m,g;return t.swiper=c,t&&t.shadowRoot&&t.shadowRoot.querySelector?(v=(0,s.default)(t.shadowRoot.querySelector("."+c.params.wrapperClass))).children=function(e){return p.children(e)}:v=p.children("."+c.params.wrapperClass),(0,a.extend)(c,{$el:p,el:t,$wrapperEl:v,wrapperEl:v[0],classNames:[],slides:(0,s.default)(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===c.params.direction},isVertical:function(){return"vertical"===c.params.direction},rtl:"rtl"===t.dir.toLowerCase()||"rtl"===p.css("direction"),rtlTranslate:"horizontal"===c.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===p.css("direction")),wrongRTL:"-webkit-box"===v.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:c.params.allowSlideNext,allowSlidePrev:c.params.allowSlidePrev,touchEvents:(m=["touchstart","touchmove","touchend","touchcancel"],g=["mousedown","mousemove","mouseup"],c.support.pointerEvents&&(g=["pointerdown","pointermove","pointerup"]),c.touchEventsTouch={start:m[0],move:m[1],end:m[2],cancel:m[3]},c.touchEventsDesktop={start:g[0],move:g[1],end:g[2]},c.support.touch||!c.params.simulateTouch?c.touchEventsTouch:c.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:(0,a.now)(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:c.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),c.useModules(),c.emit("_swiper"),c.params.init&&c.init(),c}}var t,i,l,d=e.prototype;return d.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},d.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter((function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)})).join(" ")},d.emitSlidesClasses=function(){var e=this;e.params._emitClasses&&e.el&&e.slides.each((function(t){var i=e.getSlideClasses(t);e.emit("_slideClass",t,i)}))},d.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,s=this.size,a=this.activeIndex,r=1;if(e.centeredSlides){for(var n,o=t[a].swiperSlideSize,l=a+1;l<t.length;l+=1)t[l]&&!n&&(r+=1,(o+=t[l].swiperSlideSize)>s&&(n=!0));for(var d=a-1;d>=0;d-=1)t[d]&&!n&&(r+=1,(o+=t[d].swiperSlideSize)>s&&(n=!0))}else for(var u=a+1;u<t.length;u+=1)i[u]-i[a]<s&&(r+=1);return r},d.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,i=e.params;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(s(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||s(),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function s(){var t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}},d.changeDirection=function(e,t){void 0===t&&(t=!0);var i=this.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(this.$el.removeClass(""+this.params.containerModifierClass+i).addClass(""+this.params.containerModifierClass+e),this.emitContainerClasses(),this.params.direction=e,this.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),this.emit("changeDirection"),t&&this.update()),this},d.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"),this.emit("afterInit"))},d.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,s=i.params,r=i.$el,n=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr("style"),n.removeAttr("style"),o&&o.length&&o.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((function(e){i.off(e)})),!1!==e&&(i.$el[0].swiper=null,(0,a.deleteProps)(i)),i.destroyed=!0),null},e.extendDefaults=function(e){(0,a.extend)(P,e)},e.installModule=function(t){e.prototype.modules||(e.prototype.modules={});var i=t.name||Object.keys(e.prototype.modules).length+"_"+(0,a.now)();e.prototype.modules[i]=t},e.use=function(t){return Array.isArray(t)?(t.forEach((function(t){return e.installModule(t)})),e):(e.installModule(t),e)},t=e,l=[{key:"extendedDefaults",get:function(){return P}},{key:"defaults",get:function(){return S.default}}],(i=null)&&M(t.prototype,i),l&&M(t,l),e}();Object.keys(z).forEach((function(e){Object.keys(z[e]).forEach((function(t){k.prototype[t]=z[e][t]}))})),k.use([l.default,d.default]);var _=k;i.default=_},{"../../modules/observer/observer":87,"../../modules/resize/resize":88,"../../utils/dom":89,"../../utils/get-browser":90,"../../utils/get-device":91,"../../utils/get-support":92,"../../utils/utils":93,"./breakpoints/index":10,"./check-overflow/index":12,"./classes/index":14,"./defaults":17,"./events-emitter":18,"./events/index":19,"./grab-cursor/index":26,"./images/index":29,"./loop/index":32,"./manipulation/index":38,"./modular":42,"./slide/index":43,"./transition/index":51,"./translate/index":56,"./update/index":61}],17:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};i.default=s},{}],18:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s={on:function(e,t,i){var s=this;if("function"!=typeof t)return s;var a=i?"unshift":"push";return e.split(" ").forEach((function(e){s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][a](t)})),s},once:function(e,t,i){var s=this;if("function"!=typeof t)return s;function a(){s.off(e,a),a.__emitterProxy&&delete a.__emitterProxy;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];t.apply(s,r)}return a.__emitterProxy=t,s.on(e,a,i)},onAny:function(e,t){if("function"!=typeof e)return this;var i=t?"unshift":"push";return this.eventsAnyListeners.indexOf(e)<0&&this.eventsAnyListeners[i](e),this},offAny:function(e){if(!this.eventsAnyListeners)return this;var t=this.eventsAnyListeners.indexOf(e);return t>=0&&this.eventsAnyListeners.splice(t,1),this},off:function(e,t){var i=this;return i.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(s,a){(s===t||s.__emitterProxy&&s.__emitterProxy===t)&&i.eventsListeners[e].splice(a,1)}))})),i):i},emit:function(){var e,t,i,s=this;if(!s.eventsListeners)return s;for(var a=arguments.length,r=new Array(a),n=0;n<a;n++)r[n]=arguments[n];"string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],t=r.slice(1,r.length),i=s):(e=r[0].events,t=r[0].data,i=r[0].context||s),t.unshift(i);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){s.eventsAnyListeners&&s.eventsAnyListeners.length&&s.eventsAnyListeners.forEach((function(s){s.apply(i,[e].concat(t))})),s.eventsListeners&&s.eventsListeners[e]&&s.eventsListeners[e].forEach((function(e){e.apply(i,t)}))})),s}};i.default=s},{}],19:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("ssr-window"),a=u(e("./onTouchStart")),r=u(e("./onTouchMove")),n=u(e("./onTouchEnd")),o=u(e("./onResize")),l=u(e("./onClick")),d=u(e("./onScroll"));function u(e){return e&&e.__esModule?e:{default:e}}var c=!1;function h(){}var p={attachEvents:function(){var e=(0,s.getDocument)(),t=this.params,i=this.touchEvents,u=this.el,p=this.wrapperEl,f=this.device,v=this.support;this.onTouchStart=a.default.bind(this),this.onTouchMove=r.default.bind(this),this.onTouchEnd=n.default.bind(this),t.cssMode&&(this.onScroll=d.default.bind(this)),this.onClick=l.default.bind(this);var m=!!t.nested;if(!v.touch&&v.pointerEvents)u.addEventListener(i.start,this.onTouchStart,!1),e.addEventListener(i.move,this.onTouchMove,m),e.addEventListener(i.end,this.onTouchEnd,!1);else{if(v.touch){var g=!("touchstart"!==i.start||!v.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};u.addEventListener(i.start,this.onTouchStart,g),u.addEventListener(i.move,this.onTouchMove,v.passiveListener?{passive:!1,capture:m}:m),u.addEventListener(i.end,this.onTouchEnd,g),i.cancel&&u.addEventListener(i.cancel,this.onTouchEnd,g),c||(e.addEventListener("touchstart",h),c=!0)}(t.simulateTouch&&!f.ios&&!f.android||t.simulateTouch&&!v.touch&&f.ios)&&(u.addEventListener("mousedown",this.onTouchStart,!1),e.addEventListener("mousemove",this.onTouchMove,m),e.addEventListener("mouseup",this.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&u.addEventListener("click",this.onClick,!0),t.cssMode&&p.addEventListener("scroll",this.onScroll),t.updateOnWindowResize?this.on(f.ios||f.android?"resize orientationchange observerUpdate":"resize observerUpdate",o.default,!0):this.on("observerUpdate",o.default,!0)},detachEvents:function(){var e=(0,s.getDocument)(),t=this.params,i=this.touchEvents,a=this.el,r=this.wrapperEl,n=this.device,l=this.support,d=!!t.nested;if(!l.touch&&l.pointerEvents)a.removeEventListener(i.start,this.onTouchStart,!1),e.removeEventListener(i.move,this.onTouchMove,d),e.removeEventListener(i.end,this.onTouchEnd,!1);else{if(l.touch){var u=!("onTouchStart"!==i.start||!l.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};a.removeEventListener(i.start,this.onTouchStart,u),a.removeEventListener(i.move,this.onTouchMove,d),a.removeEventListener(i.end,this.onTouchEnd,u),i.cancel&&a.removeEventListener(i.cancel,this.onTouchEnd,u)}(t.simulateTouch&&!n.ios&&!n.android||t.simulateTouch&&!l.touch&&n.ios)&&(a.removeEventListener("mousedown",this.onTouchStart,!1),e.removeEventListener("mousemove",this.onTouchMove,d),e.removeEventListener("mouseup",this.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&a.removeEventListener("click",this.onClick,!0),t.cssMode&&r.removeEventListener("scroll",this.onScroll),this.off(n.ios||n.android?"resize orientationchange observerUpdate":"resize observerUpdate",o.default)}};i.default=p},{"./onClick":20,"./onResize":21,"./onScroll":22,"./onTouchEnd":23,"./onTouchMove":24,"./onTouchStart":25,"ssr-window":5}],20:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}},{}],21:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=this.params,t=this.el;if(t&&0===t.offsetWidth)return;e.breakpoints&&this.setBreakpoint();var i=this.allowSlideNext,s=this.allowSlidePrev,a=this.snapGrid;this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===e.slidesPerView||e.slidesPerView>1)&&this.isEnd&&!this.isBeginning&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0);this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run();this.allowSlidePrev=s,this.allowSlideNext=i,this.params.watchOverflow&&a!==this.snapGrid&&this.checkOverflow()}},{}],22:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e,t=this.wrapperEl,i=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:this.translate=-t.scrollTop;-0===this.translate&&(this.translate=0);this.updateActiveIndex(),this.updateSlidesClasses();var s=this.maxTranslate()-this.minTranslate();e=0===s?0:(this.translate-this.minTranslate())/s;e!==this.progress&&this.updateProgress(i?-this.translate:this.translate);this.emit("setTranslate",this.translate,!1)}},{}],23:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=this,i=t.touchEventsData,a=t.params,r=t.touches,n=t.rtlTranslate,o=t.$wrapperEl,l=t.slidesGrid,d=t.snapGrid,u=e;u.originalEvent&&(u=u.originalEvent);i.allowTouchCallbacks&&t.emit("touchEnd",u);if(i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&a.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);a.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,h=(0,s.now)(),p=h-i.touchStartTime;t.allowClick&&(t.updateClickedSlide(u),t.emit("tap click",u),p<300&&h-i.lastClickTime<300&&t.emit("doubleTap doubleClick",u));if(i.lastClickTime=(0,s.now)(),(0,s.nextTick)((function(){t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===r.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,c=a.followFinger?n?t.translate:-t.translate:-i.currentTranslate;if(a.cssMode)return;if(a.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<d.length?t.slideTo(d.length-1):t.slideTo(t.slides.length-1));if(a.freeModeMomentum){if(i.velocities.length>1){var f=i.velocities.pop(),v=i.velocities.pop(),m=f.position-v.position,g=f.time-v.time;t.velocity=m/g,t.velocity/=2,Math.abs(t.velocity)<a.freeModeMinimumVelocity&&(t.velocity=0),(g>150||(0,s.now)()-f.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=a.freeModeMomentumVelocityRatio,i.velocities.length=0;var w=1e3*a.freeModeMomentumRatio,y=t.velocity*w,b=t.translate+y;n&&(b=-b);var x,E,T=!1,S=20*Math.abs(t.velocity)*a.freeModeMomentumBounceRatio;if(b<t.maxTranslate())a.freeModeMomentumBounce?(b+t.maxTranslate()<-S&&(b=t.maxTranslate()-S),x=t.maxTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.maxTranslate(),a.loop&&a.centeredSlides&&(E=!0);else if(b>t.minTranslate())a.freeModeMomentumBounce?(b-t.minTranslate()>S&&(b=t.minTranslate()+S),x=t.minTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.minTranslate(),a.loop&&a.centeredSlides&&(E=!0);else if(a.freeModeSticky){for(var C,M=0;M<d.length;M+=1)if(d[M]>-b){C=M;break}b=-(b=Math.abs(d[C]-b)<Math.abs(d[C-1]-b)||"next"===t.swipeDirection?d[C]:d[C-1])}if(E&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(w=n?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),a.freeModeSticky){var z=Math.abs((n?-b:b)-t.translate),P=t.slidesSizesGrid[t.activeIndex];w=z<P?a.speed:z<2*P?1.5*a.speed:2.5*a.speed}}else if(a.freeModeSticky)return void t.slideToClosest();a.freeModeMomentumBounce&&T?(t.updateProgress(x),t.setTransition(w),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,o.transitionEnd((function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(a.speed),setTimeout((function(){t.setTranslate(x),o.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(b),t.setTransition(w),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,o.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(a.freeModeSticky)return void t.slideToClosest();return void((!a.freeModeMomentum||p>=a.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}for(var k=0,_=t.slidesSizesGrid[0],L=0;L<l.length;L+=L<a.slidesPerGroupSkip?1:a.slidesPerGroup){var O=L<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==l[L+O]?c>=l[L]&&c<l[L+O]&&(k=L,_=l[L+O]-l[L]):c>=l[L]&&(k=L,_=l[l.length-1]-l[l.length-2])}var A=(c-l[k])/_,$=k<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(p>a.longSwipesMs){if(!a.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(A>=a.longSwipesRatio?t.slideTo(k+$):t.slideTo(k)),"prev"===t.swipeDirection&&(A>1-a.longSwipesRatio?t.slideTo(k+$):t.slideTo(k))}else{if(!a.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(u.target===t.navigation.nextEl||u.target===t.navigation.prevEl)?u.target===t.navigation.nextEl?t.slideTo(k+$):t.slideTo(k):("next"===t.swipeDirection&&t.slideTo(k+$),"prev"===t.swipeDirection&&t.slideTo(k))}};var s=e("../../../utils/utils")},{"../../../utils/utils":93}],24:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=(0,a.getDocument)(),i=this.touchEventsData,s=this.params,o=this.touches,l=this.rtlTranslate,d=e;d.originalEvent&&(d=d.originalEvent);if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&this.emit("touchMoveOpposite",d));if(i.isTouchEvent&&"touchmove"!==d.type)return;var u="touchmove"===d.type&&d.targetTouches&&(d.targetTouches[0]||d.changedTouches[0]),c="touchmove"===d.type?u.pageX:d.pageX,h="touchmove"===d.type?u.pageY:d.pageY;if(d.preventedByNestedSwiper)return o.startX=c,void(o.startY=h);if(!this.allowTouchMove)return this.allowClick=!1,void(i.isTouched&&((0,n.extend)(o,{startX:c,startY:h,currentX:c,currentY:h}),i.touchStartTime=(0,n.now)()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(this.isVertical()){if(h<o.startY&&this.translate<=this.maxTranslate()||h>o.startY&&this.translate>=this.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(c<o.startX&&this.translate<=this.maxTranslate()||c>o.startX&&this.translate>=this.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&d.target===t.activeElement&&(0,r.default)(d.target).is(i.formElements))return i.isMoved=!0,void(this.allowClick=!1);i.allowTouchCallbacks&&this.emit("touchMove",d);if(d.targetTouches&&d.targetTouches.length>1)return;o.currentX=c,o.currentY=h;var p,f=o.currentX-o.startX,v=o.currentY-o.startY;if(this.params.threshold&&Math.sqrt(Math.pow(f,2)+Math.pow(v,2))<this.params.threshold)return;void 0===i.isScrolling&&(this.isHorizontal()&&o.currentY===o.startY||this.isVertical()&&o.currentX===o.startX?i.isScrolling=!1:f*f+v*v>=25&&(p=180*Math.atan2(Math.abs(v),Math.abs(f))/Math.PI,i.isScrolling=this.isHorizontal()?p>s.touchAngle:90-p>s.touchAngle));i.isScrolling&&this.emit("touchMoveOpposite",d);void 0===i.startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(i.startMoving=!0));if(i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;this.allowClick=!1,!s.cssMode&&d.cancelable&&d.preventDefault();s.touchMoveStopPropagation&&!s.nested&&d.stopPropagation();i.isMoved||(s.loop&&this.loopFix(),i.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",d));this.emit("sliderMove",d),i.isMoved=!0;var m=this.isHorizontal()?f:v;o.diff=m,m*=s.touchRatio,l&&(m=-m);this.swipeDirection=m>0?"prev":"next",i.currentTranslate=m+i.startTranslate;var g=!0,w=s.resistanceRatio;s.touchReleaseOnEdges&&(w=0);m>0&&i.currentTranslate>this.minTranslate()?(g=!1,s.resistance&&(i.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+i.startTranslate+m,w))):m<0&&i.currentTranslate<this.maxTranslate()&&(g=!1,s.resistance&&(i.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-i.startTranslate-m,w)));g&&(d.preventedByNestedSwiper=!0);!this.allowSlideNext&&"next"===this.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate);!this.allowSlidePrev&&"prev"===this.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate);if(s.threshold>0){if(!(Math.abs(m)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,i.currentTranslate=i.startTranslate,void(o.diff=this.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}if(!s.followFinger||s.cssMode)return;(s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses());s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:o[this.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:o[this.isHorizontal()?"currentX":"currentY"],time:(0,n.now)()}));this.updateProgress(i.currentTranslate),this.setTranslate(i.currentTranslate)};var s,a=e("ssr-window"),r=(s=e("../../../utils/dom"))&&s.__esModule?s:{default:s},n=e("../../../utils/utils")},{"../../../utils/dom":89,"../../../utils/utils":93,"ssr-window":5}],25:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=(0,a.getDocument)(),i=(0,a.getWindow)(),s=this.touchEventsData,o=this.params,l=this.touches;if(this.animating&&o.preventInteractionOnTransition)return;var d=e;d.originalEvent&&(d=d.originalEvent);var u=(0,r.default)(d.target);if("wrapper"===o.touchEventsTarget&&!u.closest(this.wrapperEl).length)return;if(s.isTouchEvent="touchstart"===d.type,!s.isTouchEvent&&"which"in d&&3===d.which)return;if(!s.isTouchEvent&&"button"in d&&d.button>0)return;if(s.isTouched&&s.isMoved)return;o.noSwipingClass&&""!==o.noSwipingClass&&d.target&&d.target.shadowRoot&&e.path&&e.path[0]&&(u=(0,r.default)(e.path[0]));if(o.noSwiping&&u.closest(o.noSwipingSelector?o.noSwipingSelector:"."+o.noSwipingClass)[0])return void(this.allowClick=!0);if(o.swipeHandler&&!u.closest(o.swipeHandler)[0])return;l.currentX="touchstart"===d.type?d.targetTouches[0].pageX:d.pageX,l.currentY="touchstart"===d.type?d.targetTouches[0].pageY:d.pageY;var c=l.currentX,h=l.currentY,p=o.edgeSwipeDetection||o.iOSEdgeSwipeDetection,f=o.edgeSwipeThreshold||o.iOSEdgeSwipeThreshold;if(p&&(c<=f||c>=i.innerWidth-f))return;(0,n.extend)(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=c,l.startY=h,s.touchStartTime=(0,n.now)(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,o.threshold>0&&(s.allowThresholdMove=!1);if("touchstart"!==d.type){var v=!0;u.is(s.formElements)&&(v=!1),t.activeElement&&(0,r.default)(t.activeElement).is(s.formElements)&&t.activeElement!==u[0]&&t.activeElement.blur();var m=v&&this.allowTouchMove&&o.touchStartPreventDefault;!o.touchStartForcePreventDefault&&!m||u[0].isContentEditable||d.preventDefault()}this.emit("touchStart",d)};var s,a=e("ssr-window"),r=(s=e("../../../utils/dom"))&&s.__esModule?s:{default:s},n=e("../../../utils/utils")},{"../../../utils/dom":89,"../../../utils/utils":93,"ssr-window":5}],26:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=r(e("./setGrabCursor")),a=r(e("./unsetGrabCursor"));function r(e){return e&&e.__esModule?e:{default:e}}var n={setGrabCursor:s.default,unsetGrabCursor:a.default};i.default=n},{"./setGrabCursor":27,"./unsetGrabCursor":28}],27:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){if(this.support.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)return;var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},{}],28:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){if(this.support.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)return;this.el.style.cursor=""}},{}],29:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=r(e("./loadImage")),a=r(e("./preloadImages"));function r(e){return e&&e.__esModule?e:{default:e}}var n={loadImage:s.default,preloadImages:a.default};i.default=n},{"./loadImage":30,"./preloadImages":31}],30:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i,s,n,o){var l,d=(0,a.getWindow)();function u(){o&&o()}(0,r.default)(e).parent("picture")[0]||e.complete&&n?u():t?((l=new d.Image).onload=u,l.onerror=u,s&&(l.sizes=s),i&&(l.srcset=i),t&&(l.src=t)):u()};var s,a=e("ssr-window"),r=(s=e("../../../utils/dom"))&&s.__esModule?s:{default:s}},{"../../../utils/dom":89,"ssr-window":5}],31:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}},{}],32:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=n(e("./loopCreate")),a=n(e("./loopFix")),r=n(e("./loopDestroy"));function n(e){return e&&e.__esModule?e:{default:e}}var o={loopCreate:s.default,loopFix:a.default,loopDestroy:r.default};i.default=o},{"./loopCreate":33,"./loopDestroy":34,"./loopFix":35}],33:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=this,t=(0,a.getDocument)(),i=e.params,s=e.$wrapperEl;s.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var n=s.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var o=i.slidesPerGroup-n.length%i.slidesPerGroup;if(o!==i.slidesPerGroup){for(var l=0;l<o;l+=1){var d=(0,r.default)(t.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);s.append(d)}n=s.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=n.length);e.loopedSlides=Math.ceil(parseFloat(i.loopedSlides||i.slidesPerView,10)),e.loopedSlides+=i.loopAdditionalSlides,e.loopedSlides>n.length&&(e.loopedSlides=n.length);var u=[],c=[];n.each((function(t,i){var s=(0,r.default)(t);i<e.loopedSlides&&c.push(t),i<n.length&&i>=n.length-e.loopedSlides&&u.push(t),s.attr("data-swiper-slide-index",i)}));for(var h=0;h<c.length;h+=1)s.append((0,r.default)(c[h].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var p=u.length-1;p>=0;p-=1)s.prepend((0,r.default)(u[p].cloneNode(!0)).addClass(i.slideDuplicateClass))};var s,a=e("ssr-window"),r=(s=e("../../../utils/dom"))&&s.__esModule?s:{default:s}},{"../../../utils/dom":89,"ssr-window":5}],34:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},{}],35:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){this.emit("beforeLoopFix");var e,t=this.activeIndex,i=this.slides,s=this.loopedSlides,a=this.allowSlidePrev,r=this.allowSlideNext,n=this.snapGrid,o=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-n[t]-this.getTranslate();if(t<s){e=i.length-3*s+t,e+=s,this.slideTo(e,0,!1,!0)&&0!==l&&this.setTranslate((o?-this.translate:this.translate)-l)}else if(t>=i.length-s){e=-i.length+t+s,e+=s,this.slideTo(e,0,!1,!0)&&0!==l&&this.setTranslate((o?-this.translate:this.translate)-l)}this.allowSlidePrev=a,this.allowSlideNext=r,this.emit("loopFix")}},{}],36:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t){var i=this.$wrapperEl,s=this.params,a=this.activeIndex;s.loop&&(a-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+s.slideClass));var r=this.slides.length;if(e<=0)return void this.prependSlide(t);if(e>=r)return void this.appendSlide(t);for(var n=a>e?a+1:a,o=[],l=r-1;l>=e;l-=1){var d=this.slides.eq(l);d.remove(),o.unshift(d)}if("object"==typeof t&&"length"in t){for(var u=0;u<t.length;u+=1)t[u]&&i.append(t[u]);n=a>e?a+t.length:a}else i.append(t);for(var c=0;c<o.length;c+=1)i.append(o[c]);s.loop&&this.loopCreate();s.observer&&this.support.observer||this.update();s.loop?this.slideTo(n+this.loopedSlides,0,!1):this.slideTo(n,0,!1)}},{}],37:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=this.$wrapperEl,i=this.params;i.loop&&this.loopDestroy();if("object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&t.append(e[s]);else t.append(e);i.loop&&this.loopCreate();i.observer&&this.support.observer||this.update()}},{}],38:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=l(e("./appendSlide")),a=l(e("./prependSlide")),r=l(e("./addSlide")),n=l(e("./removeSlide")),o=l(e("./removeAllSlides"));function l(e){return e&&e.__esModule?e:{default:e}}var d={appendSlide:s.default,prependSlide:a.default,addSlide:r.default,removeSlide:n.default,removeAllSlides:o.default};i.default=d},{"./addSlide":36,"./appendSlide":37,"./prependSlide":39,"./removeAllSlides":40,"./removeSlide":41}],39:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&this.loopDestroy();var a=s+1;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)e[r]&&i.prepend(e[r]);a=s+e.length}else i.prepend(e);t.loop&&this.loopCreate();t.observer&&this.support.observer||this.update();this.slideTo(a,0,!1)}},{}],40:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},{}],41:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&(s-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+t.slideClass));var a,r=s;if("object"==typeof e&&"length"in e){for(var n=0;n<e.length;n+=1)a=e[n],this.slides[a]&&this.slides.eq(a).remove(),a<r&&(r-=1);r=Math.max(r,0)}else a=e,this.slides[a]&&this.slides.eq(a).remove(),a<r&&(r-=1),r=Math.max(r,0);t.loop&&this.loopCreate();t.observer&&this.support.observer||this.update();t.loop?this.slideTo(r+this.loopedSlides,0,!1):this.slideTo(r,0,!1)}},{}],42:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("../../utils/utils"),a={useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var a=t.modules[i];a.params&&(0,s.extend)(e,a.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var s=t.modules[i],a=e[i]||{};s.on&&t.on&&Object.keys(s.on).forEach((function(e){t.on(e,s.on[e])})),s.create&&s.create.bind(t)(a)}))}};i.default=a},{"../../utils/utils":93}],43:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=u(e("./slideTo")),a=u(e("./slideToLoop")),r=u(e("./slideNext")),n=u(e("./slidePrev")),o=u(e("./slideReset")),l=u(e("./slideToClosest")),d=u(e("./slideToClickedSlide"));function u(e){return e&&e.__esModule?e:{default:e}}var c={slideTo:s.default,slideToLoop:a.default,slideNext:r.default,slidePrev:n.default,slideReset:o.default,slideToClosest:l.default,slideToClickedSlide:d.default};i.default=c},{"./slideNext":44,"./slidePrev":45,"./slideReset":46,"./slideTo":47,"./slideToClickedSlide":48,"./slideToClosest":49,"./slideToLoop":50}],44:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i){void 0===e&&(e=this.params.speed);void 0===t&&(t=!0);var s=this.params,a=this.animating,r=this.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(a&&s.loopPreventsSlide)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+r,e,t,i)}},{}],45:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i){void 0===e&&(e=this.params.speed);void 0===t&&(t=!0);var s=this.params,a=this.animating,r=this.snapGrid,n=this.slidesGrid,o=this.rtlTranslate;if(s.loop){if(a&&s.loopPreventsSlide)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var d,u=l(o?this.translate:-this.translate),c=r.map((function(e){return l(e)})),h=(r[c.indexOf(u)],r[c.indexOf(u)-1]);void 0===h&&s.cssMode&&r.forEach((function(e){!h&&u>=e&&(h=e)}));void 0!==h&&(d=n.indexOf(h))<0&&(d=this.activeIndex-1);return this.slideTo(d,e,t,i)}},{}],46:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i){void 0===e&&(e=this.params.speed);void 0===t&&(t=!0);return this.slideTo(this.activeIndex,e,t,i)}},{}],47:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i,s){void 0===e&&(e=0);void 0===t&&(t=this.params.speed);void 0===i&&(i=!0);if("number"!=typeof e&&"string"!=typeof e)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+typeof e+"] given.");if("string"==typeof e){var a=parseInt(e,10);if(!isFinite(a))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+e+"] given.");e=a}var r=this,n=e;n<0&&(n=0);var o=r.params,l=r.snapGrid,d=r.slidesGrid,u=r.previousIndex,c=r.activeIndex,h=r.rtlTranslate,p=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var f=Math.min(r.params.slidesPerGroupSkip,n),v=f+Math.floor((n-f)/r.params.slidesPerGroup);v>=l.length&&(v=l.length-1);(c||o.initialSlide||0)===(u||0)&&i&&r.emit("beforeSlideChangeStart");var m,g=-l[v];if(r.updateProgress(g),o.normalizeSlideIndex)for(var w=0;w<d.length;w+=1)-Math.floor(100*g)>=Math.floor(100*d[w])&&(n=w);if(r.initialized&&n!==c){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(c||0)!==n)return!1}m=n>c?"next":n<c?"prev":"reset";if(h&&-g===r.translate||!h&&g===r.translate)return r.updateActiveIndex(n),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(g),"reset"!==m&&(r.transitionStart(i,m),r.transitionEnd(i,m)),!1;if(o.cssMode){var y,b=r.isHorizontal(),x=-g;if(h&&(x=p.scrollWidth-p.offsetWidth-x),0===t)p[b?"scrollLeft":"scrollTop"]=x;else if(p.scrollTo)p.scrollTo(((y={})[b?"left":"top"]=x,y.behavior="smooth",y));else p[b?"scrollLeft":"scrollTop"]=x;return!0}0===t?(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,s),r.transitionStart(i,m),r.transitionEnd(i,m)):(r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,s),r.transitionStart(i,m),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,m))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd)));return!0}},{}],48:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e,t=this,i=t.params,s=t.$wrapperEl,n="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,o=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt((0,a.default)(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?o<t.loopedSlides-n/2||o>t.slides.length-t.loopedSlides+n/2?(t.loopFix(),o=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),(0,r.nextTick)((function(){t.slideTo(o)}))):t.slideTo(o):o>t.slides.length-n?(t.loopFix(),o=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),(0,r.nextTick)((function(){t.slideTo(o)}))):t.slideTo(o)}else t.slideTo(o)};var s,a=(s=e("../../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../../utils/utils")},{"../../../utils/dom":89,"../../../utils/utils":93}],49:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i,s){void 0===e&&(e=this.params.speed);void 0===t&&(t=!0);void 0===s&&(s=.5);var a=this.activeIndex,r=Math.min(this.params.slidesPerGroupSkip,a),n=r+Math.floor((a-r)/this.params.slidesPerGroup),o=this.rtlTranslate?this.translate:-this.translate;if(o>=this.snapGrid[n]){var l=this.snapGrid[n],d=this.snapGrid[n+1];o-l>(d-l)*s&&(a+=this.params.slidesPerGroup)}else{var u=this.snapGrid[n-1],c=this.snapGrid[n];o-u<=(c-u)*s&&(a-=this.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,this.slidesGrid.length-1),this.slideTo(a,e,t,i)}},{}],50:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i,s){void 0===e&&(e=0);void 0===t&&(t=this.params.speed);void 0===i&&(i=!0);var a=e;this.params.loop&&(a+=this.loopedSlides);return this.slideTo(a,t,i,s)}},{}],51:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=n(e("./setTransition")),a=n(e("./transitionStart")),r=n(e("./transitionEnd"));function n(e){return e&&e.__esModule?e:{default:e}}var o={setTransition:s.default,transitionStart:a.default,transitionEnd:r.default};i.default=o},{"./setTransition":52,"./transitionEnd":53,"./transitionStart":54}],52:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t){this.params.cssMode||this.$wrapperEl.transition(e);this.emit("setTransition",e,t)}},{}],53:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.previousIndex,a=this.params;if(this.animating=!1,a.cssMode)return;this.setTransition(0);var r=t;r||(r=i>s?"next":i<s?"prev":"reset");if(this.emit("transitionEnd"),e&&i!==s){if("reset"===r)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===r?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}},{}],54:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.params,a=this.previousIndex;if(s.cssMode)return;s.autoHeight&&this.updateAutoHeight();var r=t;r||(r=i>a?"next":i<a?"prev":"reset");if(this.emit("transitionStart"),e&&i!==a){if("reset"===r)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===r?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},{}],55:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,a=this.translate,r=this.$wrapperEl;if(t.virtualTranslate)return i?-a:a;if(t.cssMode)return a;var n=(0,s.getTranslate)(r[0],e);i&&(n=-n);return n||0};var s=e("../../../utils/utils")},{"../../../utils/utils":93}],56:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=l(e("./getTranslate")),a=l(e("./setTranslate")),r=l(e("./minTranslate")),n=l(e("./maxTranslate")),o=l(e("./translateTo"));function l(e){return e&&e.__esModule?e:{default:e}}var d={getTranslate:s.default,setTranslate:a.default,minTranslate:r.default,maxTranslate:n.default,translateTo:o.default};i.default=d},{"./getTranslate":55,"./maxTranslate":57,"./minTranslate":58,"./setTranslate":59,"./translateTo":60}],57:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){return-this.snapGrid[this.snapGrid.length-1]}},{}],58:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){return-this.snapGrid[0]}},{}],59:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t){var i,s=this.rtlTranslate,a=this.params,r=this.$wrapperEl,n=this.wrapperEl,o=this.progress,l=0,d=0;this.isHorizontal()?l=s?-e:e:d=e;a.roundLengths&&(l=Math.floor(l),d=Math.floor(d));a.cssMode?n[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-l:-d:a.virtualTranslate||r.transform("translate3d("+l+"px, "+d+"px, 0px)");this.previousTranslate=this.translate,this.translate=this.isHorizontal()?l:d;var u=this.maxTranslate()-this.minTranslate();i=0===u?0:(e-this.minTranslate())/u;i!==o&&this.updateProgress(e);this.emit("setTranslate",this.translate,t)}},{}],60:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e,t,i,s,a){void 0===e&&(e=0);void 0===t&&(t=this.params.speed);void 0===i&&(i=!0);void 0===s&&(s=!0);var r=this,n=r.params,o=r.wrapperEl;if(r.animating&&n.preventInteractionOnTransition)return!1;var l,d=r.minTranslate(),u=r.maxTranslate();l=s&&e>d?d:s&&e<u?u:e;if(r.updateProgress(l),n.cssMode){var c,h=r.isHorizontal();if(0===t)o[h?"scrollLeft":"scrollTop"]=-l;else if(o.scrollTo)o.scrollTo(((c={})[h?"left":"top"]=-l,c.behavior="smooth",c));else o[h?"scrollLeft":"scrollTop"]=-l;return!0}0===t?(r.setTransition(0),r.setTranslate(l),i&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(l),i&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,i&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd)));return!0}},{}],61:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=h(e("./updateSize")),a=h(e("./updateSlides")),r=h(e("./updateAutoHeight")),n=h(e("./updateSlidesOffset")),o=h(e("./updateSlidesProgress")),l=h(e("./updateProgress")),d=h(e("./updateSlidesClasses")),u=h(e("./updateActiveIndex")),c=h(e("./updateClickedSlide"));function h(e){return e&&e.__esModule?e:{default:e}}var p={updateSize:s.default,updateSlides:a.default,updateAutoHeight:r.default,updateSlidesOffset:n.default,updateSlidesProgress:o.default,updateProgress:l.default,updateSlidesClasses:d.default,updateActiveIndex:u.default,updateClickedSlide:c.default};i.default=p},{"./updateActiveIndex":62,"./updateAutoHeight":63,"./updateClickedSlide":64,"./updateProgress":65,"./updateSize":66,"./updateSlides":67,"./updateSlidesClasses":68,"./updateSlidesOffset":69,"./updateSlidesProgress":70}],62:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t,i=this.rtlTranslate?this.translate:-this.translate,a=this.slidesGrid,r=this.snapGrid,n=this.params,o=this.activeIndex,l=this.realIndex,d=this.snapIndex,u=e;if(void 0===u){for(var c=0;c<a.length;c+=1)void 0!==a[c+1]?i>=a[c]&&i<a[c+1]-(a[c+1]-a[c])/2?u=c:i>=a[c]&&i<a[c+1]&&(u=c+1):i>=a[c]&&(u=c);n.normalizeSlideIndex&&(u<0||void 0===u)&&(u=0)}if(r.indexOf(i)>=0)t=r.indexOf(i);else{var h=Math.min(n.slidesPerGroupSkip,u);t=h+Math.floor((u-h)/n.slidesPerGroup)}t>=r.length&&(t=r.length-1);if(u===o)return void(t!==d&&(this.snapIndex=t,this.emit("snapIndexChange")));var p=parseInt(this.slides.eq(u).attr("data-swiper-slide-index")||u,10);(0,s.extend)(this,{snapIndex:t,realIndex:p,previousIndex:o,activeIndex:u}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),l!==p&&this.emit("realIndexChange");(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")};var s=e("../../../utils/utils")},{"../../../utils/utils":93}],63:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t,i=[],s=0;"number"==typeof e?this.setTransition(e):!0===e&&this.setTransition(this.params.speed);if("auto"!==this.params.slidesPerView&&this.params.slidesPerView>1)if(this.params.centeredSlides)this.visibleSlides.each((function(e){i.push(e)}));else for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var a=this.activeIndex+t;if(a>this.slides.length)break;i.push(this.slides.eq(a)[0])}else i.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var r=i[t].offsetHeight;s=r>s?r:s}s&&this.$wrapperEl.css("height",s+"px")}},{}],64:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){var t=this.params,i=(0,a.default)(e.target).closest("."+t.slideClass)[0],s=!1;if(i)for(var r=0;r<this.slides.length;r+=1)this.slides[r]===i&&(s=!0);if(!i||!s)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt((0,a.default)(i).attr("data-swiper-slide-index"),10):this.clickedIndex=(0,a.default)(i).index();t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()};var s,a=(s=e("../../../utils/dom"))&&s.__esModule?s:{default:s}},{"../../../utils/dom":89}],65:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){if(void 0===e){var t=this.rtlTranslate?-1:1;e=this&&this.translate&&this.translate*t||0}var i=this.params,a=this.maxTranslate()-this.minTranslate(),r=this.progress,n=this.isBeginning,o=this.isEnd,l=n,d=o;0===a?(r=0,n=!0,o=!0):(r=(e-this.minTranslate())/a,n=r<=0,o=r>=1);(0,s.extend)(this,{progress:r,isBeginning:n,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(e);n&&!l&&this.emit("reachBeginning toEdge");o&&!d&&this.emit("reachEnd toEdge");(l&&!n||d&&!o)&&this.emit("fromEdge");this.emit("progress",r)};var s=e("../../../utils/utils")},{"../../../utils/utils":93}],66:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e,t,i=this.$el;e=void 0!==this.params.width&&null!==this.params.width?this.params.width:i[0].clientWidth;t=void 0!==this.params.height&&null!==this.params.height?this.params.height:i[0].clientHeight;if(0===e&&this.isHorizontal()||0===t&&this.isVertical())return;e=e-parseInt(i.css("padding-left")||0,10)-parseInt(i.css("padding-right")||0,10),t=t-parseInt(i.css("padding-top")||0,10)-parseInt(i.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0);Number.isNaN(t)&&(t=0);(0,s.extend)(this,{width:e,height:t,size:this.isHorizontal()?e:t})};var s=e("../../../utils/utils")},{"../../../utils/utils":93}],67:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e=(0,s.getWindow)(),t=this.params,i=this.$wrapperEl,r=this.size,n=this.rtlTranslate,o=this.wrongRTL,l=this.virtual&&t.virtual.enabled,d=l?this.virtual.slides.length:this.slides.length,u=i.children("."+this.params.slideClass),c=l?this.virtual.slides.length:u.length,h=[],p=[],f=[];function v(e,i){return!t.cssMode||i!==u.length-1}var m=t.slidesOffsetBefore;"function"==typeof m&&(m=t.slidesOffsetBefore.call(this));var g=t.slidesOffsetAfter;"function"==typeof g&&(g=t.slidesOffsetAfter.call(this));var w,y,b=this.snapGrid.length,x=this.slidesGrid.length,E=t.spaceBetween,T=-m,S=0,C=0;if(void 0===r)return;"string"==typeof E&&E.indexOf("%")>=0&&(E=parseFloat(E.replace("%",""))/100*r);this.virtualSize=-E,n?u.css({marginLeft:"",marginTop:""}):u.css({marginRight:"",marginBottom:""});t.slidesPerColumn>1&&(w=Math.floor(c/t.slidesPerColumn)===c/this.params.slidesPerColumn?c:Math.ceil(c/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(w=Math.max(w,t.slidesPerView*t.slidesPerColumn)));for(var M,z=t.slidesPerColumn,P=w/z,k=Math.floor(c/t.slidesPerColumn),_=0;_<c;_+=1){y=0;var L=u.eq(_);if(t.slidesPerColumn>1){var O=void 0,A=void 0,$=void 0;if("row"===t.slidesPerColumnFill&&t.slidesPerGroup>1){var D=Math.floor(_/(t.slidesPerGroup*t.slidesPerColumn)),I=_-t.slidesPerColumn*t.slidesPerGroup*D,j=0===D?t.slidesPerGroup:Math.min(Math.ceil((c-D*z*t.slidesPerGroup)/z),t.slidesPerGroup);$=Math.floor(I/j),A=I-$*j+D*t.slidesPerGroup,O=A+$*w/z,L.css({"-webkit-box-ordinal-group":O,"-moz-box-ordinal-group":O,"-ms-flex-order":O,"-webkit-order":O,order:O})}else"column"===t.slidesPerColumnFill?(A=Math.floor(_/z),$=_-A*z,(A>k||A===k&&$===z-1)&&($+=1)>=z&&($=0,A+=1)):($=Math.floor(_/P),A=_-$*P);L.css("margin-"+(this.isHorizontal()?"top":"left"),0!==$&&t.spaceBetween&&t.spaceBetween+"px")}if("none"!==L.css("display")){if("auto"===t.slidesPerView){var N=e.getComputedStyle(L[0],null),B=L[0].style.transform,H=L[0].style.webkitTransform;if(B&&(L[0].style.transform="none"),H&&(L[0].style.webkitTransform="none"),t.roundLengths)y=this.isHorizontal()?L.outerWidth(!0):L.outerHeight(!0);else if(this.isHorizontal()){var W=parseFloat(N.getPropertyValue("width")||0),G=parseFloat(N.getPropertyValue("padding-left")||0),F=parseFloat(N.getPropertyValue("padding-right")||0),R=parseFloat(N.getPropertyValue("margin-left")||0),V=parseFloat(N.getPropertyValue("margin-right")||0),X=N.getPropertyValue("box-sizing");if(X&&"border-box"===X)y=W+R+V;else{var Y=L[0],q=Y.clientWidth,U=Y.offsetWidth;y=W+G+F+R+V+(U-q)}}else{var K=parseFloat(N.getPropertyValue("height")||0),Z=parseFloat(N.getPropertyValue("padding-top")||0),Q=parseFloat(N.getPropertyValue("padding-bottom")||0),J=parseFloat(N.getPropertyValue("margin-top")||0),ee=parseFloat(N.getPropertyValue("margin-bottom")||0),te=N.getPropertyValue("box-sizing");if(te&&"border-box"===te)y=K+J+ee;else{var ie=L[0],se=ie.clientHeight,ae=ie.offsetHeight;y=K+Z+Q+J+ee+(ae-se)}}B&&(L[0].style.transform=B),H&&(L[0].style.webkitTransform=H),t.roundLengths&&(y=Math.floor(y))}else y=(r-(t.slidesPerView-1)*E)/t.slidesPerView,t.roundLengths&&(y=Math.floor(y)),u[_]&&(this.isHorizontal()?u[_].style.width=y+"px":u[_].style.height=y+"px");u[_]&&(u[_].swiperSlideSize=y),f.push(y),t.centeredSlides?(T=T+y/2+S/2+E,0===S&&0!==_&&(T=T-r/2-E),0===_&&(T=T-r/2-E),Math.abs(T)<.001&&(T=0),t.roundLengths&&(T=Math.floor(T)),C%t.slidesPerGroup==0&&h.push(T),p.push(T)):(t.roundLengths&&(T=Math.floor(T)),(C-Math.min(this.params.slidesPerGroupSkip,C))%this.params.slidesPerGroup==0&&h.push(T),p.push(T),T=T+y+E),this.virtualSize+=y+E,S=y,C+=1}}this.virtualSize=Math.max(this.virtualSize,r)+g,n&&o&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:this.virtualSize+t.spaceBetween+"px"});t.setWrapperSize&&(this.isHorizontal()?i.css({width:this.virtualSize+t.spaceBetween+"px"}):i.css({height:this.virtualSize+t.spaceBetween+"px"}));if(t.slidesPerColumn>1&&(this.virtualSize=(y+t.spaceBetween)*w,this.virtualSize=Math.ceil(this.virtualSize/t.slidesPerColumn)-t.spaceBetween,this.isHorizontal()?i.css({width:this.virtualSize+t.spaceBetween+"px"}):i.css({height:this.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){M=[];for(var re=0;re<h.length;re+=1){var ne=h[re];t.roundLengths&&(ne=Math.floor(ne)),h[re]<this.virtualSize+h[0]&&M.push(ne)}h=M}if(!t.centeredSlides){M=[];for(var oe=0;oe<h.length;oe+=1){var le=h[oe];t.roundLengths&&(le=Math.floor(le)),h[oe]<=this.virtualSize-r&&M.push(le)}h=M,Math.floor(this.virtualSize-r)-Math.floor(h[h.length-1])>1&&h.push(this.virtualSize-r)}0===h.length&&(h=[0]);0!==t.spaceBetween&&(this.isHorizontal()?n?u.filter(v).css({marginLeft:E+"px"}):u.filter(v).css({marginRight:E+"px"}):u.filter(v).css({marginBottom:E+"px"}));if(t.centeredSlides&&t.centeredSlidesBounds){var de=0;f.forEach((function(e){de+=e+(t.spaceBetween?t.spaceBetween:0)}));var ue=(de-=t.spaceBetween)-r;h=h.map((function(e){return e<0?-m:e>ue?ue+g:e}))}if(t.centerInsufficientSlides){var ce=0;if(f.forEach((function(e){ce+=e+(t.spaceBetween?t.spaceBetween:0)})),(ce-=t.spaceBetween)<r){var he=(r-ce)/2;h.forEach((function(e,t){h[t]=e-he})),p.forEach((function(e,t){p[t]=e+he}))}}(0,a.extend)(this,{slides:u,snapGrid:h,slidesGrid:p,slidesSizesGrid:f}),c!==d&&this.emit("slidesLengthChange");h.length!==b&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange"));p.length!==x&&this.emit("slidesGridLengthChange");(t.watchSlidesProgress||t.watchSlidesVisibility)&&this.updateSlidesOffset()};var s=e("ssr-window"),a=e("../../../utils/utils")},{"../../../utils/utils":93,"ssr-window":5}],68:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){var e,t=this.slides,i=this.params,s=this.$wrapperEl,a=this.activeIndex,r=this.realIndex,n=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),e=n?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+a+'"]'):t.eq(a);e.addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass));var o=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===o.length&&(o=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass);i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass));this.emitSlidesClasses()}},{}],69:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop}},{}],70:[function(e,t,i){"use strict";i.__esModule=!0,i.default=function(e){void 0===e&&(e=this&&this.translate||0);var t=this.params,i=this.slides,s=this.rtlTranslate;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var r=-e;s&&(r=e);i.removeClass(t.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var n=0;n<i.length;n+=1){var o=i[n],l=(r+(t.centeredSlides?this.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+t.spaceBetween);if(t.watchSlidesVisibility||t.centeredSlides&&t.autoHeight){var d=-(r-o.swiperSlideOffset),u=d+this.slidesSizesGrid[n];(d>=0&&d<this.size-1||u>1&&u<=this.size||d<=0&&u>=this.size)&&(this.visibleSlides.push(o),this.visibleSlidesIndexes.push(n),i.eq(n).addClass(t.slideVisibleClass))}o.progress=s?-l:l}this.visibleSlides=(0,a.default)(this.visibleSlides)};var s,a=(s=e("../../../utils/dom"))&&s.__esModule?s:{default:s}},{"../../../utils/dom":89}],71:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={setTranslate:function(){for(var e=this.width,t=this.height,i=this.slides,s=this.slidesSizesGrid,r=this.params.coverflowEffect,n=this.isHorizontal(),o=this.translate,l=n?e/2-o:t/2-o,d=n?r.rotate:-r.rotate,u=r.depth,c=0,h=i.length;c<h;c+=1){var p=i.eq(c),f=s[c],v=(l-p[0].swiperSlideOffset-f/2)/f*r.modifier,m=n?d*v:0,g=n?0:d*v,w=-u*Math.abs(v),y=r.stretch;"string"==typeof y&&-1!==y.indexOf("%")&&(y=parseFloat(r.stretch)/100*f);var b=n?0:y*v,x=n?y*v:0,E=1-(1-r.scale)*Math.abs(v);Math.abs(x)<.001&&(x=0),Math.abs(b)<.001&&(b=0),Math.abs(w)<.001&&(w=0),Math.abs(m)<.001&&(m=0),Math.abs(g)<.001&&(g=0),Math.abs(E)<.001&&(E=0);var T="translate3d("+x+"px,"+b+"px,"+w+"px)  rotateX("+g+"deg) rotateY("+m+"deg) scale("+E+")";if(p.transform(T),p[0].style.zIndex=1-Math.abs(Math.round(v)),r.slideShadows){var S=n?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),C=n?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom");0===S.length&&(S=(0,a.default)('<div class="swiper-slide-shadow-'+(n?"left":"top")+'"></div>'),p.append(S)),0===C.length&&(C=(0,a.default)('<div class="swiper-slide-shadow-'+(n?"right":"bottom")+'"></div>'),p.append(C)),S.length&&(S[0].style.opacity=v>0?v:0),C.length&&(C[0].style.opacity=-v>0?-v:0)}}},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},l={name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){(0,r.bindModuleMethods)(this,{coverflowEffect:n({},o)})},on:{beforeInit:function(e){"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){"coverflow"===e.params.effect&&e.coverflowEffect.setTransition(t)}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],72:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={setTranslate:function(){var e,t=this.$el,i=this.$wrapperEl,s=this.slides,r=this.width,n=this.height,o=this.rtlTranslate,l=this.size,d=this.browser,u=this.params.cubeEffect,c=this.isHorizontal(),h=this.virtual&&this.params.virtual.enabled,p=0;u.shadow&&(c?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=(0,a.default)('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:r+"px"})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=(0,a.default)('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var f=0;f<s.length;f+=1){var v=s.eq(f),m=f;h&&(m=parseInt(v.attr("data-swiper-slide-index"),10));var g=90*m,w=Math.floor(g/360);o&&(g=-g,w=Math.floor(-g/360));var y=Math.max(Math.min(v[0].progress,1),-1),b=0,x=0,E=0;m%4==0?(b=4*-w*l,E=0):(m-1)%4==0?(b=0,E=4*-w*l):(m-2)%4==0?(b=l+4*w*l,E=l):(m-3)%4==0&&(b=-l,E=3*l+4*l*w),o&&(b=-b),c||(x=b,b=0);var T="rotateX("+(c?0:-g)+"deg) rotateY("+(c?g:0)+"deg) translate3d("+b+"px, "+x+"px, "+E+"px)";if(y<=1&&y>-1&&(p=90*m+90*y,o&&(p=90*-m-90*y)),v.transform(T),u.slideShadows){var S=c?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),C=c?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===S.length&&(S=(0,a.default)('<div class="swiper-slide-shadow-'+(c?"left":"top")+'"></div>'),v.append(S)),0===C.length&&(C=(0,a.default)('<div class="swiper-slide-shadow-'+(c?"right":"bottom")+'"></div>'),v.append(C)),S.length&&(S[0].style.opacity=Math.max(-y,0)),C.length&&(C[0].style.opacity=Math.max(y,0))}}if(i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),u.shadow)if(c)e.transform("translate3d(0px, "+(r/2+u.shadowOffset)+"px, "+-r/2+"px) rotateX(90deg) rotateZ(0deg) scale("+u.shadowScale+")");else{var M=Math.abs(p)-90*Math.floor(Math.abs(p)/90),z=1.5-(Math.sin(2*M*Math.PI/360)/2+Math.cos(2*M*Math.PI/360)/2),P=u.shadowScale,k=u.shadowScale/z,_=u.shadowOffset;e.transform("scale3d("+P+", 1, "+k+") translate3d(0px, "+(n/2+_)+"px, "+-n/2/k+"px) rotateX(-90deg)")}var L=d.isSafari||d.isWebView?-l/2:0;i.transform("translate3d(0px,0,"+L+"px) rotateX("+(this.isHorizontal()?0:p)+"deg) rotateY("+(this.isHorizontal()?-p:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},l={name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){(0,r.bindModuleMethods)(this,{cubeEffect:n({},o)})},on:{beforeInit:function(e){if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};(0,r.extend)(e.params,t),(0,r.extend)(e.originalParams,t)}},setTranslate:function(e){"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){"cube"===e.params.effect&&e.cubeEffect.setTransition(t)}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],73:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("../../utils/utils");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var r={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=this.slides.eq(t),s=-i[0].swiperSlideOffset;this.params.virtualTranslate||(s-=this.translate);var a=0;this.isHorizontal()||(a=s,s=0);var r=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:r}).transform("translate3d("+s+"px, "+a+"px, 0px)")}},setTransition:function(e){var t=this,i=t.slides,s=t.$wrapperEl;if(i.transition(e),t.params.virtualTranslate&&0!==e){var a=!1;i.transitionEnd((function(){if(!a&&t&&!t.destroyed){a=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)s.trigger(e[i])}}))}}},n={name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){(0,s.bindModuleMethods)(this,{fadeEffect:a({},r)})},on:{beforeInit:function(e){if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};(0,s.extend)(e.params,t),(0,s.extend)(e.originalParams,t)}},setTranslate:function(e){"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){"fade"===e.params.effect&&e.fadeEffect.setTransition(t)}}};i.default=n},{"../../utils/utils":93}],74:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,i=0;i<e.length;i+=1){var s=e.eq(i),r=s[0].progress;this.params.flipEffect.limitRotation&&(r=Math.max(Math.min(s[0].progress,1),-1));var n=-180*r,o=0,l=-s[0].swiperSlideOffset,d=0;if(this.isHorizontal()?t&&(n=-n):(d=l,l=0,o=-n,n=0),s[0].style.zIndex=-Math.abs(Math.round(r))+e.length,this.params.flipEffect.slideShadows){var u=this.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),c=this.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom");0===u.length&&(u=(0,a.default)('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),s.append(u)),0===c.length&&(c=(0,a.default)('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),s.append(c)),u.length&&(u[0].style.opacity=Math.max(-r,0)),c.length&&(c[0].style.opacity=Math.max(r,0))}s.transform("translate3d("+l+"px, "+d+"px, 0px) rotateX("+o+"deg) rotateY("+n+"deg)")}},setTransition:function(e){var t=this,i=t.slides,s=t.activeIndex,a=t.$wrapperEl;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var r=!1;i.eq(s).transitionEnd((function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)a.trigger(e[i])}}))}}},l={name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){(0,r.bindModuleMethods)(this,{flipEffect:n({},o)})},on:{beforeInit:function(e){if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};(0,r.extend)(e.params,t),(0,r.extend)(e.originalParams,t)}},setTranslate:function(e){"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){"flip"===e.params.effect&&e.flipEffect.setTransition(t)}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],75:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=e("ssr-window"),r=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},n=e("../../utils/utils");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var l={onHashCange:function(){var e=(0,a.getDocument)();this.emit("hashChange");var t=e.location.hash.replace("#","");if(t!==this.slides.eq(this.activeIndex).attr("data-hash")){var i=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+t+'"]').index();if(void 0===i)return;this.slideTo(i)}},setHash:function(){var e=(0,a.getWindow)(),t=(0,a.getDocument)();if(this.hashNavigation.initialized&&this.params.hashNavigation.enabled)if(this.params.hashNavigation.replaceState&&e.history&&e.history.replaceState)e.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""),this.emit("hashSet");else{var i=this.slides.eq(this.activeIndex),s=i.attr("data-hash")||i.attr("data-history");t.location.hash=s||"",this.emit("hashSet")}},init:function(){var e=(0,a.getDocument)(),t=(0,a.getWindow)();if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var i=e.location.hash.replace("#","");if(i)for(var s=0,n=this.slides.length;s<n;s+=1){var o=this.slides.eq(s);if((o.attr("data-hash")||o.attr("data-history"))===i&&!o.hasClass(this.params.slideDuplicateClass)){var l=o.index();this.slideTo(l,0,this.params.runCallbacksOnInit,!0)}}this.params.hashNavigation.watchState&&(0,r.default)(t).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){var e=(0,a.getWindow)();this.params.hashNavigation.watchState&&(0,r.default)(e).off("hashchange",this.hashNavigation.onHashCange)}},d={name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){(0,n.bindModuleMethods)(this,{hashNavigation:o({initialized:!1},l)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}};i.default=d},{"../../utils/dom":89,"../../utils/utils":93,"ssr-window":5}],76:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("ssr-window"),a=e("../../utils/utils");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var n={init:function(){var e=(0,s.getWindow)();if(this.params.history){if(!e.history||!e.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var t=this.history;t.initialized=!0,t.paths=n.getPathValues(this.params.url),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||e.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){var e=(0,s.getWindow)();this.params.history.replaceState||e.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=n.getPathValues(this.params.url),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(e){var t=(0,s.getWindow)(),i=(e?new URL(e):t.location).pathname.slice(1).split("/").filter((function(e){return""!==e})),a=i.length;return{key:i[a-2],value:i[a-1]}},setHistory:function(e,t){var i=(0,s.getWindow)();if(this.history.initialized&&this.params.history.enabled){var a;a=this.params.url?new URL(this.params.url):i.location;var r=this.slides.eq(t),o=n.slugify(r.attr("data-history"));a.pathname.includes(e)||(o=e+"/"+o);var l=i.history.state;l&&l.value===o||(this.params.history.replaceState?i.history.replaceState({value:o},null,o):i.history.pushState({value:o},null,o))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var s=0,a=this.slides.length;s<a;s+=1){var r=this.slides.eq(s);if(n.slugify(r.attr("data-history"))===t&&!r.hasClass(this.params.slideDuplicateClass)){var o=r.index();this.slideTo(o,e,i)}}else this.slideTo(0,e,i)}},o={name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){(0,a.bindModuleMethods)(this,{history:r({},n)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}};i.default=o},{"../../utils/utils":93,"ssr-window":5}],77:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=e("ssr-window"),r=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},n=e("../../utils/utils");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var l={handle:function(e){var t=(0,a.getWindow)(),i=(0,a.getDocument)(),s=this.rtlTranslate,r=e;r.originalEvent&&(r=r.originalEvent);var n=r.keyCode||r.charCode,o=this.params.keyboard.pageUpDown,l=o&&33===n,d=o&&34===n,u=37===n,c=39===n,h=38===n,p=40===n;if(!this.allowSlideNext&&(this.isHorizontal()&&c||this.isVertical()&&p||d))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&u||this.isVertical()&&h||l))return!1;if(!(r.shiftKey||r.altKey||r.ctrlKey||r.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(l||d||u||c||h||p)){var f=!1;if(this.$el.parents("."+this.params.slideClass).length>0&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var v=t.innerWidth,m=t.innerHeight,g=this.$el.offset();s&&(g.left-=this.$el[0].scrollLeft);for(var w=[[g.left,g.top],[g.left+this.width,g.top],[g.left,g.top+this.height],[g.left+this.width,g.top+this.height]],y=0;y<w.length;y+=1){var b=w[y];if(b[0]>=0&&b[0]<=v&&b[1]>=0&&b[1]<=m){if(0===b[0]&&0===b[1])continue;f=!0}}if(!f)return}this.isHorizontal()?((l||d||u||c)&&(r.preventDefault?r.preventDefault():r.returnValue=!1),((d||c)&&!s||(l||u)&&s)&&this.slideNext(),((l||u)&&!s||(d||c)&&s)&&this.slidePrev()):((l||d||h||p)&&(r.preventDefault?r.preventDefault():r.returnValue=!1),(d||p)&&this.slideNext(),(l||h)&&this.slidePrev()),this.emit("keyPress",n)}},enable:function(){var e=(0,a.getDocument)();this.keyboard.enabled||((0,r.default)(e).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){var e=(0,a.getDocument)();this.keyboard.enabled&&((0,r.default)(e).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},d={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){(0,n.bindModuleMethods)(this,{keyboard:o({enabled:!1},l)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}};i.default=d},{"../../utils/dom":89,"../../utils/utils":93,"ssr-window":5}],78:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=e("ssr-window"),r=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},n=e("../../utils/utils");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var l={loadInSlide:function(e,t){void 0===t&&(t=!0);var i=this,s=i.params.lazy;if(void 0!==e&&0!==i.slides.length){var a=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children("."+i.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):i.slides.eq(e),n=a.find("."+s.elementClass+":not(."+s.loadedClass+"):not(."+s.loadingClass+")");!a.hasClass(s.elementClass)||a.hasClass(s.loadedClass)||a.hasClass(s.loadingClass)||n.push(a[0]),0!==n.length&&n.each((function(e){var n=(0,r.default)(e);n.addClass(s.loadingClass);var o=n.attr("data-background"),l=n.attr("data-src"),d=n.attr("data-srcset"),u=n.attr("data-sizes"),c=n.parent("picture");i.loadImage(n[0],l||o,d,u,!1,(function(){if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(o?(n.css("background-image",'url("'+o+'")'),n.removeAttr("data-background")):(d&&(n.attr("srcset",d),n.removeAttr("data-srcset")),u&&(n.attr("sizes",u),n.removeAttr("data-sizes")),c.length&&c.children("source").each((function(e){var t=(0,r.default)(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))})),l&&(n.attr("src",l),n.removeAttr("data-src"))),n.addClass(s.loadedClass).removeClass(s.loadingClass),a.find("."+s.preloaderClass).remove(),i.params.loop&&t){var e=a.attr("data-swiper-slide-index");if(a.hasClass(i.params.slideDuplicateClass)){var h=i.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+i.params.slideDuplicateClass+")");i.lazy.loadInSlide(h.index(),!1)}else{var p=i.$wrapperEl.children("."+i.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');i.lazy.loadInSlide(p.index(),!1)}}i.emit("lazyImageReady",a[0],n[0]),i.params.autoHeight&&i.updateAutoHeight()}})),i.emit("lazyImageLoad",a[0],n[0])}))}},load:function(){var e=this,t=e.$wrapperEl,i=e.params,s=e.slides,a=e.activeIndex,n=e.virtual&&i.virtual.enabled,o=i.lazy,l=i.slidesPerView;function d(e){if(n){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(s[e])return!0;return!1}function u(e){return n?(0,r.default)(e).attr("data-swiper-slide-index"):(0,r.default)(e).index()}if("auto"===l&&(l=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each((function(t){var i=n?(0,r.default)(t).attr("data-swiper-slide-index"):(0,r.default)(t).index();e.lazy.loadInSlide(i)}));else if(l>1)for(var c=a;c<a+l;c+=1)d(c)&&e.lazy.loadInSlide(c);else e.lazy.loadInSlide(a);if(o.loadPrevNext)if(l>1||o.loadPrevNextAmount&&o.loadPrevNextAmount>1){for(var h=o.loadPrevNextAmount,p=l,f=Math.min(a+p+Math.max(h,p),s.length),v=Math.max(a-Math.max(p,h),0),m=a+l;m<f;m+=1)d(m)&&e.lazy.loadInSlide(m);for(var g=v;g<a;g+=1)d(g)&&e.lazy.loadInSlide(g)}else{var w=t.children("."+i.slideNextClass);w.length>0&&e.lazy.loadInSlide(u(w));var y=t.children("."+i.slidePrevClass);y.length>0&&e.lazy.loadInSlide(u(y))}},checkInViewOnLoad:function(){var e=(0,a.getWindow)();if(this&&!this.destroyed){var t=this.params.lazy.scrollingElement?(0,r.default)(this.params.lazy.scrollingElement):(0,r.default)(e),i=t[0]===e,s=i?e.innerWidth:t[0].offsetWidth,n=i?e.innerHeight:t[0].offsetHeight,o=this.$el.offset(),l=!1;this.rtlTranslate&&(o.left-=this.$el[0].scrollLeft);for(var d=[[o.left,o.top],[o.left+this.width,o.top],[o.left,o.top+this.height],[o.left+this.width,o.top+this.height]],u=0;u<d.length;u+=1){var c=d[u];if(c[0]>=0&&c[0]<=s&&c[1]>=0&&c[1]<=n){if(0===c[0]&&0===c[1])continue;l=!0}}l?(this.lazy.load(),t.off("scroll",this.lazy.checkInViewOnLoad)):this.lazy.scrollHandlerAttached||(this.lazy.scrollHandlerAttached=!0,t.on("scroll",this.lazy.checkInViewOnLoad))}}},d={name:"lazy",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){(0,n.bindModuleMethods)(this,{lazy:o({initialImageLoaded:!1},l)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(e){e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}};i.default=d},{"../../utils/dom":89,"../../utils/utils":93,"ssr-window":5}],79:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=e("ssr-window"),r=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},n=e("../../utils/utils");var o={lastScrollTime:(0,n.now)(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return(0,a.getWindow)().navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e=(0,a.getDocument)(),t="onwheel"in e;if(!t){var i=e.createElement("div");i.setAttribute("onwheel","return;"),t="function"==typeof i.onwheel}return!t&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature("","")&&(t=e.implementation.hasFeature("Events.wheel","3.0")),t}()?"wheel":"mousewheel"},normalize:function(e){var t=0,i=0,s=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=a,a=0),(s||a)&&e.deltaMode&&(1===e.deltaMode?(s*=40,a*=40):(s*=800,a*=800)),s&&!t&&(t=s<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:a}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,s=i.params.mousewheel;i.params.cssMode&&t.preventDefault();var a=i.$el;if("container"!==i.params.mousewheel.eventsTarget&&(a=(0,r.default)(i.params.mousewheel.eventsTarget)),!i.mouseEntered&&!a[0].contains(t.target)&&!s.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var l=0,d=i.rtlTranslate?-1:1,u=o.normalize(t);if(s.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(u.pixelX)>Math.abs(u.pixelY)))return!0;l=-u.pixelX*d}else{if(!(Math.abs(u.pixelY)>Math.abs(u.pixelX)))return!0;l=-u.pixelY}else l=Math.abs(u.pixelX)>Math.abs(u.pixelY)?-u.pixelX*d:-u.pixelY;if(0===l)return!0;s.invert&&(l=-l);var c=i.getTranslate()+l*s.sensitivity;if(c>=i.minTranslate()&&(c=i.minTranslate()),c<=i.maxTranslate()&&(c=i.maxTranslate()),(!!i.params.loop||!(c===i.minTranslate()||c===i.maxTranslate()))&&i.params.nested&&t.stopPropagation(),i.params.freeMode){var h={time:(0,n.now)(),delta:Math.abs(l),direction:Math.sign(l)},p=i.mousewheel.lastEventBeforeSnap,f=p&&h.time<p.time+500&&h.delta<=p.delta&&h.direction===p.direction;if(!f){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var v=i.getTranslate()+l*s.sensitivity,m=i.isBeginning,g=i.isEnd;if(v>=i.minTranslate()&&(v=i.minTranslate()),v<=i.maxTranslate()&&(v=i.maxTranslate()),i.setTransition(0),i.setTranslate(v),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!m&&i.isBeginning||!g&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;var w=i.mousewheel.recentWheelEvents;w.length>=15&&w.shift();var y=w.length?w[w.length-1]:void 0,b=w[0];if(w.push(h),y&&(h.delta>y.delta||h.direction!==y.direction))w.splice(0);else if(w.length>=15&&h.time-b.time<500&&b.delta-h.delta>=1&&h.delta<=6){var x=l>0?.8:.2;i.mousewheel.lastEventBeforeSnap=h,w.splice(0),i.mousewheel.timeout=(0,n.nextTick)((function(){i.slideToClosest(i.params.speed,!0,void 0,x)}),0)}i.mousewheel.timeout||(i.mousewheel.timeout=(0,n.nextTick)((function(){i.mousewheel.lastEventBeforeSnap=h,w.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)}),500))}if(f||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),v===i.minTranslate()||v===i.maxTranslate())return!0}}else{var E={time:(0,n.now)(),delta:Math.abs(l),direction:Math.sign(l),raw:e},T=i.mousewheel.recentWheelEvents;T.length>=2&&T.shift();var S=T.length?T[T.length-1]:void 0;if(T.push(E),S?(E.direction!==S.direction||E.delta>S.delta||E.time>S.time+150)&&i.mousewheel.animateSlider(E):i.mousewheel.animateSlider(E),i.mousewheel.releaseScroll(E))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=(0,a.getWindow)();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta)&&(!(this.params.mousewheel.thresholdTime&&(0,n.now)()-this.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime)&&(e.delta>=6&&(0,n.now)()-this.mousewheel.lastScrollTime<60||(e.direction<0?this.isEnd&&!this.params.loop||this.animating||(this.slideNext(),this.emit("scroll",e.raw)):this.isBeginning&&!this.params.loop||this.animating||(this.slidePrev(),this.emit("scroll",e.raw)),this.mousewheel.lastScrollTime=(new t.Date).getTime(),!1)))},releaseScroll:function(e){var t=this.params.mousewheel;if(e.direction<0){if(this.isEnd&&!this.params.loop&&t.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&t.releaseOnEdges)return!0;return!1},enable:function(){var e=o.event();if(this.params.cssMode)return this.wrapperEl.removeEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarget&&(t=(0,r.default)(this.params.mousewheel.eventsTarget)),t.on("mouseenter",this.mousewheel.handleMouseEnter),t.on("mouseleave",this.mousewheel.handleMouseLeave),t.on(e,this.mousewheel.handle),this.mousewheel.enabled=!0,!0},disable:function(){var e=o.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarget&&(t=(0,r.default)(this.params.mousewheel.eventsTarget)),t.off(e,this.mousewheel.handle),this.mousewheel.enabled=!1,!0}},l={name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}},create:function(){(0,n.bindModuleMethods)(this,{mousewheel:{enabled:!1,lastScrollTime:(0,n.now)(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:o.enable,disable:o.disable,handle:o.handle,handleMouseEnter:o.handleMouseEnter,handleMouseLeave:o.handleMouseLeave,animateSlider:o.animateSlider,releaseScroll:o.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93,"ssr-window":5}],80:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={update:function(){var e=this.params.navigation;if(!this.params.loop){var t=this.navigation,i=t.$nextEl,s=t.$prevEl;s&&s.length>0&&(this.isBeginning?s.addClass(e.disabledClass):s.removeClass(e.disabledClass),s[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass)),i&&i.length>0&&(this.isEnd?i.addClass(e.disabledClass):i.removeClass(e.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass))}},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=(0,a.default)(i.nextEl),this.params.uniqueNavElements&&"string"==typeof i.nextEl&&e.length>1&&1===this.$el.find(i.nextEl).length&&(e=this.$el.find(i.nextEl))),i.prevEl&&(t=(0,a.default)(i.prevEl),this.params.uniqueNavElements&&"string"==typeof i.prevEl&&t.length>1&&1===this.$el.find(i.prevEl).length&&(t=this.$el.find(i.prevEl))),e&&e.length>0&&e.on("click",this.navigation.onNextClick),t&&t.length>0&&t.on("click",this.navigation.onPrevClick),(0,r.extend)(this.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click",this.navigation.onNextClick),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click",this.navigation.onPrevClick),i.removeClass(this.params.navigation.disabledClass))}},l={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){(0,r.bindModuleMethods)(this,{navigation:n({},o)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var i,s=e.navigation,r=s.$nextEl,n=s.$prevEl;!e.params.navigation.hideOnClick||(0,a.default)(t.target).is(n)||(0,a.default)(t.target).is(r)||(r?i=r.hasClass(e.params.navigation.hiddenClass):n&&(i=n.hasClass(e.params.navigation.hiddenClass)),!0===i?e.emit("navigationShow"):e.emit("navigationHide"),r&&r.toggleClass(e.params.navigation.hiddenClass),n&&n.toggleClass(e.params.navigation.hiddenClass))}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],81:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={update:function(){var e=this.rtl,t=this.params.pagination;if(t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var i,s=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,r=this.pagination.$el,n=this.params.loop?Math.ceil((s-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((i=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>s-1-2*this.loopedSlides&&(i-=s-2*this.loopedSlides),i>n-1&&(i-=n),i<0&&"bullets"!==this.params.paginationType&&(i=n+i)):i=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===t.type&&this.pagination.bullets&&this.pagination.bullets.length>0){var o,l,d,u=this.pagination.bullets;if(t.dynamicBullets&&(this.pagination.bulletSize=u.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),r.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(t.dynamicMainBullets+4)+"px"),t.dynamicMainBullets>1&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=i-this.previousIndex,this.pagination.dynamicBulletIndex>t.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=t.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),o=i-this.pagination.dynamicBulletIndex,d=((l=o+(Math.min(u.length,t.dynamicMainBullets)-1))+o)/2),u.removeClass(t.bulletActiveClass+" "+t.bulletActiveClass+"-next "+t.bulletActiveClass+"-next-next "+t.bulletActiveClass+"-prev "+t.bulletActiveClass+"-prev-prev "+t.bulletActiveClass+"-main"),r.length>1)u.each((function(e){var s=(0,a.default)(e),r=s.index();r===i&&s.addClass(t.bulletActiveClass),t.dynamicBullets&&(r>=o&&r<=l&&s.addClass(t.bulletActiveClass+"-main"),r===o&&s.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),r===l&&s.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next"))}));else{var c=u.eq(i),h=c.index();if(c.addClass(t.bulletActiveClass),t.dynamicBullets){for(var p=u.eq(o),f=u.eq(l),v=o;v<=l;v+=1)u.eq(v).addClass(t.bulletActiveClass+"-main");if(this.params.loop)if(h>=u.length-t.dynamicMainBullets){for(var m=t.dynamicMainBullets;m>=0;m-=1)u.eq(u.length-m).addClass(t.bulletActiveClass+"-main");u.eq(u.length-t.dynamicMainBullets-1).addClass(t.bulletActiveClass+"-prev")}else p.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),f.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next");else p.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),f.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next")}}if(t.dynamicBullets){var g=Math.min(u.length,t.dynamicMainBullets+4),w=(this.pagination.bulletSize*g-this.pagination.bulletSize)/2-d*this.pagination.bulletSize,y=e?"right":"left";u.css(this.isHorizontal()?y:"top",w+"px")}}if("fraction"===t.type&&(r.find("."+t.currentClass).text(t.formatFractionCurrent(i+1)),r.find("."+t.totalClass).text(t.formatFractionTotal(n))),"progressbar"===t.type){var b;b=t.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical";var x=(i+1)/n,E=1,T=1;"horizontal"===b?E=x:T=x,r.find("."+t.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+E+") scaleY("+T+")").transition(this.params.speed)}"custom"===t.type&&t.renderCustom?(r.html(t.renderCustom(this,i+1,n)),this.emit("paginationRender",r[0])):this.emit("paginationUpdate",r[0]),r[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,s="";if("bullets"===e.type){for(var a=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,r=0;r<a;r+=1)e.renderBullet?s+=e.renderBullet.call(this,r,e.bulletClass):s+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(s),this.pagination.bullets=i.find("."+e.bulletClass.replace(/ /g,"."))}"fraction"===e.type&&(s=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(s)),"progressbar"===e.type&&(s=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(s)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var i=(0,a.default)(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass.replace(/ /g,"."),(function(t){t.preventDefault();var i=(0,a.default)(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),(0,r.extend)(e.pagination,{$el:i,el:i[0]}))}},destroy:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass.replace(/ /g,"."))}}},l={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){(0,r.bindModuleMethods)(this,{pagination:n({dynamicBulletIndex:0},o)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!(0,a.default)(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],82:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={setTransform:function(e,t){var i=this.rtl,s=(0,a.default)(e),r=i?-1:1,n=s.attr("data-swiper-parallax")||"0",o=s.attr("data-swiper-parallax-x"),l=s.attr("data-swiper-parallax-y"),d=s.attr("data-swiper-parallax-scale"),u=s.attr("data-swiper-parallax-opacity");if(o||l?(o=o||"0",l=l||"0"):this.isHorizontal()?(o=n,l="0"):(l=n,o="0"),o=o.indexOf("%")>=0?parseInt(o,10)*t*r+"%":o*t*r+"px",l=l.indexOf("%")>=0?parseInt(l,10)*t+"%":l*t+"px",null!=u){var c=u-(u-1)*(1-Math.abs(t));s[0].style.opacity=c}if(null==d)s.transform("translate3d("+o+", "+l+", 0px)");else{var h=d-(d-1)*(1-Math.abs(t));s.transform("translate3d("+o+", "+l+", 0px) scale("+h+")")}},setTranslate:function(){var e=this,t=e.$el,i=e.slides,s=e.progress,r=e.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,s)})),i.each((function(t,i){var n=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(i/2)-s*(r.length-1)),n=Math.min(Math.max(n,-1),1),(0,a.default)(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,n)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){var i=(0,a.default)(t),s=parseInt(i.attr("data-swiper-parallax-duration"),10)||e;0===e&&(s=0),i.transition(s)}))}},l={name:"parallax",params:{parallax:{enabled:!1}},create:function(){(0,r.bindModuleMethods)(this,{parallax:n({},o)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],83:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=e("ssr-window"),r=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},n=e("../../utils/utils");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var l={setTranslate:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=this.rtlTranslate,i=this.progress,s=e.dragSize,a=e.trackSize,r=e.$dragEl,n=e.$el,o=this.params.scrollbar,l=s,d=(a-s)*i;t?(d=-d)>0?(l=s-d,d=0):-d+s>a&&(l=a+d):d<0?(l=s+d,d=0):d+s>a&&(l=a-d),this.isHorizontal()?(r.transform("translate3d("+d+"px, 0, 0)"),r[0].style.width=l+"px"):(r.transform("translate3d(0px, "+d+"px, 0)"),r[0].style.height=l+"px"),o.hide&&(clearTimeout(this.scrollbar.timeout),n[0].style.opacity=1,this.scrollbar.timeout=setTimeout((function(){n[0].style.opacity=0,n.transition(400)}),1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=e.$dragEl,i=e.$el;t[0].style.width="",t[0].style.height="";var s,a=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,r=this.size/this.virtualSize,o=r*(a/this.size);s="auto"===this.params.scrollbar.dragSize?a*r:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?t[0].style.width=s+"px":t[0].style.height=s+"px",i[0].style.display=r>=1?"none":"",this.params.scrollbar.hide&&(i[0].style.opacity=0),(0,n.extend)(e,{trackSize:a,divider:r,moveDivider:o,dragSize:s}),e.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,i=this.scrollbar,s=this.rtlTranslate,a=i.$el,r=i.dragSize,n=i.trackSize,o=i.dragStartPos;t=(i.getPointerPosition(e)-a.offset()[this.isHorizontal()?"left":"top"]-(null!==o?o:r/2))/(n-r),t=Math.max(Math.min(t,1),0),s&&(t=1-t);var l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*t;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(e){var t=this.params.scrollbar,i=this.scrollbar,s=this.$wrapperEl,a=i.$el,r=i.$dragEl;this.scrollbar.isTouched=!0,this.scrollbar.dragStartPos=e.target===r[0]||e.target===r?i.getPointerPosition(e)-e.target.getBoundingClientRect()[this.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),i.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),a.transition(0),t.hide&&a.css("opacity",1),this.params.cssMode&&this.$wrapperEl.css("scroll-snap-type","none"),this.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,s=t.$el,a=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),s.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this.params.scrollbar,i=this.scrollbar,s=this.$wrapperEl,a=i.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,this.params.cssMode&&(this.$wrapperEl.css("scroll-snap-type",""),s.transition("")),t.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=(0,n.nextTick)((function(){a.css("opacity",0),a.transition(400)}),1e3)),this.emit("scrollbarDragEnd",e),t.snapOnRelease&&this.slideToClosest())},enableDraggable:function(){if(this.params.scrollbar.el){var e=(0,a.getDocument)(),t=this.scrollbar,i=this.touchEventsTouch,s=this.touchEventsDesktop,r=this.params,n=this.support,o=t.$el[0],l=!(!n.passiveListener||!r.passiveListeners)&&{passive:!1,capture:!1},d=!(!n.passiveListener||!r.passiveListeners)&&{passive:!0,capture:!1};n.touch?(o.addEventListener(i.start,this.scrollbar.onDragStart,l),o.addEventListener(i.move,this.scrollbar.onDragMove,l),o.addEventListener(i.end,this.scrollbar.onDragEnd,d)):(o.addEventListener(s.start,this.scrollbar.onDragStart,l),e.addEventListener(s.move,this.scrollbar.onDragMove,l),e.addEventListener(s.end,this.scrollbar.onDragEnd,d))}},disableDraggable:function(){if(this.params.scrollbar.el){var e=(0,a.getDocument)(),t=this.scrollbar,i=this.touchEventsTouch,s=this.touchEventsDesktop,r=this.params,n=this.support,o=t.$el[0],l=!(!n.passiveListener||!r.passiveListeners)&&{passive:!1,capture:!1},d=!(!n.passiveListener||!r.passiveListeners)&&{passive:!0,capture:!1};n.touch?(o.removeEventListener(i.start,this.scrollbar.onDragStart,l),o.removeEventListener(i.move,this.scrollbar.onDragMove,l),o.removeEventListener(i.end,this.scrollbar.onDragEnd,d)):(o.removeEventListener(s.start,this.scrollbar.onDragStart,l),e.removeEventListener(s.move,this.scrollbar.onDragMove,l),e.removeEventListener(s.end,this.scrollbar.onDragEnd,d))}},init:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.$el,i=this.params.scrollbar,s=(0,r.default)(i.el);this.params.uniqueNavElements&&"string"==typeof i.el&&s.length>1&&1===t.find(i.el).length&&(s=t.find(i.el));var a=s.find("."+this.params.scrollbar.dragClass);0===a.length&&(a=(0,r.default)('<div class="'+this.params.scrollbar.dragClass+'"></div>'),s.append(a)),(0,n.extend)(e,{$el:s,el:s[0],$dragEl:a,dragEl:a[0]}),i.draggable&&e.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},d={name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){(0,n.bindModuleMethods)(this,{scrollbar:o({isTouched:!1,timeout:null,dragTimeout:null},l)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}};i.default=d},{"../../utils/dom":89,"../../utils/utils":93,"ssr-window":5}],84:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=e("../../utils/utils"),r=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s};function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={init:function(){var e=this.params.thumbs;if(this.thumbs.initialized)return!1;this.thumbs.initialized=!0;var t=this.constructor;return e.swiper instanceof t?(this.thumbs.swiper=e.swiper,(0,a.extend)(this.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),(0,a.extend)(this.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):(0,a.isObject)(e.swiper)&&(this.thumbs.swiper=new t((0,a.extend)({},e.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),this.thumbs.swiperCreated=!0),this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass),this.thumbs.swiper.on("tap",this.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this.thumbs.swiper;if(e){var t=e.clickedIndex,i=e.clickedSlide;if(!(i&&(0,r.default)(i).hasClass(this.params.thumbs.slideThumbActiveClass)||null==t)){var s;if(s=e.params.loop?parseInt((0,r.default)(e.clickedSlide).attr("data-swiper-slide-index"),10):t,this.params.loop){var a=this.activeIndex;this.slides.eq(a).hasClass(this.params.slideDuplicateClass)&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,a=this.activeIndex);var n=this.slides.eq(a).prevAll('[data-swiper-slide-index="'+s+'"]').eq(0).index(),o=this.slides.eq(a).nextAll('[data-swiper-slide-index="'+s+'"]').eq(0).index();s=void 0===n?o:void 0===o?n:o-a<a-n?o:n}this.slideTo(s)}}},update:function(e){var t=this.thumbs.swiper;if(t){var i="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():t.params.slidesPerView,s=this.params.thumbs.autoScrollOffset,a=s&&!t.params.loop;if(this.realIndex!==t.realIndex||a){var r,n,o=t.activeIndex;if(t.params.loop){t.slides.eq(o).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,o=t.activeIndex);var l=t.slides.eq(o).prevAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),d=t.slides.eq(o).nextAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index();r=void 0===l?d:void 0===d?l:d-o==o-l?o:d-o<o-l?d:l,n=this.activeIndex>this.previousIndex?"next":"prev"}else n=(r=this.realIndex)>this.previousIndex?"next":"prev";a&&(r+="next"===n?s:-1*s),t.visibleSlidesIndexes&&t.visibleSlidesIndexes.indexOf(r)<0&&(t.params.centeredSlides?r=r>o?r-Math.floor(i/2)+1:r+Math.floor(i/2)-1:r>o&&(r=r-i+1),t.slideTo(r,e?0:void 0))}var u=1,c=this.params.thumbs.slideThumbActiveClass;if(this.params.slidesPerView>1&&!this.params.centeredSlides&&(u=this.params.slidesPerView),this.params.thumbs.multipleActiveThumbs||(u=1),u=Math.floor(u),t.slides.removeClass(c),t.params.loop||t.params.virtual&&t.params.virtual.enabled)for(var h=0;h<u;h+=1)t.$wrapperEl.children('[data-swiper-slide-index="'+(this.realIndex+h)+'"]').addClass(c);else for(var p=0;p<u;p+=1)t.slides.eq(this.realIndex+p).addClass(c)}}},l={name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){(0,a.bindModuleMethods)(this,{thumbs:n({swiper:null,initialized:!1},o)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var i=e.thumbs.swiper;i&&i.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],85:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={update:function(e){var t=this,i=t.params,s=i.slidesPerView,a=i.slidesPerGroup,n=i.centeredSlides,o=t.params.virtual,l=o.addSlidesBefore,d=o.addSlidesAfter,u=t.virtual,c=u.from,h=u.to,p=u.slides,f=u.slidesGrid,v=u.renderSlide,m=u.offset;t.updateActiveIndex();var g,w,y,b=t.activeIndex||0;g=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",n?(w=Math.floor(s/2)+a+d,y=Math.floor(s/2)+a+l):(w=s+(a-1)+d,y=a+l);var x=Math.max((b||0)-y,0),E=Math.min((b||0)+w,p.length-1),T=(t.slidesGrid[x]||0)-(t.slidesGrid[0]||0);function S(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if((0,r.extend)(t.virtual,{from:x,to:E,offset:T,slidesGrid:t.slidesGrid}),c===x&&h===E&&!e)return t.slidesGrid!==f&&T!==m&&t.slides.css(g,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:x,to:E,slides:function(){for(var e=[],t=x;t<=E;t+=1)e.push(p[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&S());var C=[],M=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var z=c;z<=h;z+=1)(z<x||z>E)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+z+'"]').remove();for(var P=0;P<p.length;P+=1)P>=x&&P<=E&&(void 0===h||e?M.push(P):(P>h&&M.push(P),P<c&&C.push(P)));M.forEach((function(e){t.$wrapperEl.append(v(p[e],e))})),C.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(v(p[e],e))})),t.$wrapperEl.children(".swiper-slide").css(g,T+"px"),S()},renderSlide:function(e,t){var i=this.params.virtual;if(i.cache&&this.virtual.cache[t])return this.virtual.cache[t];var s=i.renderSlide?(0,a.default)(i.renderSlide.call(this,e,t)):(0,a.default)('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),i.cache&&(this.virtual.cache[t]=s),s},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t=this.activeIndex,i=t+1,s=1;if(Array.isArray(e)){for(var a=0;a<e.length;a+=1)e[a]&&this.virtual.slides.unshift(e[a]);i=t+e.length,s=e.length}else this.virtual.slides.unshift(e);if(this.params.virtual.cache){var r=this.virtual.cache,n={};Object.keys(r).forEach((function(e){var t=r[e],i=t.attr("data-swiper-slide-index");i&&t.attr("data-swiper-slide-index",parseInt(i,10)+1),n[parseInt(e,10)+s]=t})),this.virtual.cache=n}this.virtual.update(!0),this.slideTo(i,0)},removeSlide:function(e){if(null!=e){var t=this.activeIndex;if(Array.isArray(e))for(var i=e.length-1;i>=0;i-=1)this.virtual.slides.splice(e[i],1),this.params.virtual.cache&&delete this.virtual.cache[e[i]],e[i]<t&&(t-=1),t=Math.max(t,0);else this.virtual.slides.splice(e,1),this.params.virtual.cache&&delete this.virtual.cache[e],e<t&&(t-=1),t=Math.max(t,0);this.virtual.update(!0),this.slideTo(t,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},l={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){(0,r.bindModuleMethods)(this,{virtual:n({},o,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};(0,r.extend)(e.params,t),(0,r.extend)(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],86:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s,a=(s=e("../../utils/dom"))&&s.__esModule?s:{default:s},r=e("../../utils/utils");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var o={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(s-t,2)+Math.pow(a-i,2))},onGestureStart:function(e){var t=this.support,i=this.params.zoom,s=this.zoom,r=s.gesture;if(s.fakeGestureTouched=!1,s.fakeGestureMoved=!1,!t.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;s.fakeGestureTouched=!0,r.scaleStart=o.getDistanceBetweenTouches(e)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=(0,a.default)(e.target).closest("."+this.params.slideClass),0===r.$slideEl.length&&(r.$slideEl=this.slides.eq(this.activeIndex)),r.$imageEl=r.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),r.$imageWrapEl=r.$imageEl.parent("."+i.containerClass),r.maxRatio=r.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl&&r.$imageEl.transition(0),this.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange:function(e){var t=this.support,i=this.params.zoom,s=this.zoom,a=s.gesture;if(!t.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;s.fakeGestureMoved=!0,a.scaleMove=o.getDistanceBetweenTouches(e)}a.$imageEl&&0!==a.$imageEl.length?(t.gestures?s.scale=e.scale*s.currentScale:s.scale=a.scaleMove/a.scaleStart*s.currentScale,s.scale>a.maxRatio&&(s.scale=a.maxRatio-1+Math.pow(s.scale-a.maxRatio+1,.5)),s.scale<i.minRatio&&(s.scale=i.minRatio+1-Math.pow(i.minRatio-s.scale+1,.5)),a.$imageEl.transform("translate3d(0,0,0) scale("+s.scale+")")):"gesturechange"===e.type&&s.onGestureStart(e)},onGestureEnd:function(e){var t=this.device,i=this.support,s=this.params.zoom,a=this.zoom,r=a.gesture;if(!i.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!t.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}r.$imageEl&&0!==r.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,r.maxRatio),s.minRatio),r.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(r.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,i=this.zoom,s=i.gesture,a=i.image;s.$imageEl&&0!==s.$imageEl.length&&(a.isTouched||(t.android&&e.cancelable&&e.preventDefault(),a.isTouched=!0,a.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,a.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,i=t.gesture,s=t.image,a=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=(0,r.getTranslate)(i.$imageWrapEl[0],"x")||0,s.startY=(0,r.getTranslate)(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var n=s.width*t.scale,o=s.height*t.scale;if(!(n<i.slideWidth&&o<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-n/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),a.prevPositionX||(a.prevPositionX=s.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=s.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(s.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(s.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(s.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(s.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=s.touchesCurrent.x,a.prevPositionY=s.touchesCurrent.y,a.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,s=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var a=300,r=300,n=s.x*a,o=i.currentX+n,l=s.y*r,d=i.currentY+l;0!==s.x&&(a=Math.abs((o-i.currentX)/s.x)),0!==s.y&&(r=Math.abs((d-i.currentY)/s.y));var u=Math.max(a,r);i.currentX=o,i.currentY=d;var c=i.width*e.scale,h=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-c/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-h/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(u).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,s,a,r,n,o,l,d,u,c,h,p,f,v,m,g=this.zoom,w=this.params.zoom,y=g.gesture,b=g.image;(y.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?y.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):y.$slideEl=this.slides.eq(this.activeIndex),y.$imageEl=y.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),y.$imageWrapEl=y.$imageEl.parent("."+w.containerClass)),y.$imageEl&&0!==y.$imageEl.length)&&(y.$slideEl.addClass(""+w.zoomedSlideClass),void 0===b.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,i="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=b.touchesStart.x,i=b.touchesStart.y),g.scale=y.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,g.currentScale=y.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,e?(v=y.$slideEl[0].offsetWidth,m=y.$slideEl[0].offsetHeight,s=y.$slideEl.offset().left+v/2-t,a=y.$slideEl.offset().top+m/2-i,o=y.$imageEl[0].offsetWidth,l=y.$imageEl[0].offsetHeight,d=o*g.scale,u=l*g.scale,p=-(c=Math.min(v/2-d/2,0)),f=-(h=Math.min(m/2-u/2,0)),(r=s*g.scale)<c&&(r=c),r>p&&(r=p),(n=a*g.scale)<h&&(n=h),n>f&&(n=f)):(r=0,n=0),y.$imageWrapEl.transition(300).transform("translate3d("+r+"px, "+n+"px,0)"),y.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+g.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,i=e.gesture;i.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?i.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):i.$slideEl=this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+t.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(e.scale=1,e.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+t.zoomedSlideClass),i.$slideEl=void 0)},toggleGestures:function(e){var t=this.zoom,i=t.slideSelector,s=t.passiveListener;this.$wrapperEl[e]("gesturestart",i,t.onGestureStart,s),this.$wrapperEl[e]("gesturechange",i,t.onGestureChange,s),this.$wrapperEl[e]("gestureend",i,t.onGestureEnd,s)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures("on"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures("off"))},enable:function(){var e=this.support,t=this.zoom;if(!t.enabled){t.enabled=!0;var i=!("touchstart"!==this.touchEvents.start||!e.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},s=!e.passiveListener||{passive:!1,capture:!0},a="."+this.params.slideClass;this.zoom.passiveListener=i,this.zoom.slideSelector=a,e.gestures?(this.$wrapperEl.on(this.touchEvents.start,this.zoom.enableGestures,i),this.$wrapperEl.on(this.touchEvents.end,this.zoom.disableGestures,i)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,a,t.onGestureStart,i),this.$wrapperEl.on(this.touchEvents.move,a,t.onGestureChange,s),this.$wrapperEl.on(this.touchEvents.end,a,t.onGestureEnd,i),this.touchEvents.cancel&&this.$wrapperEl.on(this.touchEvents.cancel,a,t.onGestureEnd,i)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,t.onTouchMove,s)}},disable:function(){var e=this.zoom;if(e.enabled){var t=this.support;this.zoom.enabled=!1;var i=!("touchstart"!==this.touchEvents.start||!t.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},s=!t.passiveListener||{passive:!1,capture:!0},a="."+this.params.slideClass;t.gestures?(this.$wrapperEl.off(this.touchEvents.start,this.zoom.enableGestures,i),this.$wrapperEl.off(this.touchEvents.end,this.zoom.disableGestures,i)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,a,e.onGestureStart,i),this.$wrapperEl.off(this.touchEvents.move,a,e.onGestureChange,s),this.$wrapperEl.off(this.touchEvents.end,a,e.onGestureEnd,i),this.touchEvents.cancel&&this.$wrapperEl.off(this.touchEvents.cancel,a,e.onGestureEnd,i)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove,s)}}},l={name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this;(0,r.bindModuleMethods)(e,{zoom:n({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},o)});var t=1;Object.defineProperty(e.zoom,"scale",{get:function(){return t},set:function(i){if(t!==i){var s=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,a=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",i,s,a)}t=i}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}};i.default=l},{"../../utils/dom":89,"../../utils/utils":93}],87:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("ssr-window"),a=e("../../utils/utils");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s])}return e}).apply(this,arguments)}var n={attach:function(e,t){void 0===t&&(t={});var i=(0,s.getWindow)(),a=this,r=new(i.MutationObserver||i.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){a.emit("observerUpdate",e[0])};i.requestAnimationFrame?i.requestAnimationFrame(t):i.setTimeout(t,0)}else a.emit("observerUpdate",e[0])}));r.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),a.observer.observers.push(r)},init:function(){if(this.support.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},o={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){(0,a.bindModuleMethods)(this,{observer:r({},n,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};i.default=o},{"../../utils/utils":93,"ssr-window":5}],88:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("ssr-window"),a=e("../../utils/utils"),r={name:"resize",create:function(){var e=this;(0,a.extend)(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=(0,s.getWindow)();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=(0,s.getWindow)();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}};i.default=r},{"../../utils/utils":93,"ssr-window":5}],89:[function(e,t,i){"use strict";i.__esModule=!0,i.default=void 0;var s=e("dom7"),a={addClass:s.addClass,removeClass:s.removeClass,hasClass:s.hasClass,toggleClass:s.toggleClass,attr:s.attr,removeAttr:s.removeAttr,transform:s.transform,transition:s.transition,on:s.on,off:s.off,trigger:s.trigger,transitionEnd:s.transitionEnd,outerWidth:s.outerWidth,outerHeight:s.outerHeight,styles:s.styles,offset:s.offset,css:s.css,each:s.each,html:s.html,text:s.text,is:s.is,index:s.index,eq:s.eq,append:s.append,prepend:s.prepend,next:s.next,nextAll:s.nextAll,prev:s.prev,prevAll:s.prevAll,parent:s.parent,parents:s.parents,closest:s.closest,find:s.find,children:s.children,filter:s.filter,remove:s.remove};Object.keys(a).forEach((function(e){s.$.fn[e]=a[e]}));var r=s.$;i.default=r},{dom7:1}],90:[function(e,t,i){"use strict";i.__esModule=!0,i.getBrowser=function(){s||(s=function(){var e=(0,a.getWindow)();return{isEdge:!!e.navigator.userAgent.match(/Edge/g),isSafari:(t=e.navigator.userAgent.toLowerCase(),t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)};var t}());return s};var s,a=e("ssr-window")},{"ssr-window":5}],91:[function(e,t,i){"use strict";i.__esModule=!0,i.getDevice=function(e){void 0===e&&(e={});s||(s=function(e){var t=(void 0===e?{}:e).userAgent,i=(0,r.getSupport)(),s=(0,a.getWindow)(),n=s.navigator.platform,o=t||s.navigator.userAgent,l={ios:!1,android:!1},d=s.screen.width,u=s.screen.height,c=o.match(/(Android);?[\s\/]+([\d.]+)?/),h=o.match(/(iPad).*OS\s([\d_]+)/),p=o.match(/(iPod)(.*OS\s([\d_]+))?/),f=!h&&o.match(/(iPhone\sOS|iOS)\s([\d_]+)/),v="Win32"===n,m="MacIntel"===n;!h&&m&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(d+"x"+u)>=0&&((h=o.match(/(Version)\/([\d.]+)/))||(h=[0,1,"13_0_0"]),m=!1);c&&!v&&(l.os="android",l.android=!0);(h||f||p)&&(l.os="ios",l.ios=!0);return l}(e));return s};var s,a=e("ssr-window"),r=e("./get-support")},{"./get-support":92,"ssr-window":5}],92:[function(e,t,i){"use strict";i.__esModule=!0,i.getSupport=function(){s||(s=function(){var e=(0,a.getWindow)(),t=(0,a.getDocument)();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var i=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,i)}catch(e){}return t}(),gestures:"ongesturestart"in e}}());return s};var s,a=e("ssr-window")},{"ssr-window":5}],93:[function(e,t,i){"use strict";i.__esModule=!0,i.deleteProps=function(e){var t=e;Object.keys(t).forEach((function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))},i.nextTick=function(e,t){void 0===t&&(t=0);return setTimeout(e,t)},i.now=function(){return Date.now()},i.getTranslate=function(e,t){void 0===t&&(t="x");var i,a,r,n=(0,s.getWindow)(),o=n.getComputedStyle(e,null);n.WebKitCSSMatrix?((a=o.transform||o.webkitTransform).split(",").length>6&&(a=a.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),r=new n.WebKitCSSMatrix("none"===a?"":a)):(r=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=r.toString().split(","));"x"===t&&(a=n.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4]));"y"===t&&(a=n.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5]));return a||0},i.isObject=a,i.extend=function e(){for(var t=Object(arguments.length<=0?void 0:arguments[0]),i=1;i<arguments.length;i+=1){var s=i<0||arguments.length<=i?void 0:arguments[i];if(null!=s)for(var r=Object.keys(Object(s)),n=0,o=r.length;n<o;n+=1){var l=r[n],d=Object.getOwnPropertyDescriptor(s,l);void 0!==d&&d.enumerable&&(a(t[l])&&a(s[l])?e(t[l],s[l]):!a(t[l])&&a(s[l])?(t[l]={},e(t[l],s[l])):t[l]=s[l])}}return t},i.bindModuleMethods=function(e,t){Object.keys(t).forEach((function(i){a(t[i])&&Object.keys(t[i]).forEach((function(s){"function"==typeof t[i][s]&&(t[i][s]=t[i][s].bind(e))})),e[i]=t[i]}))};var s=e("ssr-window");function a(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object}},{"ssr-window":5}],94:[function(e,t,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=e("./cjs/components/core/core-class"),a=e("./cjs/components/virtual/virtual"),r=e("./cjs/components/keyboard/keyboard"),n=e("./cjs/components/mousewheel/mousewheel"),o=e("./cjs/components/navigation/navigation"),l=e("./cjs/components/pagination/pagination"),d=e("./cjs/components/scrollbar/scrollbar"),u=e("./cjs/components/parallax/parallax"),c=e("./cjs/components/zoom/zoom"),h=e("./cjs/components/lazy/lazy"),p=e("./cjs/components/controller/controller"),f=e("./cjs/components/a11y/a11y"),v=e("./cjs/components/history/history"),m=e("./cjs/components/hash-navigation/hash-navigation"),g=e("./cjs/components/autoplay/autoplay"),w=e("./cjs/components/effect-fade/effect-fade"),y=e("./cjs/components/effect-cube/effect-cube"),b=e("./cjs/components/effect-flip/effect-flip"),x=e("./cjs/components/effect-coverflow/effect-coverflow"),E=e("./cjs/components/thumbs/thumbs");function T(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var S=T(s),C=T(a),M=T(r),z=T(n),P=T(o),k=T(l),_=T(d),L=T(u),O=T(c),A=T(h),$=T(p),D=T(f),I=T(v),j=T(m),N=T(g),B=T(w),H=T(y),W=T(b),G=T(x),F=T(E);S.default.use([]),Object.defineProperty(i,"Swiper",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(i,"default",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(i,"Virtual",{enumerable:!0,get:function(){return C.default}}),Object.defineProperty(i,"Keyboard",{enumerable:!0,get:function(){return M.default}}),Object.defineProperty(i,"Mousewheel",{enumerable:!0,get:function(){return z.default}}),Object.defineProperty(i,"Navigation",{enumerable:!0,get:function(){return P.default}}),Object.defineProperty(i,"Pagination",{enumerable:!0,get:function(){return k.default}}),Object.defineProperty(i,"Scrollbar",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(i,"Parallax",{enumerable:!0,get:function(){return L.default}}),Object.defineProperty(i,"Zoom",{enumerable:!0,get:function(){return O.default}}),Object.defineProperty(i,"Lazy",{enumerable:!0,get:function(){return A.default}}),Object.defineProperty(i,"Controller",{enumerable:!0,get:function(){return $.default}}),Object.defineProperty(i,"A11y",{enumerable:!0,get:function(){return D.default}}),Object.defineProperty(i,"History",{enumerable:!0,get:function(){return I.default}}),Object.defineProperty(i,"HashNavigation",{enumerable:!0,get:function(){return j.default}}),Object.defineProperty(i,"Autoplay",{enumerable:!0,get:function(){return N.default}}),Object.defineProperty(i,"EffectFade",{enumerable:!0,get:function(){return B.default}}),Object.defineProperty(i,"EffectCube",{enumerable:!0,get:function(){return H.default}}),Object.defineProperty(i,"EffectFlip",{enumerable:!0,get:function(){return W.default}}),Object.defineProperty(i,"EffectCoverflow",{enumerable:!0,get:function(){return G.default}}),Object.defineProperty(i,"Thumbs",{enumerable:!0,get:function(){return F.default}})},{"./cjs/components/a11y/a11y":6,"./cjs/components/autoplay/autoplay":7,"./cjs/components/controller/controller":8,"./cjs/components/core/core-class":16,"./cjs/components/effect-coverflow/effect-coverflow":71,"./cjs/components/effect-cube/effect-cube":72,"./cjs/components/effect-fade/effect-fade":73,"./cjs/components/effect-flip/effect-flip":74,"./cjs/components/hash-navigation/hash-navigation":75,"./cjs/components/history/history":76,"./cjs/components/keyboard/keyboard":77,"./cjs/components/lazy/lazy":78,"./cjs/components/mousewheel/mousewheel":79,"./cjs/components/navigation/navigation":80,"./cjs/components/pagination/pagination":81,"./cjs/components/parallax/parallax":82,"./cjs/components/scrollbar/scrollbar":83,"./cjs/components/thumbs/thumbs":84,"./cjs/components/virtual/virtual":85,"./cjs/components/zoom/zoom":86}],95:[function(e,t,i){"use strict";function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e("lazysizes"),e("lazysizes/plugins/parent-fit/ls.parent-fit"),e("../../node_modules/smoothscroll-for-websites/SmoothScroll.js");var a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return{default:e};var t=r();if(t&&t.has(e))return t.get(e);var i={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var o=a?Object.getOwnPropertyDescriptor(e,n):null;o&&(o.get||o.set)?Object.defineProperty(i,n,o):i[n]=e[n]}i.default=e,t&&t.set(e,i);return i}(e("swiper"));function r(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return r=function(){return e},e}a.default.use([a.Navigation,a.Pagination]);new a.default(".swiper-container",{direction:"horizontal",loop:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}});window.addEventListener("load",(function(){var e,t=document.documentElement.clientWidth,i=(e=document.body.querySelectorAll("*"),Array.from(e).filter((function(e){return"fixed"===getComputedStyle(e).position}))),s=document.querySelector(".burger"),a=document.querySelector(".drop-content"),r=document.createElement("div"),n=window.innerWidth-document.documentElement.clientWidth;document.addEventListener("keyup",(function(e){document.activeElement.closest(".drop-content")||"Tab"===e.code&&a.classList.contains("is-visible")&&s.focus()})),s.addEventListener("click",(function(e){n=window.innerWidth-document.documentElement.clientWidth,s.classList.toggle("is-active"),a.classList.toggle("is-visible"),a.classList.contains("is-visible")?(a.after(r),r.classList.add("overlay"),r.classList.add("is-visible"),document.body.classList.add("scroll-off"),document.body.style.paddingRight="".concat(n,"px"),i.forEach((function(e){e.style.paddingRight="".concat(n,"px")}))):(r.classList.remove("is-visible"),setTimeout((function(){document.body.classList.remove("scroll-off"),document.body.style.paddingRight="",i.forEach((function(e){e.style.paddingRight=""}))}),300),setTimeout((function(){e.preventDefault(),r.remove()}),500))}));var o=document.querySelectorAll("[data-jump]"),l=Array.from(o).map((function(e){var t=e.dataset.jumpTo.split(" ");if(!(+t[1]<0||""===t[1]))return{el:e,realParent:e.parentElement,realPrevElem:e.previousElementSibling,newParent:document.querySelector(t[0]),newPos:+t[1],screen:+t[2]};alert('Error: bad value in data-jump-to: "... '.concat(+t[1],' ..."'))}));function d(){t=window.innerWidth,l.forEach((function(e){t>=e.screen&&e.el.dataset.jump&&(e.realPrevElem?e.realPrevElem.after(e.el):e.realParent.prepend(e.el),e.el.dataset.jump=""),t<e.screen&&!e.el.dataset.jump&&(e.newParent.childElementCount?e.newParent.childElementCount<e.newPos?e.newParent.append(e.el):0===e.newPos?e.newParent.prepend(e.el):e.newParent.children[e.newPos-1].after(e.el):e.newParent.append(e.el),e.el.dataset.jump="moved")}))}d(),window.addEventListener("resize",(function(e){window.innerWidth!==t&&d()}))}))},{"../../node_modules/smoothscroll-for-websites/SmoothScroll.js":4,lazysizes:2,"lazysizes/plugins/parent-fit/ls.parent-fit":3,swiper:94}]},{},[95]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5taW4uanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInNzcldpbmRvdyIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc2V0UHJvdG90eXBlT2YiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkRhdGUiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJhcmdzIiwiQ2xhc3MiLCJwdXNoIiwiYXBwbHkiLCJpbnN0YW5jZSIsIkZ1bmN0aW9uIiwiYmluZCIsImFyZ3VtZW50cyIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJNYXAiLCJ1bmRlZmluZWQiLCJmbiIsImluZGV4T2YiLCJUeXBlRXJyb3IiLCJoYXMiLCJnZXQiLCJzZXQiLCJXcmFwcGVyIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiRG9tNyIsIl9BcnJheSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIml0ZW1zIiwiX3RoaXMiLCJvYmoiLCJwcm90byIsImNvbmNhdCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJBcnJheSIsImFycmF5RmxhdCIsImFyciIsInJlcyIsImZvckVhY2giLCJlbCIsImlzQXJyYXkiLCJhcnJheUZpbHRlciIsImNhbGxiYWNrIiwiZmlsdGVyIiwiJCIsInNlbGVjdG9yIiwiY29udGV4dCIsIndpbmRvdyIsImdldFdpbmRvdyIsImRvY3VtZW50IiwiZ2V0RG9jdW1lbnQiLCJodG1sIiwidHJpbSIsInRvQ3JlYXRlIiwidGVtcFBhcmVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJjaGlsZE5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYSIsIm5vZGVUeXBlIiwidW5pcXVlQXJyYXkiLCJhcnJheVVuaXF1ZSIsIm5vVHJpZ2dlciIsInNwbGl0Iiwic2hvcnRjdXQiLCJuYW1lIiwiX2xlbiIsIl9rZXkiLCJ0cmlnZ2VyIiwib24iLCJjbGljayIsImJsdXIiLCJmb2N1cyIsImZvY3VzaW4iLCJmb2N1c291dCIsImtleXVwIiwia2V5ZG93biIsImtleXByZXNzIiwic3VibWl0IiwiY2hhbmdlIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwibW91c2VvdXQiLCJtb3VzZW92ZXIiLCJ0b3VjaHN0YXJ0IiwidG91Y2hlbmQiLCJ0b3VjaG1vdmUiLCJyZXNpemUiLCJzY3JvbGwiLCJhZGQiLCJqIiwiZG9tIiwiX2xlbjEwIiwiZWxzIiwiX2tleTEwIiwidG9BZGQiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjbGFzc05hbWVzIiwibWFwIiwiX2VsJGNsYXNzTGlzdCIsImNsYXNzTGlzdCIsImFuaW1hdGUiLCJpbml0aWFsUHJvcHMiLCJpbml0aWFsUGFyYW1zIiwiYW5pbWF0ZUluc3RhbmNlIiwicHJvcHMiLCJhc3NpZ24iLCJwYXJhbXMiLCJkdXJhdGlvbiIsImVhc2luZyIsImVsZW1lbnRzIiwiYW5pbWF0aW5nIiwicXVlIiwiZWFzaW5nUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsIk1hdGgiLCJjb3MiLCJQSSIsInN0b3AiLCJmcmFtZUlkIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJlYWNoIiwiZG9tN0FuaW1hdGVJbnN0YW5jZSIsImRvbmUiLCJjb21wbGV0ZSIsInNoaWZ0IiwiaW5kZXgiLCJpbml0aWFsRnVsbFZhbHVlIiwiaW5pdGlhbFZhbHVlIiwidW5pdCIsImZpbmFsVmFsdWUiLCJmaW5hbEZ1bGxWYWx1ZSIsImNvbnRhaW5lciIsImtleXMiLCJwcm9wIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJyZXBsYWNlIiwicGFyc2VGbG9hdCIsImN1cnJlbnRWYWx1ZSIsInRpbWUiLCJzdGFydFRpbWUiLCJlbGVtZW50c0RvbmUiLCJwcm9wc0RvbmUiLCJiZWdhbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlciIsImVhc2VQcm9ncmVzcyIsImdldFRpbWUiLCJiZWdpbiIsIm1heCIsIm1pbiIsImVsZW1lbnQiLCJfZWwkcHJvcCIsInN0eWxlIiwiYW5pbWF0aW9uRW5kIiwiZmlyZUNhbGxCYWNrIiwidGFyZ2V0Iiwib2ZmIiwiYXBwZW5kIiwibmV3Q2hpbGQiLCJrIiwidGVtcERpdiIsImZpcnN0Q2hpbGQiLCJhcHBlbmRDaGlsZCIsImFwcGVuZFRvIiwicGFyZW50IiwiYXR0ciIsImF0dHJzIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiYXR0ck5hbWUiLCJjaGlsZHJlbiIsImlzIiwiY2xvc2VzdCIsInBhcmVudHMiLCJlcSIsImNzcyIsIl9wcm9wIiwiZGF0YSIsImtleSIsImRvbTdFbGVtZW50RGF0YVN0b3JhZ2UiLCJkYXRhS2V5IiwiZGF0YXNldCIsInN0cmluZyIsImF0dHJpYnV0ZXMiLCJfYXR0ciIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJncm91cCIsInRvVXBwZXJDYXNlIiwiZGVmYXVsdCIsImRldGFjaCIsInJlbW92ZSIsImVtcHR5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidGV4dENvbnRlbnQiLCJyZXR1cm5JbmRleCIsImZpbmQiLCJmb3VuZEVsZW1lbnRzIiwiZm91bmQiLCJoYXNDbGFzcyIsIl9sZW40IiwiX2tleTQiLCJjbGFzc05hbWUiLCJjb250YWlucyIsImhlaWdodCIsImlubmVySGVpZ2h0IiwiaGlkZSIsImRpc3BsYXkiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImluc2VydEFmdGVyIiwiYWZ0ZXIiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsImNsb25lTm9kZSIsImJlZm9yZSIsImNvbXBhcmVXaXRoIiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsIm5leHRBbGwiLCJuZXh0RWxzIiwiX25leHQiLCJfbGVuNiIsIl9rZXk2IiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJldmVudHMiLCJldmVudCIsImhhbmRsZXJzIiwiZG9tN0xpc3RlbmVycyIsImRvbTdMaXZlTGlzdGVuZXJzIiwiaGFuZGxlciIsImRvbTdwcm94eSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwcm94eUxpc3RlbmVyIiwic3BsaWNlIiwib2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm9keSIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxZIiwic2Nyb2xsTGVmdCIsInNjcm9sbFgiLCJ0b3AiLCJsZWZ0IiwiX2xlbjUiLCJfa2V5NSIsImhhbmRsZUxpdmVFdmVudCIsImV2ZW50RGF0YSIsImRvbTdFdmVudERhdGEiLCJ1bnNoaWZ0IiwiX3BhcmVudHMiLCJoYW5kbGVFdmVudCIsIl9ldmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwiX2xlbjciLCJfa2V5NyIsImV2ZW50TmFtZSIsIm9uY2VIYW5kbGVyIiwiX2xlbjgiLCJldmVudEFyZ3MiLCJfa2V5OCIsIm91dGVySGVpZ2h0IiwiaW5jbHVkZU1hcmdpbnMiLCJfc3R5bGVzMiIsInN0eWxlcyIsIm9mZnNldEhlaWdodCIsIm91dGVyV2lkdGgiLCJfc3R5bGVzIiwib2Zmc2V0V2lkdGgiLCJfcGFyZW50IiwicHJlcGVuZCIsInByZXBlbmRUbyIsInByZXYiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldkFsbCIsInByZXZFbHMiLCJfcHJldiIsInByb3BOYW1lIiwicmVtb3ZlQXR0ciIsInJlbW92ZUF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwiX2xlbjIiLCJfa2V5MiIsIl9lbCRjbGFzc0xpc3QyIiwicmVtb3ZlRGF0YSIsIl9sZW4zIiwiX2tleTMiLCJzY3JvbGxUbyIsImN1cnJlbnRUb3AiLCJjdXJyZW50TGVmdCIsIm1heFRvcCIsIm1heExlZnQiLCJuZXdUb3AiLCJuZXdMZWZ0IiwiYW5pbWF0ZVRvcCIsImFuaW1hdGVMZWZ0Iiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsV2lkdGgiLCJzaG93Iiwic2libGluZ3MiLCJ0ZXh0IiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkVuZCIsIl9sZW45IiwiX2tleTkiLCJDdXN0b21FdmVudCIsImV2dCIsImRldGFpbCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGF0YUluZGV4IiwiZGlzcGF0Y2hFdmVudCIsInZhbCIsIm11bHRpcGxlIiwibm9kZU5hbWUiLCJ2YWx1ZXMiLCJzZWxlY3RlZE9wdGlvbnMiLCJfaSIsIl9lbCIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsIndpZHRoIiwiaW5uZXJXaWR0aCIsInNzci13aW5kb3ciLCIyIiwiZmFjdG9yeSIsImxhenlTaXplcyIsImxhenlzaXplcyIsImxhenlTaXplc0NmZyIsImxhenlTaXplc0RlZmF1bHRzIiwibGF6eUNsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJwcmVsb2FkQ2xhc3MiLCJlcnJvckNsYXNzIiwiYXV0b3NpemVzQ2xhc3MiLCJmYXN0TG9hZGVkQ2xhc3MiLCJpZnJhbWVMb2FkTW9kZSIsInNyY0F0dHIiLCJzcmNzZXRBdHRyIiwic2l6ZXNBdHRyIiwibWluU2l6ZSIsImN1c3RvbU1lZGlhIiwiaW5pdCIsImV4cEZhY3RvciIsImhGYWMiLCJsb2FkTW9kZSIsImxvYWRIaWRkZW4iLCJyaWNUaW1lb3V0IiwidGhyb3R0bGVEZWxheSIsImxhenlTaXplc0NvbmZpZyIsImxhenlzaXplc0NvbmZpZyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJjZmciLCJub1N1cHBvcnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRFbGVtZW50Iiwic3VwcG9ydFBpY3R1cmUiLCJIVE1MUGljdHVyZUVsZW1lbnQiLCJzZXRUaW1lb3V0IiwicmVxdWVzdElkbGVDYWxsYmFjayIsInJlZ1BpY3R1cmUiLCJsb2FkRXZlbnRzIiwicmVnQ2xhc3NDYWNoZSIsImVsZSIsImNscyIsIlJlZ0V4cCIsInRlc3QiLCJyZWciLCJhZGRSZW1vdmVMb2FkRXZlbnRzIiwiYWN0aW9uIiwidHJpZ2dlckV2ZW50IiwiZWxlbSIsIm5vQnViYmxlcyIsIm5vQ2FuY2VsYWJsZSIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwidXBkYXRlUG9seWZpbGwiLCJmdWxsIiwicG9seWZpbGwiLCJwaWN0dXJlZmlsbCIsInBmIiwic3JjIiwicmVldmFsdWF0ZSIsImdldENTUyIsImdldFdpZHRoIiwiX2xhenlzaXplc1dpZHRoIiwickFGIiwiZmlyc3RGbnMiLCJzZWNvbmRGbnMiLCJmbnMiLCJydW4iLCJydW5GbnMiLCJydW5uaW5nIiwid2FpdGluZyIsInJhZkJhdGNoIiwicXVldWUiLCJoaWRkZW4iLCJfbHNGbHVzaCIsInJBRkl0Iiwic2ltcGxlIiwidGhhdCIsImRlYm91bmNlIiwiZnVuYyIsInRpbWVvdXQiLCJ0aW1lc3RhbXAiLCJsYXRlciIsImxhc3QiLCJub3ciLCJsb2FkZXIiLCJyZWdJbWciLCJyZWdJZnJhbWUiLCJzdXBwb3J0U2Nyb2xsIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY3VycmVudEV4cGFuZCIsImlzTG9hZGluZyIsImxvd1J1bnMiLCJyZXNldFByZWxvYWRpbmciLCJpc1Zpc2libGUiLCJpc0JvZHlIaWRkZW4iLCJpc05lc3RlZFZpc2libGUiLCJlbGVtRXhwYW5kIiwib3V0ZXJSZWN0IiwidmlzaWJsZSIsImVMdG9wIiwiZUxib3R0b20iLCJlTGxlZnQiLCJlTHJpZ2h0Iiwib2Zmc2V0UGFyZW50IiwicmlnaHQiLCJib3R0b20iLCJjaGVja0VsZW1lbnRzIiwiZUxsZW4iLCJyZWN0IiwiYXV0b0xvYWRFbGVtIiwibG9hZGVkU29tZXRoaW5nIiwiZWxlbU5lZ2F0aXZlRXhwYW5kIiwiZWxlbUV4cGFuZFZhbCIsImJlZm9yZUV4cGFuZFZhbCIsImRlZmF1bHRFeHBhbmQiLCJwcmVsb2FkRXhwYW5kIiwibGF6eWxvYWRFbGVtcyIsIl9sYXp5UmFjZSIsInByZW1hdHVyZVVudmVpbCIsInVudmVpbEVsZW1lbnQiLCJleHBhbmQiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsIl9kZWZFeCIsImVMdlciLCJlbHZIIiwiaXNDb21wbGV0ZWQiLCJwcmVsb2FkRWxlbXMiLCJwcmVsb2FkQWZ0ZXJMb2FkIiwidGhyb3R0bGVkQ2hlY2tFbGVtZW50cyIsImxhc3RUaW1lIiwiZ0RlbGF5IiwicklDVGltZW91dCIsImlkbGVDYWxsYmFjayIsImlzUHJpb3JpdHkiLCJkZWxheSIsInRocm90dGxlIiwic3dpdGNoTG9hZGluZ0NsYXNzIiwiX2xhenlDYWNoZSIsInJhZlN3aXRjaExvYWRpbmdDbGFzcyIsInJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzIiwiaGFuZGxlU291cmNlcyIsInNvdXJjZSIsInNvdXJjZVNyY3NldCIsImxhenlVbnZlaWwiLCJpc0F1dG8iLCJzaXplcyIsImlzSW1nIiwic3Jjc2V0IiwiaXNQaWN0dXJlIiwiZmlyZXNMb2FkIiwiZGVmYXVsdFByZXZlbnRlZCIsImNsZWFyVGltZW91dCIsInJlc2V0UHJlbG9hZGluZ1RpbWVyIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjb250ZW50V2luZG93IiwibG9jYXRpb24iLCJjaGFuZ2VJZnJhbWVTcmMiLCJpc0xvYWRlZCIsIm5hdHVyYWxXaWR0aCIsImxvYWRpbmciLCJhdXRvU2l6ZXIiLCJ1cGRhdGVFbGVtIiwiYWZ0ZXJTY3JvbGwiLCJhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIiLCJvbmxvYWQiLCJzdGFydGVkIiwiXyIsInBlcnNpc3RlZCIsImxvYWRpbmdFbGVtZW50cyIsImltZyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsInNldEludGVydmFsIiwicmVhZHlTdGF0ZSIsImNoZWNrRWxlbXMiLCJ1bnZlaWwiLCJfYUxTTCIsInNpemVFbGVtZW50Iiwic291cmNlcyIsImxlbiIsImRhdGFBdHRyIiwiZ2V0U2l6ZUVsZW1lbnQiLCJkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzIiwiYXV0b3NpemVzRWxlbXMiLCJ1UCIsImFDIiwickMiLCJoQyIsImZpcmUiLCJnVyIsIjMiLCJnbG9iYWxJbnN0YWxsIiwiZGVmaW5lIiwiYW1kIiwicmVnRGVzY3JpcHRvcnMiLCJyZWdDc3NGaXQiLCJyZWdDc3NPYmplY3QiLCJwYXJlbnRGaXQiLCJnZXRQYXJlbnQiLCJwYXJlbnRTZWwiLCJqUXVlcnkiLCJnZXRGaXQiLCJ0bXBNYXRjaCIsInBhcmVudE9iaiIsImNvbnRlbnQiLCJmb250RmFtaWx5IiwiZml0IiwiX2xhenlzaXplc1BhcmVudEZpdCIsIl9sYXp5c2l6ZXNQYXJlbnRDb250YWluZXIiLCJvYmplY3RGaXQiLCJnZXRJbWFnZVJhdGlvIiwibWVkaWEiLCJyYXRpbyIsIl9sc01lZGlhIiwibWF0Y2hNZWRpYSIsImNhbGN1bGF0ZVNpemUiLCJkaXNwbGF5UmF0aW8iLCJpbWFnZVJhdGlvIiwicmV0V2lkdGgiLCJmaXRPYmoiLCJmaXRFbGVtIiwiNCIsImFjdGl2ZUVsZW1lbnQiLCJvYnNlcnZlciIsInJlZnJlc2hTaXplIiwiZGVsdGFCdWZmZXJUaW1lciIsImRlZmF1bHRPcHRpb25zIiwiZnJhbWVSYXRlIiwiYW5pbWF0aW9uVGltZSIsInN0ZXBTaXplIiwicHVsc2VBbGdvcml0aG0iLCJwdWxzZVNjYWxlIiwicHVsc2VOb3JtYWxpemUiLCJhY2NlbGVyYXRpb25EZWx0YSIsImFjY2VsZXJhdGlvbk1heCIsImtleWJvYXJkU3VwcG9ydCIsImFycm93U2Nyb2xsIiwiZml4ZWRCYWNrZ3JvdW5kIiwiZXhjbHVkZWQiLCJpc0ZyYW1lIiwiZGlyZWN0aW9uIiwieCIsInkiLCJpbml0RG9uZSIsInJvb3QiLCJkZWx0YUJ1ZmZlciIsImlzTWFjIiwicGxhdGZvcm0iLCJhcnJvd0tleXMiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIndpbmRvd0hlaWdodCIsImNvbXBhdE1vZGUiLCJhZGRFdmVudCIsImlzT2xkU2FmYXJpIiwicGVuZGluZ1JlZnJlc2giLCJmdWxsUGFnZUVsZW0iLCJjc3NUZXh0IiwiY2hhcmFjdGVyRGF0YSIsImNsZWFyZml4IiwiY2xlYXIiLCJiYWNrZ3JvdW5kQXR0YWNobWVudCIsInBlbmRpbmciLCJsYXN0U2Nyb2xsIiwic2Nyb2xsQXJyYXkiLCJlbGFwc2VkIiwiZmFjdG9yIiwibGFzdFgiLCJsYXN0WSIsInN0YXJ0Iiwic2Nyb2xsUm9vdCIsImdldFNjcm9sbFJvb3QiLCJpc1dpbmRvd1Njcm9sbCIsIiRzY3JvbGxCZWhhdmlvciIsImlkIiwidW5pcXVlSUQiLCJzbW9vdGhCZWhhdmlvckZvckVsZW1lbnQiLCJzY3JvbGxCZWhhdmlvciIsImlzU2Nyb2xsQmVoYXZpb3JTbW9vdGgiLCJzdGVwIiwiaXRlbSIsImZpbmlzaGVkIiwicG9zaXRpb24iLCJwdWxzZSIsInNjcm9sbEJ5IiwicmVxdWVzdEZyYW1lIiwid2hlZWwiLCJjdHJsS2V5IiwiaXNOb2RlTmFtZSIsInNoYWRvd1Jvb3QiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwiaXNEaXZpc2libGUiLCJhYnMiLCJ3aGVlbERlbHRhIiwiZGVsdGFNb2RlIiwib3ZlcmZsb3dpbmciLCJvdmVyZmxvd2luZ0FuY2VzdG9yIiwibG9jYWxTdG9yYWdlIiwiU1NfZGVsdGFCdWZmZXIiLCJqb2luIiwiZHBpU2NhbGVkV2hlZWxEZWx0YSIsImFsbERlbHRhc0RpdmlzYWJsZUJ5IiwidHAiLCJpc1RvdWNocGFkIiwicHJldmVudERlZmF1bHQiLCJzY2hlZHVsZUNsZWFyQ2FjaGUiLCJpc0Nocm9tZSIsImZyYW1lRWxlbWVudCIsIm1vZGlmaWVyIiwiYWx0S2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsImJ1dHRvblR5cGVzIiwidHlwZSIsImlzQ29udHJvbCIsIlVSTCIsImlzSW5zaWRlWW91dHViZVZpZGVvIiwiaXNDb250ZW50RWRpdGFibGUiLCJzY3JvbGxpbmdFbGVtZW50Iiwic2Nyb2xsUmVtYWluaW5nIiwiY2xlYXJDYWNoZVRpbWVyIiwiY2FjaGVYIiwiY2FjaGVZIiwic2V0Q2FjaGUiLCJlbGVtcyIsImNhY2hlIiwiZ2V0Q2FjaGUiLCJyb290U2Nyb2xsSGVpZ2h0IiwiY2FjaGVkIiwiaXNPdmVyZmxvd0NTUyIsIm92ZXJmbG93Tm90SGlkZGVuIiwib3ZlcmZsb3dBdXRvT3JTY3JvbGwiLCJpc0NvbnRlbnRPdmVyZmxvd2luZyIsInBhcmVudEVsZW1lbnQiLCJvdmVyZmxvdyIsImFyZyIsInJlbW92ZUV2ZW50IiwidGFnIiwiZGl2aXNvciIsImZsb29yIiwiU0NST0xMX1JPT1QiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsImR1bW15IiwiYm9keVNjcm9sbFRvcCIsInB1bHNlXyIsImV4cCIsImlzRWRnZSIsImlzU2FmYXJpIiwiaXNNb2JpbGUiLCJpc0lFV2luNyIsImlzRW5hYmxlZEZvckJyb3dzZXIiLCJzdXBwb3J0c1Bhc3NpdmUiLCJ3aGVlbE9wdCIsInBhc3NpdmUiLCJ3aGVlbEV2ZW50IiwiU21vb3RoU2Nyb2xsIiwib3B0aW9uc1RvU2V0IiwiaGFzT3duUHJvcGVydHkiLCJkZXN0cm95IiwiZGlzY29ubmVjdCIsIlNtb290aFNjcm9sbE9wdGlvbnMiLCI1IiwiZ2xvYmFsIiwiaXNPYmplY3QiLCJleHRlbmQiLCJzc3JEb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiSW1hZ2UiLCJzY3JlZW4iLCJkb2MiLCJ3aW4iLCI2IiwiX19lc01vZHVsZSIsIl9kb20iLCJfdXRpbHMiLCJfZXh0ZW5kcyIsIkExMXkiLCJnZXRSYW5kb21OdW1iZXIiLCJzaXplIiwicmVwZWF0Iiwicm91bmQiLCJyYW5kb20iLCJtYWtlRWxGb2N1c2FibGUiLCIkZWwiLCJtYWtlRWxOb3RGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxSb2xlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImFkZEVsQ29udHJvbHMiLCJjb250cm9scyIsImFkZEVsTGFiZWwiLCJsYWJlbCIsImFkZEVsSWQiLCJhZGRFbExpdmUiLCJsaXZlIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyS2V5IiwiYTExeSIsIiR0YXJnZXRFbCIsIm5hdmlnYXRpb24iLCIkbmV4dEVsIiwiaXNFbmQiLCJsb29wIiwic2xpZGVOZXh0Iiwibm90aWZ5IiwibGFzdFNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCIkcHJldkVsIiwiaXNCZWdpbm5pbmciLCJzbGlkZVByZXYiLCJmaXJzdFNsaWRlTWVzc2FnZSIsInByZXZTbGlkZU1lc3NhZ2UiLCJwYWdpbmF0aW9uIiwiYnVsbGV0Q2xhc3MiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibGl2ZVJlZ2lvbiIsInVwZGF0ZU5hdmlnYXRpb24iLCJfc3dpcGVyJG5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwic3dpcGVyIiwiY2xpY2thYmxlIiwiYnVsbGV0cyIsImJ1bGxldEVsIiwiJGJ1bGxldEVsIiwicmVuZGVyQnVsbGV0IiwicGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UiLCIkY29udGFpbmVyRWwiLCJjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlIiwiY29udGFpbmVyTWVzc2FnZSIsIiR3cmFwcGVyRWwiLCJ3cmFwcGVySWQiLCJhdXRvcGxheSIsImVuYWJsZWQiLCJpdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSIsInNsaWRlcyIsInNsaWRlRWwiLCIkc2xpZGVFbCIsInRhZ05hbWUiLCJfZGVmYXVsdCIsIm5vdGlmaWNhdGlvbkNsYXNzIiwiYmluZE1vZHVsZU1ldGhvZHMiLCJhZnRlckluaXQiLCJ0b0VkZ2UiLCJmcm9tRWRnZSIsInBhZ2luYXRpb25VcGRhdGUiLCIuLi8uLi91dGlscy9kb20iLCIuLi8uLi91dGlscy91dGlscyIsIjciLCJfc3NyV2luZG93IiwiQXV0b3BsYXkiLCIkYWN0aXZlU2xpZGVFbCIsImFjdGl2ZUluZGV4IiwibmV4dFRpY2siLCJhdXRvcGxheVJlc3VsdCIsInJldmVyc2VEaXJlY3Rpb24iLCJsb29wRml4Iiwic3BlZWQiLCJlbWl0Iiwic3RvcE9uTGFzdFNsaWRlIiwic2xpZGVUbyIsImNzc01vZGUiLCJwYXVzZSIsInBhdXNlZCIsIndhaXRGb3JUcmFuc2l0aW9uIiwib25UcmFuc2l0aW9uRW5kIiwib25WaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwiZGVzdHJveWVkIiwiZGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJiZWZvcmVUcmFuc2l0aW9uU3RhcnQiLCJpbnRlcm5hbCIsInNsaWRlckZpcnN0TW92ZSIsInRvdWNoRW5kIiwiOCIsIkNvbnRyb2xsZXIiLCJMaW5lYXJTcGxpbmUiLCJtYXhJbmRleCIsIm1pbkluZGV4IiwiZ3Vlc3MiLCJpMSIsImkzIiwiYmluYXJ5U2VhcmNoIiwiYXJyYXkiLCJsYXN0SW5kZXgiLCJpbnRlcnBvbGF0ZSIsIngyIiwiZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbiIsImNvbnRyb2xsZXIiLCJzcGxpbmUiLCJzbGlkZXNHcmlkIiwic25hcEdyaWQiLCJzZXRUcmFuc2xhdGUiLCJfc2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwibXVsdGlwbGllciIsImNvbnRyb2xsZWRUcmFuc2xhdGUiLCJjb250cm9sbGVkIiwiY29udHJvbCIsIlN3aXBlciIsInNldENvbnRyb2xsZWRUcmFuc2xhdGUiLCJ0cmFuc2xhdGUiLCJydGxUcmFuc2xhdGUiLCJieSIsIm1heFRyYW5zbGF0ZSIsIm1pblRyYW5zbGF0ZSIsImludmVyc2UiLCJ1cGRhdGVQcm9ncmVzcyIsInVwZGF0ZUFjdGl2ZUluZGV4IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsInNldFRyYW5zaXRpb24iLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsInRyYW5zaXRpb25TdGFydCIsImF1dG9IZWlnaHQiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwidXBkYXRlIiwib2JzZXJ2ZXJVcGRhdGUiLCI5IiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInNvcnQiLCJiIiwicGFyc2VJbnQiLCJfcG9pbnRzJGkiLCIxMCIsIl9zZXRCcmVha3BvaW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9nZXRCcmVha3BvaW50Iiwic2V0QnJlYWtwb2ludCIsImdldEJyZWFrcG9pbnQiLCIuL2dldEJyZWFrcG9pbnQiLCIuL3NldEJyZWFrcG9pbnQiLCIxMSIsImluaXRpYWxpemVkIiwiX3N3aXBlciRsb29wZWRTbGlkZXMiLCJsb29wZWRTbGlkZXMiLCJjdXJyZW50QnJlYWtwb2ludCIsImJyZWFrcG9pbnRPbmx5UGFyYW1zIiwicGFyYW0iLCJwYXJhbVZhbHVlIiwiYnJlYWtwb2ludFBhcmFtcyIsIm9yaWdpbmFsUGFyYW1zIiwid2FzTXVsdGlSb3ciLCJzbGlkZXNQZXJDb2x1bW4iLCJpc011bHRpUm93IiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImVtaXRDb250YWluZXJDbGFzc2VzIiwic2xpZGVzUGVyQ29sdW1uRmlsbCIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsInNsaWRlc1BlclZpZXciLCJjaGFuZ2VEaXJlY3Rpb24iLCJhbGxvd1RvdWNoTW92ZSIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJsb29wRGVzdHJveSIsImxvb3BDcmVhdGUiLCJ1cGRhdGVTbGlkZXMiLCIuLi8uLi8uLi91dGlscy91dGlscyIsIjEyIiwiY2hlY2tPdmVyZmxvdyIsIndhc0xvY2tlZCIsImlzTG9ja2VkIiwibGFzdFNsaWRlUG9zaXRpb24iLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJzcGFjZUJldHdlZW4iLCJzbGlkZXNPZmZzZXRBZnRlciIsIjEzIiwicnRsIiwiZGV2aWNlIiwic3VmZml4ZXMiLCJmcmVlTW9kZSIsImFuZHJvaWQiLCJpb3MiLCJzdWZmaXgiLCIxNCIsIl9hZGRDbGFzc2VzIiwiX3JlbW92ZUNsYXNzZXMiLCJhZGRDbGFzc2VzIiwicmVtb3ZlQ2xhc3NlcyIsIi4vYWRkQ2xhc3NlcyIsIi4vcmVtb3ZlQ2xhc3NlcyIsIjE1IiwiMTYiLCJfZ2V0U3VwcG9ydCIsIl9nZXREZXZpY2UiLCJfZ2V0QnJvd3NlciIsIl9yZXNpemUiLCJfb2JzZXJ2ZXIiLCJfbW9kdWxhciIsIl9ldmVudHNFbWl0dGVyIiwiX2luZGV4IiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0IiwiX2luZGV4NSIsIl9pbmRleDYiLCJfaW5kZXg3IiwiX2luZGV4OCIsIl9pbmRleDkiLCJfaW5kZXgxMCIsIl9pbmRleDExIiwiX2luZGV4MTIiLCJfZGVmYXVsdHMiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b3R5cGVzIiwibW9kdWxhciIsImV2ZW50c0VtaXR0ZXIiLCJzbGlkZSIsImdyYWJDdXJzb3IiLCJtYW5pcHVsYXRpb24iLCJpbWFnZXMiLCJleHRlbmRlZERlZmF1bHRzIiwic3VwcG9ydCIsImdldFN1cHBvcnQiLCJnZXREZXZpY2UiLCJicm93c2VyIiwiZ2V0QnJvd3NlciIsImV2ZW50c0xpc3RlbmVycyIsImV2ZW50c0FueUxpc3RlbmVycyIsIm1vZHVsZXMiLCJtb2R1bGVOYW1lIiwibW9kdWxlUGFyYW1OYW1lIiwibW9kdWxlUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwidXNlUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwib25BbnkiLCJzd2lwZXJzIiwiY29udGFpbmVyRWwiLCJuZXdQYXJhbXMiLCJ0b3VjaCIsImRlc2t0b3AiLCJ3cmFwcGVyQ2xhc3MiLCJ3cmFwcGVyRWwiLCJzbGlkZXNTaXplc0dyaWQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwiZGlyIiwid3JvbmdSVEwiLCJyZWFsSW5kZXgiLCJwcmV2aW91c1RyYW5zbGF0ZSIsInZlbG9jaXR5IiwidG91Y2hFdmVudHMiLCJwb2ludGVyRXZlbnRzIiwidG91Y2hFdmVudHNUb3VjaCIsIm1vdmUiLCJlbmQiLCJjYW5jZWwiLCJ0b3VjaEV2ZW50c0Rlc2t0b3AiLCJzaW11bGF0ZVRvdWNoIiwidG91Y2hFdmVudHNEYXRhIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJ0b3VjaFN0YXJ0VGltZSIsImlzU2Nyb2xsaW5nIiwiY3VycmVudFRyYW5zbGF0ZSIsInN0YXJ0VHJhbnNsYXRlIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9ybUVsZW1lbnRzIiwibGFzdENsaWNrVGltZSIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiaXNUb3VjaEV2ZW50Iiwic3RhcnRNb3ZpbmciLCJhbGxvd0NsaWNrIiwidG91Y2hlcyIsInN0YXJ0WCIsInN0YXJ0WSIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJkaWZmIiwiaW1hZ2VzVG9Mb2FkIiwiaW1hZ2VzTG9hZGVkIiwidXNlTW9kdWxlcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Byb3RvIiwiX2VtaXRDbGFzc2VzIiwiZ2V0U2xpZGVDbGFzc2VzIiwic2xpZGVDbGFzcyIsImVtaXRTbGlkZXNDbGFzc2VzIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJzd2lwZXJTaXplIiwic3B2IiwiY2VudGVyZWRTbGlkZXMiLCJicmVha0xvb3AiLCJzbGlkZVNpemUiLCJzd2lwZXJTbGlkZVNpemUiLCJfaTIiLCJ1cGRhdGVTaXplIiwid2F0Y2hPdmVyZmxvdyIsInRyYW5zbGF0ZVZhbHVlIiwibmV3VHJhbnNsYXRlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJzZXRHcmFiQ3Vyc29yIiwicHJlbG9hZEltYWdlcyIsImluaXRpYWxTbGlkZSIsInJ1bkNhbGxiYWNrc09uSW5pdCIsImF0dGFjaEV2ZW50cyIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJkZXRhY2hFdmVudHMiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwiZGVsZXRlUHJvcHMiLCJleHRlbmREZWZhdWx0cyIsIm5ld0RlZmF1bHRzIiwiaW5zdGFsbE1vZHVsZSIsInVzZSIsIm0iLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwiLi4vLi4vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlciIsIi4uLy4uL21vZHVsZXMvcmVzaXplL3Jlc2l6ZSIsIi4uLy4uL3V0aWxzL2dldC1icm93c2VyIiwiLi4vLi4vdXRpbHMvZ2V0LWRldmljZSIsIi4uLy4uL3V0aWxzL2dldC1zdXBwb3J0IiwiLi9icmVha3BvaW50cy9pbmRleCIsIi4vY2hlY2stb3ZlcmZsb3cvaW5kZXgiLCIuL2NsYXNzZXMvaW5kZXgiLCIuL2RlZmF1bHRzIiwiLi9ldmVudHMtZW1pdHRlciIsIi4vZXZlbnRzL2luZGV4IiwiLi9ncmFiLWN1cnNvci9pbmRleCIsIi4vaW1hZ2VzL2luZGV4IiwiLi9sb29wL2luZGV4IiwiLi9tYW5pcHVsYXRpb24vaW5kZXgiLCIuL21vZHVsYXIiLCIuL3NsaWRlL2luZGV4IiwiLi90cmFuc2l0aW9uL2luZGV4IiwiLi90cmFuc2xhdGUvaW5kZXgiLCIuL3VwZGF0ZS9pbmRleCIsIjE3IiwidG91Y2hFdmVudHNUYXJnZXQiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsIm5lc3RlZCIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsInVybCIsImVkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImZyZWVNb2RlTW9tZW50dW0iLCJmcmVlTW9kZU1vbWVudHVtUmF0aW8iLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlIiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvIiwiZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW8iLCJmcmVlTW9kZVN0aWNreSIsImZyZWVNb2RlTWluaW11bVZlbG9jaXR5Iiwic2V0V3JhcHBlclNpemUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiZWZmZWN0Iiwic2xpZGVzUGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cFNraXAiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJyb3VuZExlbmd0aHMiLCJ0b3VjaFJhdGlvIiwidG91Y2hBbmdsZSIsInNob3J0U3dpcGVzIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsImxvbmdTd2lwZXNNcyIsImZvbGxvd0ZpbmdlciIsInRocmVzaG9sZCIsInRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicmVzaXN0YW5jZSIsInJlc2lzdGFuY2VSYXRpbyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ3YXRjaFNsaWRlc1Zpc2liaWxpdHkiLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImxvb3BGaWxsR3JvdXBXaXRoQmxhbmsiLCJsb29wUHJldmVudHNTbGlkZSIsInN3aXBlSGFuZGxlciIsIm5vU3dpcGluZyIsIm5vU3dpcGluZ0NsYXNzIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJwYXNzaXZlTGlzdGVuZXJzIiwic2xpZGVCbGFua0NsYXNzIiwic2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyIsInNsaWRlRHVwbGljYXRlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyIsInNsaWRlRHVwbGljYXRlUHJldkNsYXNzIiwiMTgiLCJwcmlvcml0eSIsIm1ldGhvZCIsIl9fZW1pdHRlclByb3h5Iiwib2ZmQW55IiwiZXZlbnRIYW5kbGVyIiwic2xpY2UiLCJldmVudHNBcnJheSIsIjE5IiwiX29uVG91Y2hTdGFydCIsIl9vblRvdWNoTW92ZSIsIl9vblRvdWNoRW5kIiwiX29uUmVzaXplIiwiX29uQ2xpY2siLCJfb25TY3JvbGwiLCJkdW1teUV2ZW50QXR0YWNoZWQiLCJkdW1teUV2ZW50TGlzdGVuZXIiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJvblNjcm9sbCIsIm9uQ2xpY2siLCJwYXNzaXZlTGlzdGVuZXIiLCIuL29uQ2xpY2siLCIuL29uUmVzaXplIiwiLi9vblNjcm9sbCIsIi4vb25Ub3VjaEVuZCIsIi4vb25Ub3VjaE1vdmUiLCIuL29uVG91Y2hTdGFydCIsIjIwIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiMjEiLCIyMiIsIm5ld1Byb2dyZXNzIiwidHJhbnNsYXRlc0RpZmYiLCIyMyIsIm9yaWdpbmFsRXZlbnQiLCJjdXJyZW50UG9zIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJzd2lwZURpcmVjdGlvbiIsImxhc3RNb3ZlRXZlbnQiLCJwb3AiLCJ2ZWxvY2l0eUV2ZW50IiwiZGlzdGFuY2UiLCJtb21lbnR1bUR1cmF0aW9uIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsIm5lZWRzTG9vcEZpeCIsImRvQm91bmNlIiwiYm91bmNlQW1vdW50IiwibmV4dFNsaWRlIiwibW92ZURpc3RhbmNlIiwiY3VycmVudFNsaWRlU2l6ZSIsInNsaWRlVG9DbG9zZXN0Iiwic3RvcEluZGV4IiwiZ3JvdXBTaXplIiwiX2luY3JlbWVudCIsImluY3JlbWVudCIsIm5leHRFbCIsInByZXZFbCIsIjI0IiwidGFyZ2V0VG91Y2giLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJkaWZmWCIsImRpZmZZIiwic3FydCIsInBvdyIsImF0YW4yIiwiZ2V0VHJhbnNsYXRlIiwiZGlzYWJsZVBhcmVudFN3aXBlciIsIi4uLy4uLy4uL3V0aWxzL2RvbSIsIjI1Iiwid2hpY2giLCJidXR0b24iLCJwYXRoIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCIyNiIsIl9zZXRHcmFiQ3Vyc29yIiwiX3Vuc2V0R3JhYkN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsIi4vc2V0R3JhYkN1cnNvciIsIi4vdW5zZXRHcmFiQ3Vyc29yIiwiMjciLCJtb3ZpbmciLCJjdXJzb3IiLCIyOCIsIjI5IiwiX2xvYWRJbWFnZSIsIl9wcmVsb2FkSW1hZ2VzIiwibG9hZEltYWdlIiwiLi9sb2FkSW1hZ2UiLCIuL3ByZWxvYWRJbWFnZXMiLCIzMCIsImltYWdlRWwiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5Iiwib25lcnJvciIsIjMxIiwiY3VycmVudFNyYyIsIjMyIiwiX2xvb3BDcmVhdGUiLCJfbG9vcEZpeCIsIl9sb29wRGVzdHJveSIsIi4vbG9vcENyZWF0ZSIsIi4vbG9vcERlc3Ryb3kiLCIuL2xvb3BGaXgiLCIzMyIsImJsYW5rU2xpZGVzTnVtIiwiYmxhbmtOb2RlIiwiY2VpbCIsInByZXBlbmRTbGlkZXMiLCJhcHBlbmRTbGlkZXMiLCIzNCIsIjM1IiwibmV3SW5kZXgiLCIzNiIsImFjdGl2ZUluZGV4QnVmZmVyIiwiYmFzZUxlbmd0aCIsInByZXBlbmRTbGlkZSIsImFwcGVuZFNsaWRlIiwibmV3QWN0aXZlSW5kZXgiLCJzbGlkZXNCdWZmZXIiLCJjdXJyZW50U2xpZGUiLCJfYXBwZW5kU2xpZGUiLCJfcHJlcGVuZFNsaWRlIiwiX2FkZFNsaWRlIiwiX3JlbW92ZVNsaWRlIiwiX3JlbW92ZUFsbFNsaWRlcyIsImFkZFNsaWRlIiwicmVtb3ZlU2xpZGUiLCJyZW1vdmVBbGxTbGlkZXMiLCIuL2FkZFNsaWRlIiwiLi9hcHBlbmRTbGlkZSIsIi4vcHJlcGVuZFNsaWRlIiwiLi9yZW1vdmVBbGxTbGlkZXMiLCIuL3JlbW92ZVNsaWRlIiwic2xpZGVzSW5kZXhlcyIsIjQxIiwiaW5kZXhUb1JlbW92ZSIsIjQyIiwiaW5zdGFuY2VQYXJhbXMiLCJtb2R1bGVzUGFyYW1zIiwibW9kdWxlRXZlbnROYW1lIiwiNDMiLCJfc2xpZGVUbyIsIl9zbGlkZVRvTG9vcCIsIl9zbGlkZU5leHQiLCJfc2xpZGVQcmV2IiwiX3NsaWRlUmVzZXQiLCJfc2xpZGVUb0Nsb3Nlc3QiLCJfc2xpZGVUb0NsaWNrZWRTbGlkZSIsInNsaWRlVG9Mb29wIiwic2xpZGVSZXNldCIsIi4vc2xpZGVOZXh0IiwiLi9zbGlkZVByZXYiLCIuL3NsaWRlUmVzZXQiLCIuL3NsaWRlVG8iLCIuL3NsaWRlVG9DbGlja2VkU2xpZGUiLCIuL3NsaWRlVG9DbG9zZXN0IiwiLi9zbGlkZVRvTG9vcCIsIjQ0IiwicnVuQ2FsbGJhY2tzIiwiX2NsaWVudExlZnQiLCI0NSIsIm5vcm1hbGl6ZSIsInByZXZJbmRleCIsIm5vcm1hbGl6ZWRUcmFuc2xhdGUiLCJub3JtYWxpemVkU25hcEdyaWQiLCJwcmV2U25hcCIsInNuYXAiLCI0NiIsIjQ3IiwiaW5kZXhBc051bWJlciIsImlzRmluaXRlIiwic2xpZGVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJza2lwIiwic25hcEluZGV4IiwiX3dyYXBwZXJFbCRzY3JvbGxUbyIsImlzSCIsImJlaGF2aW9yIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCI0OCIsInNsaWRlVG9JbmRleCIsImNsaWNrZWRJbmRleCIsImNsaWNrZWRTbGlkZSIsIjQ5IiwiY3VycmVudFNuYXAiLCJuZXh0U25hcCIsIl9jdXJyZW50U25hcCIsIjUwIiwiNTEiLCJfc2V0VHJhbnNpdGlvbiIsIl90cmFuc2l0aW9uU3RhcnQiLCJfdHJhbnNpdGlvbkVuZCIsIi4vc2V0VHJhbnNpdGlvbiIsIi4vdHJhbnNpdGlvbkVuZCIsIi4vdHJhbnNpdGlvblN0YXJ0IiwiNTIiLCI1MyIsIjU0IiwiNTUiLCJheGlzIiwiNTYiLCJfZ2V0VHJhbnNsYXRlIiwiX21pblRyYW5zbGF0ZSIsIl9tYXhUcmFuc2xhdGUiLCJfdHJhbnNsYXRlVG8iLCJ0cmFuc2xhdGVUbyIsIi4vZ2V0VHJhbnNsYXRlIiwiLi9tYXhUcmFuc2xhdGUiLCIuL21pblRyYW5zbGF0ZSIsIi4vc2V0VHJhbnNsYXRlIiwiLi90cmFuc2xhdGVUbyIsIjU3IiwiNTgiLCI1OSIsIjYwIiwidHJhbnNsYXRlQm91bmRzIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwiNjEiLCJfdXBkYXRlU2l6ZSIsIl91cGRhdGVTbGlkZXMiLCJfdXBkYXRlQXV0b0hlaWdodCIsIl91cGRhdGVTbGlkZXNPZmZzZXQiLCJfdXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJfdXBkYXRlUHJvZ3Jlc3MiLCJfdXBkYXRlU2xpZGVzQ2xhc3NlcyIsIl91cGRhdGVBY3RpdmVJbmRleCIsIl91cGRhdGVDbGlja2VkU2xpZGUiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIi4vdXBkYXRlQWN0aXZlSW5kZXgiLCIuL3VwZGF0ZUF1dG9IZWlnaHQiLCIuL3VwZGF0ZUNsaWNrZWRTbGlkZSIsIi4vdXBkYXRlUHJvZ3Jlc3MiLCIuL3VwZGF0ZVNpemUiLCIuL3VwZGF0ZVNsaWRlcyIsIi4vdXBkYXRlU2xpZGVzQ2xhc3NlcyIsIi4vdXBkYXRlU2xpZGVzT2Zmc2V0IiwiLi91cGRhdGVTbGlkZXNQcm9ncmVzcyIsIjYyIiwicHJldmlvdXNSZWFsSW5kZXgiLCJwcmV2aW91c1NuYXBJbmRleCIsIjYzIiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0IiwidmlzaWJsZVNsaWRlcyIsIjY0Iiwic2xpZGVGb3VuZCIsInZpcnR1YWwiLCI2NSIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsIjY2IiwiTnVtYmVyIiwiaXNOYU4iLCI2NyIsImlzVmlydHVhbCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzTGVuZ3RoIiwic2xpZGVzRm9yTWFyZ2luIiwib2Zmc2V0QmVmb3JlIiwib2Zmc2V0QWZ0ZXIiLCJzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzUGVyUm93IiwibnVtRnVsbENvbHVtbnMiLCJuZXdTbGlkZU9yZGVySW5kZXgiLCJjb2x1bW4iLCJyb3ciLCJncm91cEluZGV4Iiwic2xpZGVJbmRleEluR3JvdXAiLCJjb2x1bW5zSW5Hcm91cCIsIi13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAiLCItbW96LWJveC1vcmRpbmFsLWdyb3VwIiwiLW1zLWZsZXgtb3JkZXIiLCItd2Via2l0LW9yZGVyIiwib3JkZXIiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJfc2xpZGUkIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJfYm94U2l6aW5nIiwiX3NsaWRlJDIiLCJzbGlkZXNHcmlkSXRlbSIsIl9zbGlkZXNHcmlkSXRlbSIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJfYWxsU2xpZGVzU2l6ZSIsImFsbFNsaWRlc09mZnNldCIsIjY4IiwiYWN0aXZlU2xpZGUiLCJwcmV2U2xpZGUiLCI2OSIsInN3aXBlclNsaWRlT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIjcwIiwib2Zmc2V0Q2VudGVyIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJzbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwiNzEiLCJDb3ZlcmZsb3ciLCJzd2lwZXJXaWR0aCIsInN3aXBlckhlaWdodCIsImNvdmVyZmxvd0VmZmVjdCIsImNlbnRlciIsInJvdGF0ZSIsImRlcHRoIiwib2Zmc2V0TXVsdGlwbGllciIsInJvdGF0ZVkiLCJyb3RhdGVYIiwidHJhbnNsYXRlWiIsInN0cmV0Y2giLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWCIsInNjYWxlIiwic2xpZGVUcmFuc2Zvcm0iLCJ6SW5kZXgiLCJzbGlkZVNoYWRvd3MiLCIkc2hhZG93QmVmb3JlRWwiLCIkc2hhZG93QWZ0ZXJFbCIsIm9wYWNpdHkiLCJiZWZvcmVJbml0IiwiNzIiLCJDdWJlIiwiJGN1YmVTaGFkb3dFbCIsImN1YmVFZmZlY3QiLCJ3cmFwcGVyUm90YXRlIiwic2hhZG93Iiwic2xpZGVBbmdsZSIsInR4IiwidHkiLCJ0eiIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwiLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luIiwiLW1vei10cmFuc2Zvcm0tb3JpZ2luIiwiLW1zLXRyYW5zZm9ybS1vcmlnaW4iLCJ0cmFuc2Zvcm0tb3JpZ2luIiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJzaGFkb3dBbmdsZSIsInNpbiIsInNjYWxlMSIsInNjYWxlMiIsInpGYWN0b3IiLCJpc1dlYlZpZXciLCJvdmVyd3JpdGVQYXJhbXMiLCI3MyIsIkZhZGUiLCJzbGlkZU9wYWNpdHkiLCJmYWRlRWZmZWN0IiwiY3Jvc3NGYWRlIiwiZXZlbnRUcmlnZ2VyZWQiLCJ0cmlnZ2VyRXZlbnRzIiwiNzQiLCJGbGlwIiwiZmxpcEVmZmVjdCIsImxpbWl0Um90YXRpb24iLCI3NSIsIkhhc2hOYXZpZ2F0aW9uIiwib25IYXNoQ2FuZ2UiLCJuZXdIYXNoIiwic2V0SGFzaCIsImhhc2hOYXZpZ2F0aW9uIiwid2F0Y2hTdGF0ZSIsInNsaWRlQ2hhbmdlIiwiNzYiLCJIaXN0b3J5IiwicGF0aHMiLCJnZXRQYXRoVmFsdWVzIiwic2Nyb2xsVG9TbGlkZSIsInNldEhpc3RvcnlQb3BTdGF0ZSIsInVybE92ZXJyaWRlIiwicGF0aEFycmF5IiwicGFydCIsInRvdGFsIiwic2V0SGlzdG9yeSIsInNsdWdpZnkiLCJpbmNsdWRlcyIsImN1cnJlbnRTdGF0ZSIsInN0YXRlIiwiNzciLCJLZXlib2FyZCIsImhhbmRsZSIsImtjIiwiY2hhckNvZGUiLCJwYWdlVXBEb3duIiwia2V5Ym9hcmQiLCJpc1BhZ2VVcCIsImlzUGFnZURvd24iLCJpc0Fycm93TGVmdCIsImlzQXJyb3dSaWdodCIsImlzQXJyb3dVcCIsImlzQXJyb3dEb3duIiwib25seUluVmlld3BvcnQiLCJpblZpZXciLCJ3aW5kb3dXaWR0aCIsInN3aXBlck9mZnNldCIsInN3aXBlckNvb3JkIiwicmV0dXJuVmFsdWUiLCJlbmFibGUiLCJkaXNhYmxlIiwiNzgiLCJMYXp5IiwibG9hZEluU2xpZGUiLCJsb2FkSW5EdXBsaWNhdGUiLCJsYXp5IiwiJGltYWdlcyIsImVsZW1lbnRDbGFzcyIsIiRpbWFnZUVsIiwiYmFja2dyb3VuZCIsIiRwaWN0dXJlRWwiLCJzb3VyY2VFbCIsIiRzb3VyY2UiLCJwcmVsb2FkZXJDbGFzcyIsInNsaWRlT3JpZ2luYWxJbmRleCIsIm9yaWdpbmFsU2xpZGUiLCJkdXBsaWNhdGVkU2xpZGUiLCJsb2FkIiwic2xpZGVFeGlzdCIsImluaXRpYWxJbWFnZUxvYWRlZCIsImxvYWRQcmV2TmV4dCIsImxvYWRQcmV2TmV4dEFtb3VudCIsImFtb3VudCIsImNoZWNrSW5WaWV3T25Mb2FkIiwiJHNjcm9sbEVsZW1lbnQiLCJpc1dpbmRvdyIsInNjcm9sbEVsZW1lbnRXaWR0aCIsInNjcm9sbEVsZW1lbnRIZWlnaHQiLCJzY3JvbGxIYW5kbGVyQXR0YWNoZWQiLCJjaGVja0luVmlldyIsImxvYWRPblRyYW5zaXRpb25TdGFydCIsInNjcm9sbGJhckRyYWdNb3ZlIiwiNzkiLCJNb3VzZXdoZWVsIiwibGFzdFNjcm9sbFRpbWUiLCJsYXN0RXZlbnRCZWZvcmVTbmFwIiwicmVjZW50V2hlZWxFdmVudHMiLCJpc1N1cHBvcnRlZCIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJzWCIsInNZIiwicFgiLCJwWSIsIkhPUklaT05UQUxfQVhJUyIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJoYW5kbGVNb3VzZUVudGVyIiwibW91c2VFbnRlcmVkIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm1vdXNld2hlZWwiLCJldmVudHNUYXJnZXQiLCJyZWxlYXNlT25FZGdlcyIsImRlbHRhIiwicnRsRmFjdG9yIiwiZm9yY2VUb0F4aXMiLCJpbnZlcnQiLCJwb3NpdGlvbnMiLCJzZW5zaXRpdml0eSIsIl9uZXdFdmVudCIsInNpZ24iLCJpZ25vcmVXaGVlbEV2ZW50cyIsIl9yZWNlbnRXaGVlbEV2ZW50cyIsIl9wcmV2RXZlbnQiLCJmaXJzdEV2ZW50Iiwic25hcFRvVGhyZXNob2xkIiwiYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiIsIm5ld0V2ZW50IiwicmF3IiwicHJldkV2ZW50IiwiYW5pbWF0ZVNsaWRlciIsInJlbGVhc2VTY3JvbGwiLCJ0aHJlc2hvbGREZWx0YSIsInRocmVzaG9sZFRpbWUiLCI4MCIsIk5hdmlnYXRpb24iLCJkaXNhYmxlZENsYXNzIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIl9zd2lwZXIkbmF2aWdhdGlvbjIiLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwiaXNIaWRkZW4iLCJfc3dpcGVyJG5hdmlnYXRpb24zIiwiODEiLCJQYWdpbmF0aW9uIiwiY3VycmVudCIsInBhZ2luYXRpb25UeXBlIiwiZmlyc3RJbmRleCIsIm1pZEluZGV4IiwiZHluYW1pY0J1bGxldHMiLCJidWxsZXRTaXplIiwiZHluYW1pY01haW5CdWxsZXRzIiwiZHluYW1pY0J1bGxldEluZGV4IiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCJidWxsZXQiLCIkYnVsbGV0IiwiYnVsbGV0SW5kZXgiLCIkZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCIkbGFzdERpc3BsYXllZEJ1bGxldCIsImR5bmFtaWNCdWxsZXRzTGVuZ3RoIiwiYnVsbGV0c09mZnNldCIsIm9mZnNldFByb3AiLCJjdXJyZW50Q2xhc3MiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJ0b3RhbENsYXNzIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwicmVuZGVyQ3VzdG9tIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyRnJhY3Rpb24iLCJyZW5kZXJQcm9ncmVzc2JhciIsImNsaWNrYWJsZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsIm51bWJlciIsImFjdGl2ZUluZGV4Q2hhbmdlIiwic25hcEluZGV4Q2hhbmdlIiwic2xpZGVzTGVuZ3RoQ2hhbmdlIiwic25hcEdyaWRMZW5ndGhDaGFuZ2UiLCI4MiIsIlBhcmFsbGF4Iiwic2V0VHJhbnNmb3JtIiwiY3VycmVudE9wYWNpdHkiLCJjdXJyZW50U2NhbGUiLCJwYXJhbGxheCIsInBhcmFsbGF4RWwiLCIkcGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCI4MyIsIlNjcm9sbGJhciIsInNjcm9sbGJhciIsImRyYWdTaXplIiwidHJhY2tTaXplIiwiJGRyYWdFbCIsIm5ld1NpemUiLCJuZXdQb3MiLCJkaXZpZGVyIiwibW92ZURpdmlkZXIiLCJnZXRQb2ludGVyUG9zaXRpb24iLCJjbGllbnRYIiwiY2xpZW50WSIsInNldERyYWdQb3NpdGlvbiIsInBvc2l0aW9uUmF0aW8iLCJkcmFnU3RhcnRQb3MiLCJvbkRyYWdTdGFydCIsImRyYWdUaW1lb3V0Iiwib25EcmFnTW92ZSIsIm9uRHJhZ0VuZCIsInNuYXBPblJlbGVhc2UiLCJlbmFibGVEcmFnZ2FibGUiLCJhY3RpdmVMaXN0ZW5lciIsImRpc2FibGVEcmFnZ2FibGUiLCIkc3dpcGVyRWwiLCJkcmFnQ2xhc3MiLCJkcmFnRWwiLCJkcmFnZ2FibGUiLCI4NCIsIlRodW1icyIsInRodW1ic1BhcmFtcyIsInRodW1icyIsIlN3aXBlckNsYXNzIiwic3dpcGVyQ3JlYXRlZCIsInRodW1ic0NvbnRhaW5lckNsYXNzIiwib25UaHVtYkNsaWNrIiwidGh1bWJzU3dpcGVyIiwic2xpZGVUaHVtYkFjdGl2ZUNsYXNzIiwiY3VycmVudEluZGV4IiwibmV4dEluZGV4IiwiaW5pdGlhbCIsImF1dG9TY3JvbGxPZmZzZXQiLCJ1c2VPZmZzZXQiLCJuZXdUaHVtYnNJbmRleCIsImN1cnJlbnRUaHVtYnNJbmRleCIsInByZXZUaHVtYnNJbmRleCIsIm5leHRUaHVtYnNJbmRleCIsInRodW1ic1RvQWN0aXZhdGUiLCJ0aHVtYkFjdGl2ZUNsYXNzIiwibXVsdGlwbGVBY3RpdmVUaHVtYnMiLCJiZWZvcmVEZXN0cm95IiwiODUiLCJWaXJ0dWFsIiwiZm9yY2UiLCJfc3dpcGVyJHBhcmFtcyIsIl9zd2lwZXIkcGFyYW1zJHZpcnR1YSIsImFkZFNsaWRlc0JlZm9yZSIsImFkZFNsaWRlc0FmdGVyIiwiX3N3aXBlciR2aXJ0dWFsIiwicHJldmlvdXNGcm9tIiwiZnJvbSIsInByZXZpb3VzVG8iLCJ0byIsInByZXZpb3VzU2xpZGVzR3JpZCIsInJlbmRlclNsaWRlIiwicHJldmlvdXNPZmZzZXQiLCJzbGlkZXNBZnRlciIsInNsaWRlc0JlZm9yZSIsIm9uUmVuZGVyZWQiLCJyZW5kZXJFeHRlcm5hbCIsInNsaWRlc1RvUmVuZGVyIiwicmVuZGVyRXh0ZXJuYWxVcGRhdGUiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCJudW1iZXJPZk5ld1NsaWRlcyIsIm5ld0NhY2hlIiwiY2FjaGVkSW5kZXgiLCIkY2FjaGVkRWwiLCJjYWNoZWRFbEluZGV4IiwiODYiLCJab29tIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyIsIngxIiwieTEiLCJ5MiIsIm9uR2VzdHVyZVN0YXJ0Iiwiem9vbSIsImdlc3R1cmUiLCJmYWtlR2VzdHVyZVRvdWNoZWQiLCJmYWtlR2VzdHVyZU1vdmVkIiwiZ2VzdHVyZXMiLCJzY2FsZVN0YXJ0IiwiJGltYWdlV3JhcEVsIiwiY29udGFpbmVyQ2xhc3MiLCJtYXhSYXRpbyIsImlzU2NhbGluZyIsIm9uR2VzdHVyZUNoYW5nZSIsInNjYWxlTW92ZSIsIm9uR2VzdHVyZUVuZCIsInRvdWNoZXNTdGFydCIsInNsaWRlV2lkdGgiLCJzbGlkZUhlaWdodCIsInNjYWxlZFdpZHRoIiwic2NhbGVkSGVpZ2h0IiwibWluWCIsIm1heFgiLCJtaW5ZIiwibWF4WSIsInRvdWNoZXNDdXJyZW50IiwicHJldlBvc2l0aW9uWCIsInByZXZQb3NpdGlvblkiLCJwcmV2VGltZSIsIm1vbWVudHVtRHVyYXRpb25YIiwibW9tZW50dW1EdXJhdGlvblkiLCJtb21lbnR1bURpc3RhbmNlWCIsIm5ld1Bvc2l0aW9uWCIsIm1vbWVudHVtRGlzdGFuY2VZIiwibmV3UG9zaXRpb25ZIiwib3V0IiwiaW4iLCJ0b3VjaFgiLCJ0b3VjaFkiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJ0cmFuc2xhdGVNaW5YIiwidHJhbnNsYXRlTWluWSIsInRyYW5zbGF0ZU1heFgiLCJ0cmFuc2xhdGVNYXhZIiwiem9vbWVkU2xpZGVDbGFzcyIsInRvZ2dsZUdlc3R1cmVzIiwic2xpZGVTZWxlY3RvciIsImVuYWJsZUdlc3R1cmVzIiwiZ2VzdHVyZXNFbmFibGVkIiwiZGlzYWJsZUdlc3R1cmVzIiwiYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSIsInRvdWNoU3RhcnQiLCJkb3VibGVUYXAiLCI4NyIsIk9ic2VydmVyIiwiYXR0YWNoIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmVycyIsIm9ic2VydmVQYXJlbnRzIiwiY29udGFpbmVyUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiODgiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiODkiLCJNZXRob2RzIiwibWV0aG9kTmFtZSIsImRvbTciLCI5MCIsInVhIiwiY2FsY0Jyb3dzZXIiLCI5MSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsIi4vZ2V0LXN1cHBvcnQiLCI5MiIsIkRvY3VtZW50VG91Y2giLCJQb2ludGVyRXZlbnQiLCJtYXhUb3VjaFBvaW50cyIsIm9wdHMiLCJjYWxjU3VwcG9ydCIsIjkzIiwib2JqZWN0IiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsIm00MSIsIm00MiIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInN1YktleSIsIjk0IiwiZWZmZWN0RmFkZSIsImVmZmVjdEN1YmUiLCJlZmZlY3RGbGlwIiwiZWZmZWN0Q292ZXJmbG93IiwiX2ludGVyb3BEZWZhdWx0TGVnYWN5IiwiU3dpcGVyX19kZWZhdWx0IiwidmlydHVhbF9fZGVmYXVsdCIsImtleWJvYXJkX19kZWZhdWx0IiwibW91c2V3aGVlbF9fZGVmYXVsdCIsIm5hdmlnYXRpb25fX2RlZmF1bHQiLCJwYWdpbmF0aW9uX19kZWZhdWx0Iiwic2Nyb2xsYmFyX19kZWZhdWx0IiwicGFyYWxsYXhfX2RlZmF1bHQiLCJ6b29tX19kZWZhdWx0IiwibGF6eV9fZGVmYXVsdCIsImNvbnRyb2xsZXJfX2RlZmF1bHQiLCJhMTF5X19kZWZhdWx0IiwiaGlzdG9yeV9fZGVmYXVsdCIsImhhc2hOYXZpZ2F0aW9uX19kZWZhdWx0IiwiYXV0b3BsYXlfX2RlZmF1bHQiLCJlZmZlY3RGYWRlX19kZWZhdWx0IiwiZWZmZWN0Q3ViZV9fZGVmYXVsdCIsImVmZmVjdEZsaXBfX2RlZmF1bHQiLCJlZmZlY3RDb3ZlcmZsb3dfX2RlZmF1bHQiLCJ0aHVtYnNfX2RlZmF1bHQiLCIuL2Nqcy9jb21wb25lbnRzL2ExMXkvYTExeSIsIi4vY2pzL2NvbXBvbmVudHMvYXV0b3BsYXkvYXV0b3BsYXkiLCIuL2Nqcy9jb21wb25lbnRzL2NvbnRyb2xsZXIvY29udHJvbGxlciIsIi4vY2pzL2NvbXBvbmVudHMvY29yZS9jb3JlLWNsYXNzIiwiLi9janMvY29tcG9uZW50cy9lZmZlY3QtY292ZXJmbG93L2VmZmVjdC1jb3ZlcmZsb3ciLCIuL2Nqcy9jb21wb25lbnRzL2VmZmVjdC1jdWJlL2VmZmVjdC1jdWJlIiwiLi9janMvY29tcG9uZW50cy9lZmZlY3QtZmFkZS9lZmZlY3QtZmFkZSIsIi4vY2pzL2NvbXBvbmVudHMvZWZmZWN0LWZsaXAvZWZmZWN0LWZsaXAiLCIuL2Nqcy9jb21wb25lbnRzL2hhc2gtbmF2aWdhdGlvbi9oYXNoLW5hdmlnYXRpb24iLCIuL2Nqcy9jb21wb25lbnRzL2hpc3RvcnkvaGlzdG9yeSIsIi4vY2pzL2NvbXBvbmVudHMva2V5Ym9hcmQva2V5Ym9hcmQiLCIuL2Nqcy9jb21wb25lbnRzL2xhenkvbGF6eSIsIi4vY2pzL2NvbXBvbmVudHMvbW91c2V3aGVlbC9tb3VzZXdoZWVsIiwiLi9janMvY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb24iLCIuL2Nqcy9jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbiIsIi4vY2pzL2NvbXBvbmVudHMvcGFyYWxsYXgvcGFyYWxsYXgiLCIuL2Nqcy9jb21wb25lbnRzL3Njcm9sbGJhci9zY3JvbGxiYXIiLCIuL2Nqcy9jb21wb25lbnRzL3RodW1icy90aHVtYnMiLCIuL2Nqcy9jb21wb25lbnRzL3ZpcnR1YWwvdmlydHVhbCIsIi4vY2pzL2NvbXBvbmVudHMvem9vbS96b29tIiwiOTUiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfc3dpcGVyIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJXZWFrTWFwIiwiYWxsIiwic2NyZWVuVyIsImZpeGVkRWxlbWVudHMiLCJidXJnZXIiLCJkcm9wTWVudSIsIm1lbnVPdmVybGF5Iiwic2Nyb2xsVyIsImp1bXBlcnMiLCJqdW1wVG8iLCJyZWFsUGFyZW50IiwicmVhbFByZXZFbGVtIiwibmV3UGFyZW50IiwiYWxlcnQiLCJqdW1wIiwianVtcGVyIiwiY2hpbGRFbGVtZW50Q291bnQiLCIuLi8uLi9ub2RlX21vZHVsZXMvc21vb3Roc2Nyb2xsLWZvci13ZWJzaXRlcy9TbW9vdGhTY3JvbGwuanMiLCJsYXp5c2l6ZXMvcGx1Z2lucy9wYXJlbnQtZml0L2xzLnBhcmVudC1maXQiXSwibWFwcGluZ3MiOiJDQUFZLFNBQVNB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bkQsR0FDMUJZLFdBSUYsQ0FBQ0csK0RBQStELEVBQUV0b0QsVUFBWSxFQUFFdW9ELDZDQUE2QyxFQUFFdHNDLE9BQVMsTUFBTSxHQUFHLENBQUMiLCJmaWxlIjoiY29tbW9uLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBEb203IDMuMC4wXG4gKiBNaW5pbWFsaXN0aWMgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBET00gbWFuaXB1bGF0aW9uLCB3aXRoIGEgalF1ZXJ5LWNvbXBhdGlibGUgQVBJXG4gKiBodHRwczovL2ZyYW1ld29yazcuaW8vZG9jcy9kb203Lmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogTm92ZW1iZXIgOSwgMjAyMFxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBzc3JXaW5kb3cgPSByZXF1aXJlKCdzc3Itd2luZG93Jyk7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbmZ1bmN0aW9uIG1ha2VSZWFjdGl2ZShvYmopIHtcbiAgdmFyIHByb3RvID0gb2JqLl9fcHJvdG9fXztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19fcHJvdG9fXycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBwcm90bztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBwcm90by5fX3Byb3RvX18gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgRG9tNyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FycmF5KSB7XG4gIF9pbmhlcml0c0xvb3NlKERvbTcsIF9BcnJheSk7XG5cbiAgZnVuY3Rpb24gRG9tNyhpdGVtcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0FycmF5LmNhbGwuYXBwbHkoX0FycmF5LCBbdGhpc10uY29uY2F0KGl0ZW1zKSkgfHwgdGhpcztcbiAgICBtYWtlUmVhY3RpdmUoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBEb203O1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoQXJyYXkpKTtcblxuZnVuY3Rpb24gYXJyYXlGbGF0KGFycikge1xuICBpZiAoYXJyID09PSB2b2lkIDApIHtcbiAgICBhcnIgPSBbXTtcbiAgfVxuXG4gIHZhciByZXMgPSBbXTtcbiAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgICByZXMucHVzaC5hcHBseShyZXMsIGFycmF5RmxhdChlbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMucHVzaChlbCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFyciwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChhcnIsIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGFycmF5VW5pcXVlKGFycikge1xuICB2YXIgdW5pcXVlQXJyYXkgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh1bmlxdWVBcnJheS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7XG4gIH1cblxuICByZXR1cm4gdW5pcXVlQXJyYXk7XG59XG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24gKG1hdGNoLCBncm91cCkge1xuICAgIHJldHVybiBncm91cC50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcXNhKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gIH1cblxuICB2YXIgYSA9IFtdO1xuICB2YXIgcmVzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGEucHVzaChyZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uICQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgdmFyIHdpbmRvdyA9IHNzcldpbmRvdy5nZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gc3NyV2luZG93LmdldERvY3VtZW50KCk7XG4gIHZhciBhcnIgPSBbXTtcblxuICBpZiAoIWNvbnRleHQgJiYgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9XG5cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgRG9tNyhhcnIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgaHRtbCA9IHNlbGVjdG9yLnRyaW0oKTtcblxuICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgIHZhciB0b0NyZWF0ZSA9ICdkaXYnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPGxpJykgPT09IDApIHRvQ3JlYXRlID0gJ3VsJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0cicpID09PSAwKSB0b0NyZWF0ZSA9ICd0Ym9keSc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB0b0NyZWF0ZSA9ICd0cic7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGJvZHknKSA9PT0gMCkgdG9DcmVhdGUgPSAndGFibGUnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPG9wdGlvbicpID09PSAwKSB0b0NyZWF0ZSA9ICdzZWxlY3QnO1xuICAgICAgdmFyIHRlbXBQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRvQ3JlYXRlKTtcbiAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2godGVtcFBhcmVudC5jaGlsZE5vZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXJyID0gcXNhKHNlbGVjdG9yLnRyaW0oKSwgY29udGV4dCB8fCBkb2N1bWVudCk7XG4gICAgfSAvLyBhcnIgPSBxc2Eoc2VsZWN0b3IsIGRvY3VtZW50KTtcblxuICB9IGVsc2UgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yID09PSB3aW5kb3cgfHwgc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgYXJyLnB1c2goc2VsZWN0b3IpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0b3IpKSB7XG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykgcmV0dXJuIHNlbGVjdG9yO1xuICAgIGFyciA9IHNlbGVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEb203KGFycmF5VW5pcXVlKGFycikpO1xufVxuXG4kLmZuID0gRG9tNy5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGFkZENsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc2VzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgX2VsJGNsYXNzTGlzdDtcblxuICAgIChfZWwkY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2VsJGNsYXNzTGlzdCwgY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGNsYXNzZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgdmFyIF9lbCRjbGFzc0xpc3QyO1xuXG4gICAgKF9lbCRjbGFzc0xpc3QyID0gZWwuY2xhc3NMaXN0KS5yZW1vdmUuYXBwbHkoX2VsJGNsYXNzTGlzdDIsIGNsYXNzTmFtZXMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBjbGFzc2VzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGNsYXNzTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgY2xhc3Nlc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHJldHVybiBhcnJheUZpbHRlcih0aGlzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH0pLmxlbmd0aCA+IDA7XG4gIH0pLmxlbmd0aCA+IDA7XG59XG5cbmZ1bmN0aW9uIGF0dHIoYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgYXR0clxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gLy8gU2V0IGF0dHJzXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgLy8gU3RyaW5nXG4gICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRycywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3RcbiAgICAgIGZvciAodmFyIGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgIHRoaXNbaV1bYXR0ck5hbWVdID0gYXR0cnNbYXR0ck5hbWVdO1xuICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByb3AocHJvcHMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgcHJvcFxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXVtwcm9wc107XG4gIH0gZWxzZSB7XG4gICAgLy8gU2V0IHByb3BzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgdGhpc1tpXVtwcm9wc10gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9iamVjdFxuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV1bcHJvcE5hbWVdID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gIHZhciBlbDtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkOyAvLyBHZXQgdmFsdWVcblxuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGtleSBpbiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSB7XG4gICAgICByZXR1cm4gZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgIH1cblxuICAgIHZhciBkYXRhS2V5ID0gZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1cIiArIGtleSk7XG5cbiAgICBpZiAoZGF0YUtleSkge1xuICAgICAgcmV0dXJuIGRhdGFLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSAvLyBTZXQgdmFsdWVcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVsID0gdGhpc1tpXTtcbiAgICBpZiAoIWVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgPSB7fTtcbiAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVEYXRhKGtleSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldKSB7XG4gICAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSBudWxsO1xuICAgICAgZGVsZXRlIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0YXNldCgpIHtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGRhdGFzZXQgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmIChlbC5kYXRhc2V0KSB7XG4gICAgZm9yICh2YXIgZGF0YUtleSBpbiBlbC5kYXRhc2V0KSB7XG4gICAgICBkYXRhc2V0W2RhdGFLZXldID0gZWwuZGF0YXNldFtkYXRhS2V5XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgX2F0dHIgPSBlbC5hdHRyaWJ1dGVzW2ldO1xuXG4gICAgICBpZiAoX2F0dHIubmFtZS5pbmRleE9mKCdkYXRhLScpID49IDApIHtcbiAgICAgICAgZGF0YXNldFt0b0NhbWVsQ2FzZShfYXR0ci5uYW1lLnNwbGl0KCdkYXRhLScpWzFdKV0gPSBfYXR0ci52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0W2tleV0gPT09ICdmYWxzZScpIGRhdGFzZXRba2V5XSA9IGZhbHNlO2Vsc2UgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ3RydWUnKSBkYXRhc2V0W2tleV0gPSB0cnVlO2Vsc2UgaWYgKHBhcnNlRmxvYXQoZGF0YXNldFtrZXldKSA9PT0gZGF0YXNldFtrZXldICogMSkgZGF0YXNldFtrZXldICo9IDE7XG4gIH1cblxuICByZXR1cm4gZGF0YXNldDtcbn1cblxuZnVuY3Rpb24gdmFsKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gZ2V0IHZhbHVlXG4gICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgaWYgKGVsLm11bHRpcGxlICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuc2VsZWN0ZWRPcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKGVsLnNlbGVjdGVkT3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsLnZhbHVlO1xuICB9IC8vIHNldCB2YWx1ZVxuXG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgdmFyIF9lbCA9IHRoaXNbX2ldO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIF9lbC5tdWx0aXBsZSAmJiBfZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2VsLm9wdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgX2VsLm9wdGlvbnNbal0uc2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKF9lbC5vcHRpb25zW2pdLnZhbHVlKSA+PSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBfZWwudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudmFsKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uICE9PSAnc3RyaW5nJyA/IGR1cmF0aW9uICsgXCJtc1wiIDogZHVyYXRpb247XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb24oKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIHZhciBldmVudFR5cGUgPSBhcmdzWzBdLFxuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdLFxuICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdLFxuICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRUeXBlID0gYXJnc1swXTtcbiAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgY2FwdHVyZSA9IGFyZ3NbMl07XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVMaXZlRXZlbnQoZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgIHZhciBldmVudERhdGEgPSBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgaWYgKCQodGFyZ2V0KS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHRhcmdldCwgZXZlbnREYXRhKTtlbHNlIHtcbiAgICAgIHZhciBfcGFyZW50cyA9ICQodGFyZ2V0KS5wYXJlbnRzKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IF9wYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgIGlmICgkKF9wYXJlbnRzW2tdKS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KF9wYXJlbnRzW2tdLCBldmVudERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGUpIHtcbiAgICB2YXIgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTtcblxuICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgIH1cblxuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50RGF0YSk7XG4gIH1cblxuICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIHZhciBqO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoIXRhcmdldFNlbGVjdG9yKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSBlbC5kb203TGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXZlIGV2ZW50c1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgX2V2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzKSBlbC5kb203TGl2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzW19ldmVudF0pIGVsLmRvbTdMaXZlTGlzdGVuZXJzW19ldmVudF0gPSBbXTtcblxuICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVMaXZlRXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihfZXZlbnQsIGhhbmRsZUxpdmVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9mZigpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgYXJnc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZXZlbnQgPSBldmVudHNbaV07XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IHRoaXNbal07XG4gICAgICB2YXIgaGFuZGxlcnMgPSB2b2lkIDA7XG5cbiAgICAgIGlmICghdGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGl2ZUxpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBrID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgayA+PSAwOyBrIC09IDEpIHtcbiAgICAgICAgICB2YXIgaGFuZGxlciA9IGhhbmRsZXJzW2tdO1xuXG4gICAgICAgICAgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9uY2UoKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFyZ3NbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdLFxuICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdLFxuICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnROYW1lID0gYXJnc1swXTtcbiAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgY2FwdHVyZSA9IGFyZ3NbMl07XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGV2ZW50QXJncyA9IG5ldyBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykge1xuICAgICAgZXZlbnRBcmdzW19rZXk4XSA9IGFyZ3VtZW50c1tfa2V5OF07XG4gICAgfVxuXG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnRBcmdzKTtcbiAgICBkb20ub2ZmKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcblxuICAgIGlmIChvbmNlSGFuZGxlci5kb203cHJveHkpIHtcbiAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5kb203cHJveHk7XG4gICAgfVxuICB9XG5cbiAgb25jZUhhbmRsZXIuZG9tN3Byb3h5ID0gbGlzdGVuZXI7XG4gIHJldHVybiBkb20ub24oZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyKCkge1xuICB2YXIgd2luZG93ID0gc3NyV2luZG93LmdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgfVxuXG4gIHZhciBldmVudHMgPSBhcmdzWzBdLnNwbGl0KCcgJyk7XG4gIHZhciBldmVudERhdGEgPSBhcmdzWzFdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuXG4gICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7XG4gICAgICAgIHZhciBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgZGV0YWlsOiBldmVudERhdGEsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gYXJncy5maWx0ZXIoZnVuY3Rpb24gKGRhdGEsIGRhdGFJbmRleCkge1xuICAgICAgICAgIHJldHVybiBkYXRhSW5kZXggPiAwO1xuICAgICAgICB9KTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICAgIGRlbGV0ZSBlbC5kb203RXZlbnREYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHdpZHRoKCkge1xuICB2YXIgd2luZG93ID0gc3NyV2luZG93LmdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ3dpZHRoJykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgdmFyIF9zdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoX3N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSkgKyBwYXJzZUZsb2F0KF9zdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGg7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0KCkge1xuICB2YXIgd2luZG93ID0gc3NyV2luZG93LmdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCdoZWlnaHQnKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb3V0ZXJIZWlnaHQoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgdmFyIF9zdHlsZXMyID0gdGhpcy5zdHlsZXMoKTtcblxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChfc3R5bGVzMi5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdChfc3R5bGVzMi5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgd2luZG93ID0gc3NyV2luZG93LmdldFdpbmRvdygpO1xuICAgIHZhciBkb2N1bWVudCA9IHNzcldpbmRvdy5nZXREb2N1bWVudCgpO1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgdmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgdmFyIGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgIHZhciBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgdmFyIHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoaWRlKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2hvdygpIHtcbiAgdmFyIHdpbmRvdyA9IHNzcldpbmRvdy5nZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cblxuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgIC8vIFN0aWxsIG5vdCB2aXNpYmxlXG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc3R5bGVzKCkge1xuICB2YXIgd2luZG93ID0gc3NyV2luZG93LmdldFdpbmRvdygpO1xuICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpO1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgdmFyIHdpbmRvdyA9IHNzcldpbmRvdy5nZXRXaW5kb3coKTtcbiAgdmFyIGk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gLmNzcygnd2lkdGgnKVxuICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLmNzcyh7IHdpZHRoOiAnMTAwcHgnIH0pXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV0uc3R5bGVbX3Byb3BdID0gcHJvcHNbX3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyAuY3NzKCd3aWR0aCcsICcxMDBweCcpXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcHNdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICBjYWxsYmFjay5hcHBseShlbCwgW2VsLCBpbmRleF0pO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0ID0gYXJyYXlGaWx0ZXIodGhpcywgY2FsbGJhY2spO1xuICByZXR1cm4gJChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgaWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRleHQodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICB2YXIgd2luZG93ID0gc3NyV2luZG93LmdldFdpbmRvdygpO1xuICB2YXIgZG9jdW1lbnQgPSBzc3JXaW5kb3cuZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgdmFyIGNvbXBhcmVXaXRoO1xuICB2YXIgaTtcbiAgaWYgKCFlbCB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmIChlbC5tc01hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGVsID09PSBkb2N1bWVudDtcbiAgfVxuXG4gIGlmIChzZWxlY3RvciA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIGVsID09PSB3aW5kb3c7XG4gIH1cblxuICBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgY29tcGFyZVdpdGggPSBzZWxlY3Rvci5ub2RlVHlwZSA/IFtzZWxlY3Rvcl0gOiBzZWxlY3RvcjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpbmRleCgpIHtcbiAgdmFyIGNoaWxkID0gdGhpc1swXTtcbiAgdmFyIGk7XG5cbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXEoaW5kZXgpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzO1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICB2YXIgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBpZiAocmV0dXJuSW5kZXggPCAwKSByZXR1cm4gJChbXSk7XG4gICAgcmV0dXJuICQoW3RoaXNbcmV0dXJuSW5kZXhdXSk7XG4gIH1cblxuICByZXR1cm4gJChbdGhpc1tpbmRleF1dKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKCkge1xuICB2YXIgbmV3Q2hpbGQ7XG4gIHZhciBkb2N1bWVudCA9IHNzcldpbmRvdy5nZXREb2N1bWVudCgpO1xuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgYXJndW1lbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgbmV3Q2hpbGQgPSBrIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGsgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNba107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kKG5ld0NoaWxkKSB7XG4gIHZhciBkb2N1bWVudCA9IHNzcldpbmRvdy5nZXREb2N1bWVudCgpO1xuICB2YXIgaTtcbiAgdmFyIGo7XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgIGZvciAoaiA9IHRlbXBEaXYuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBqID49IDA7IGogLT0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZSh0ZW1wRGl2LmNoaWxkTm9kZXNbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZFtqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLnByZXBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUoc2VsZWN0b3IpIHtcbiAgdmFyIGJlZm9yZSA9ICQoc2VsZWN0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChiZWZvcmUubGVuZ3RoID09PSAxKSB7XG4gICAgICBiZWZvcmVbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYmVmb3JlWzBdKTtcbiAgICB9IGVsc2UgaWYgKGJlZm9yZS5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJlZm9yZS5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBiZWZvcmVbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGJlZm9yZVtqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydEFmdGVyKHNlbGVjdG9yKSB7XG4gIHZhciBhZnRlciA9ICQoc2VsZWN0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhZnRlci5sZW5ndGggPT09IDEpIHtcbiAgICAgIGFmdGVyWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGFmdGVyWzBdLm5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2UgaWYgKGFmdGVyLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYWZ0ZXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYWZ0ZXJbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGFmdGVyW2pdLm5leHRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dChzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcgJiYgJCh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgdmFyIG5leHRFbHMgPSBbXTtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuICQoW10pO1xuXG4gIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICB2YXIgX25leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQoX25leHQpLmlzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKF9uZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKF9uZXh0KTtcblxuICAgIGVsID0gX25leHQ7XG4gIH1cblxuICByZXR1cm4gJChuZXh0RWxzKTtcbn1cblxuZnVuY3Rpb24gcHJldihzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGVsID0gdGhpc1swXTtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgJChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoW10pO1xuICAgIH1cblxuICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIHJldHVybiAkKFtdKTtcbn1cblxuZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICB2YXIgcHJldkVscyA9IFtdO1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICB2YXIgX3ByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKF9wcmV2KS5pcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChfcHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChfcHJldik7XG5cbiAgICBlbCA9IF9wcmV2O1xuICB9XG5cbiAgcmV0dXJuICQocHJldkVscyk7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLm5leHRBbGwoc2VsZWN0b3IpLmFkZCh0aGlzLnByZXZBbGwoc2VsZWN0b3IpKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gIHZhciBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQodGhpc1tpXS5wYXJlbnROb2RlKS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQocGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudHMoc2VsZWN0b3IpIHtcbiAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBfcGFyZW50ID0gdGhpc1tpXS5wYXJlbnROb2RlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB3aGlsZSAoX3BhcmVudCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKF9wYXJlbnQpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKF9wYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKF9wYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBfcGFyZW50ID0gX3BhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gIHZhciBjbG9zZXN0ID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgaWYgKCFjbG9zZXN0LmlzKHNlbGVjdG9yKSkge1xuICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3Q7XG59XG5cbmZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgdmFyIGZvdW5kRWxlbWVudHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZm91bmQgPSB0aGlzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3VuZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChmb3VuZEVsZW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgdmFyIGNoaWxkcmVuID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHRoaXNbaV0uY2hpbGRyZW47XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICghc2VsZWN0b3IgfHwgJChjaGlsZE5vZGVzW2pdKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSkgdGhpc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG59XG5cbmZ1bmN0aW9uIGFkZCgpIHtcbiAgdmFyIGRvbSA9IHRoaXM7XG4gIHZhciBpO1xuICB2YXIgajtcblxuICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBlbHMgPSBuZXcgQXJyYXkoX2xlbjEwKSwgX2tleTEwID0gMDsgX2tleTEwIDwgX2xlbjEwOyBfa2V5MTArKykge1xuICAgIGVsc1tfa2V5MTBdID0gYXJndW1lbnRzW19rZXkxMF07XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIHRvQWRkID0gJChlbHNbaV0pO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHRvQWRkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBkb20ucHVzaCh0b0FkZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvbTtcbn1cblxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBpZiAoZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsLmNoaWxkTm9kZXNbal0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsLnRleHRDb250ZW50ID0gJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvKCkge1xuICB2YXIgd2luZG93ID0gc3NyV2luZG93LmdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgbGVmdCA9IGFyZ3NbMF0sXG4gICAgICB0b3AgPSBhcmdzWzFdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzJdLFxuICAgICAgZWFzaW5nID0gYXJnc1szXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1s0XTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZWFzaW5nO1xuICAgIGxlZnQgPSBhcmdzWzBdO1xuICAgIHRvcCA9IGFyZ3NbMV07XG4gICAgZHVyYXRpb24gPSBhcmdzWzJdO1xuICAgIGNhbGxiYWNrID0gYXJnc1szXTtcbiAgICBlYXNpbmcgPSBhcmdzWzRdO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSBlYXNpbmcgPSAnc3dpbmcnO1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgdmFyIGVsID0gdGhpcztcbiAgICB2YXIgY3VycmVudFRvcDtcbiAgICB2YXIgY3VycmVudExlZnQ7XG4gICAgdmFyIG1heFRvcDtcbiAgICB2YXIgbWF4TGVmdDtcbiAgICB2YXIgbmV3VG9wO1xuICAgIHZhciBuZXdMZWZ0O1xuICAgIHZhciBzY3JvbGxUb3A7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHZhciBzY3JvbGxMZWZ0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB2YXIgYW5pbWF0ZVRvcCA9IHRvcCA+IDAgfHwgdG9wID09PSAwO1xuICAgIHZhciBhbmltYXRlTGVmdCA9IGxlZnQgPiAwIHx8IGxlZnQgPT09IDA7XG5cbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIGN1cnJlbnRUb3AgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZHVyYXRpb24pIHJldHVybjtcblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBtYXhUb3AgPSBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIG1heFRvcCksIDApO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgbWF4TGVmdCA9IGVsLnNjcm9sbFdpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICBuZXdMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgbWF4TGVmdCksIDApO1xuICAgIH1cblxuICAgIHZhciBzdGFydFRpbWUgPSBudWxsO1xuICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA9PT0gY3VycmVudFRvcCkgYW5pbWF0ZVRvcCA9IGZhbHNlO1xuICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID09PSBjdXJyZW50TGVmdCkgYW5pbWF0ZUxlZnQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlcih0aW1lKSB7XG4gICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgdmFyIGVhc2VQcm9ncmVzcyA9IGVhc2luZyA9PT0gJ2xpbmVhcicgPyBwcm9ncmVzcyA6IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgICAgdmFyIGRvbmU7XG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgc2Nyb2xsVG9wID0gY3VycmVudFRvcCArIGVhc2VQcm9ncmVzcyAqIChuZXdUb3AgLSBjdXJyZW50VG9wKTtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgc2Nyb2xsTGVmdCA9IGN1cnJlbnRMZWZ0ICsgZWFzZVByb2dyZXNzICogKG5ld0xlZnQgLSBjdXJyZW50TGVmdCk7XG5cbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA+IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wID49IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPCBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA8PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPiBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0ID49IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA8IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPD0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBlbC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH0pO1xufSAvLyBzY3JvbGxUb3AodG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjaykge1xuXG5cbmZ1bmN0aW9uIHNjcm9sbFRvcCgpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIHRvcCA9IGFyZ3NbMF0sXG4gICAgICBkdXJhdGlvbiA9IGFyZ3NbMV0sXG4gICAgICBlYXNpbmcgPSBhcmdzWzJdLFxuICAgICAgY2FsbGJhY2sgPSBhcmdzWzNdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdG9wID0gYXJnc1swXTtcbiAgICBkdXJhdGlvbiA9IGFyZ3NbMV07XG4gICAgY2FsbGJhY2sgPSBhcmdzWzJdO1xuICAgIGVhc2luZyA9IGFyZ3NbM107XG4gIH1cblxuICB2YXIgZG9tID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsVG9wO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyh1bmRlZmluZWQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxMZWZ0KCkge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICB2YXIgbGVmdCA9IGFyZ3NbMF0sXG4gICAgICBkdXJhdGlvbiA9IGFyZ3NbMV0sXG4gICAgICBlYXNpbmcgPSBhcmdzWzJdLFxuICAgICAgY2FsbGJhY2sgPSBhcmdzWzNdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbGVmdCA9IGFyZ3NbMF07XG4gICAgZHVyYXRpb24gPSBhcmdzWzFdO1xuICAgIGNhbGxiYWNrID0gYXJnc1syXTtcbiAgICBlYXNpbmcgPSBhcmdzWzNdO1xuICB9XG5cbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb20ubGVuZ3RoID4gMCkgcmV0dXJuIGRvbVswXS5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyhsZWZ0LCB1bmRlZmluZWQsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0ZShpbml0aWFsUHJvcHMsIGluaXRpYWxQYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IHNzcldpbmRvdy5nZXRXaW5kb3coKTtcbiAgdmFyIGVscyA9IHRoaXM7XG4gIHZhciBhID0ge1xuICAgIHByb3BzOiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsUHJvcHMpLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgZWFzaW5nOiAnc3dpbmcnIC8vIG9yICdsaW5lYXInXG5cbiAgICAgIC8qIENhbGxiYWNrc1xuICAgICAgYmVnaW4oZWxlbWVudHMpXG4gICAgICBjb21wbGV0ZShlbGVtZW50cylcbiAgICAgIHByb2dyZXNzKGVsZW1lbnRzLCBjb21wbGV0ZSwgcmVtYWluaW5nLCBzdGFydCwgdHdlZW5WYWx1ZSlcbiAgICAgICovXG5cbiAgICB9LCBpbml0aWFsUGFyYW1zKSxcbiAgICBlbGVtZW50czogZWxzLFxuICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgcXVlOiBbXSxcbiAgICBlYXNpbmdQcm9ncmVzczogZnVuY3Rpb24gZWFzaW5nUHJvZ3Jlc3MoZWFzaW5nLCBwcm9ncmVzcykge1xuICAgICAgaWYgKGVhc2luZyA9PT0gJ3N3aW5nJykge1xuICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgaWYgKGEuZnJhbWVJZCkge1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYS5mcmFtZUlkKTtcbiAgICAgIH1cblxuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgYS5xdWUgPSBbXTtcbiAgICB9LFxuICAgIGRvbmU6IGZ1bmN0aW9uIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcblxuICAgICAgaWYgKGEucXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHF1ZSA9IGEucXVlLnNoaWZ0KCk7XG4gICAgICAgIGEuYW5pbWF0ZShxdWVbMF0sIHF1ZVsxXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHByb3BzLCBwYXJhbXMpIHtcbiAgICAgIGlmIChhLmFuaW1hdGluZykge1xuICAgICAgICBhLnF1ZS5wdXNoKFtwcm9wcywgcGFyYW1zXSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudHMgPSBbXTsgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuXG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5pdGlhbEZ1bGxWYWx1ZTtcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZTtcbiAgICAgICAgdmFyIHVuaXQ7XG4gICAgICAgIHZhciBmaW5hbFZhbHVlO1xuICAgICAgICB2YXIgZmluYWxGdWxsVmFsdWU7XG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IHBhcnNlRmxvYXQoaW5pdGlhbEZ1bGxWYWx1ZSk7XG4gICAgICAgICAgdW5pdCA9IGluaXRpYWxGdWxsVmFsdWUucmVwbGFjZShpbml0aWFsVmFsdWUsICcnKTtcbiAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChwcm9wc1twcm9wXSk7XG4gICAgICAgICAgZmluYWxGdWxsVmFsdWUgPSBwcm9wc1twcm9wXSArIHVuaXQ7XG4gICAgICAgICAgZWxlbWVudHNbaW5kZXhdW3Byb3BdID0ge1xuICAgICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZTogaW5pdGlhbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICAgIGZpbmFsVmFsdWU6IGZpbmFsVmFsdWUsXG4gICAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZTogZmluYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IGluaXRpYWxWYWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgIHZhciB0aW1lO1xuICAgICAgdmFyIGVsZW1lbnRzRG9uZSA9IDA7XG4gICAgICB2YXIgcHJvcHNEb25lID0gMDtcbiAgICAgIHZhciBkb25lO1xuICAgICAgdmFyIGJlZ2FuID0gZmFsc2U7XG4gICAgICBhLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgcHJvZ3Jlc3M7XG4gICAgICAgIHZhciBlYXNlUHJvZ3Jlc3M7IC8vIGxldCBlbDtcblxuICAgICAgICBpZiAoIWJlZ2FuKSB7XG4gICAgICAgICAgYmVnYW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChwYXJhbXMuYmVnaW4pIHBhcmFtcy5iZWdpbihlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgcGFyYW1zLnByb2dyZXNzKGVscywgTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCksIHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUgPCAwID8gMCA6IHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUsIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGVsID0gZWxlbWVudDtcbiAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCk7XG4gICAgICAgICAgICBlYXNlUHJvZ3Jlc3MgPSBhLmVhc2luZ1Byb2dyZXNzKHBhcmFtcy5lYXNpbmcsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhciBfZWwkcHJvcCA9IGVsW3Byb3BdLFxuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IF9lbCRwcm9wLmluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gX2VsJHByb3AuZmluYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICB1bml0ID0gX2VsJHByb3AudW5pdDtcbiAgICAgICAgICAgIGVsW3Byb3BdLmN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZSArIGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBlbFtwcm9wXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaW5hbFZhbHVlID4gaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA+PSBmaW5hbFZhbHVlIHx8IGZpbmFsVmFsdWUgPCBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlIDw9IGZpbmFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gZmluYWxWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgICAgIHByb3BzRG9uZSArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChwcm9wc0RvbmUgPT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c0RvbmUgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGEuZG9uZShwYXJhbXMuY29tcGxldGUpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGN1cnJlbnRWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOyAvLyBUaGVuIGNhbGxcblxuICAgICAgICBhLmZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICB9XG5cbiAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfTtcblxuICBpZiAoYS5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxzO1xuICB9XG5cbiAgdmFyIGFuaW1hdGVJbnN0YW5jZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEuZWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBhbmltYXRlSW5zdGFuY2UgPSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgfSBlbHNlIGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoIWFuaW1hdGVJbnN0YW5jZSkge1xuICAgIGFuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoaW5pdGlhbFByb3BzID09PSAnc3RvcCcpIHtcbiAgICBhbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5hbmltYXRlKGEucHJvcHMsIGEucGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBlbHM7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIHZhciBlbHMgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBub1RyaWdnZXIgPSAncmVzaXplIHNjcm9sbCcuc3BsaXQoJyAnKTtcblxuZnVuY3Rpb24gc2hvcnRjdXQobmFtZSkge1xuICBmdW5jdGlvbiBldmVudEhhbmRsZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAobm9UcmlnZ2VyLmluZGV4T2YobmFtZSkgPCAwKSB7XG4gICAgICAgICAgaWYgKG5hbWUgaW4gdGhpc1tpXSkgdGhpc1tpXVtuYW1lXSgpO2Vsc2Uge1xuICAgICAgICAgICAgJCh0aGlzW2ldKS50cmlnZ2VyKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vbi5hcHBseSh0aGlzLCBbbmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfVxuXG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbnZhciBjbGljayA9IHNob3J0Y3V0KCdjbGljaycpO1xudmFyIGJsdXIgPSBzaG9ydGN1dCgnYmx1cicpO1xudmFyIGZvY3VzID0gc2hvcnRjdXQoJ2ZvY3VzJyk7XG52YXIgZm9jdXNpbiA9IHNob3J0Y3V0KCdmb2N1c2luJyk7XG52YXIgZm9jdXNvdXQgPSBzaG9ydGN1dCgnZm9jdXNvdXQnKTtcbnZhciBrZXl1cCA9IHNob3J0Y3V0KCdrZXl1cCcpO1xudmFyIGtleWRvd24gPSBzaG9ydGN1dCgna2V5ZG93bicpO1xudmFyIGtleXByZXNzID0gc2hvcnRjdXQoJ2tleXByZXNzJyk7XG52YXIgc3VibWl0ID0gc2hvcnRjdXQoJ3N1Ym1pdCcpO1xudmFyIGNoYW5nZSA9IHNob3J0Y3V0KCdjaGFuZ2UnKTtcbnZhciBtb3VzZWRvd24gPSBzaG9ydGN1dCgnbW91c2Vkb3duJyk7XG52YXIgbW91c2Vtb3ZlID0gc2hvcnRjdXQoJ21vdXNlbW92ZScpO1xudmFyIG1vdXNldXAgPSBzaG9ydGN1dCgnbW91c2V1cCcpO1xudmFyIG1vdXNlZW50ZXIgPSBzaG9ydGN1dCgnbW91c2VlbnRlcicpO1xudmFyIG1vdXNlbGVhdmUgPSBzaG9ydGN1dCgnbW91c2VsZWF2ZScpO1xudmFyIG1vdXNlb3V0ID0gc2hvcnRjdXQoJ21vdXNlb3V0Jyk7XG52YXIgbW91c2VvdmVyID0gc2hvcnRjdXQoJ21vdXNlb3ZlcicpO1xudmFyIHRvdWNoc3RhcnQgPSBzaG9ydGN1dCgndG91Y2hzdGFydCcpO1xudmFyIHRvdWNoZW5kID0gc2hvcnRjdXQoJ3RvdWNoZW5kJyk7XG52YXIgdG91Y2htb3ZlID0gc2hvcnRjdXQoJ3RvdWNobW92ZScpO1xudmFyIHJlc2l6ZSA9IHNob3J0Y3V0KCdyZXNpemUnKTtcbnZhciBzY3JvbGwgPSBzaG9ydGN1dCgnc2Nyb2xsJyk7XG5cbmV4cG9ydHMuJCA9ICQ7XG5leHBvcnRzLmFkZCA9IGFkZDtcbmV4cG9ydHMuYWRkQ2xhc3MgPSBhZGRDbGFzcztcbmV4cG9ydHMuYW5pbWF0ZSA9IGFuaW1hdGU7XG5leHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMuYXBwZW5kID0gYXBwZW5kO1xuZXhwb3J0cy5hcHBlbmRUbyA9IGFwcGVuZFRvO1xuZXhwb3J0cy5hdHRyID0gYXR0cjtcbmV4cG9ydHMuYmx1ciA9IGJsdXI7XG5leHBvcnRzLmNoYW5nZSA9IGNoYW5nZTtcbmV4cG9ydHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbmV4cG9ydHMuY2xpY2sgPSBjbGljaztcbmV4cG9ydHMuY2xvc2VzdCA9IGNsb3Nlc3Q7XG5leHBvcnRzLmNzcyA9IGNzcztcbmV4cG9ydHMuZGF0YSA9IGRhdGE7XG5leHBvcnRzLmRhdGFzZXQgPSBkYXRhc2V0O1xuZXhwb3J0cy5kZWZhdWx0ID0gJDtcbmV4cG9ydHMuZGV0YWNoID0gZGV0YWNoO1xuZXhwb3J0cy5lYWNoID0gZWFjaDtcbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmV4cG9ydHMuZXEgPSBlcTtcbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuZXhwb3J0cy5maW5kID0gZmluZDtcbmV4cG9ydHMuZm9jdXMgPSBmb2N1cztcbmV4cG9ydHMuZm9jdXNpbiA9IGZvY3VzaW47XG5leHBvcnRzLmZvY3Vzb3V0ID0gZm9jdXNvdXQ7XG5leHBvcnRzLmhhc0NsYXNzID0gaGFzQ2xhc3M7XG5leHBvcnRzLmhlaWdodCA9IGhlaWdodDtcbmV4cG9ydHMuaGlkZSA9IGhpZGU7XG5leHBvcnRzLmh0bWwgPSBodG1sO1xuZXhwb3J0cy5pbmRleCA9IGluZGV4O1xuZXhwb3J0cy5pbnNlcnRBZnRlciA9IGluc2VydEFmdGVyO1xuZXhwb3J0cy5pbnNlcnRCZWZvcmUgPSBpbnNlcnRCZWZvcmU7XG5leHBvcnRzLmlzID0gaXM7XG5leHBvcnRzLmtleWRvd24gPSBrZXlkb3duO1xuZXhwb3J0cy5rZXlwcmVzcyA9IGtleXByZXNzO1xuZXhwb3J0cy5rZXl1cCA9IGtleXVwO1xuZXhwb3J0cy5tb3VzZWRvd24gPSBtb3VzZWRvd247XG5leHBvcnRzLm1vdXNlZW50ZXIgPSBtb3VzZWVudGVyO1xuZXhwb3J0cy5tb3VzZWxlYXZlID0gbW91c2VsZWF2ZTtcbmV4cG9ydHMubW91c2Vtb3ZlID0gbW91c2Vtb3ZlO1xuZXhwb3J0cy5tb3VzZW91dCA9IG1vdXNlb3V0O1xuZXhwb3J0cy5tb3VzZW92ZXIgPSBtb3VzZW92ZXI7XG5leHBvcnRzLm1vdXNldXAgPSBtb3VzZXVwO1xuZXhwb3J0cy5uZXh0ID0gbmV4dDtcbmV4cG9ydHMubmV4dEFsbCA9IG5leHRBbGw7XG5leHBvcnRzLm9mZiA9IG9mZjtcbmV4cG9ydHMub2Zmc2V0ID0gb2Zmc2V0O1xuZXhwb3J0cy5vbiA9IG9uO1xuZXhwb3J0cy5vbmNlID0gb25jZTtcbmV4cG9ydHMub3V0ZXJIZWlnaHQgPSBvdXRlckhlaWdodDtcbmV4cG9ydHMub3V0ZXJXaWR0aCA9IG91dGVyV2lkdGg7XG5leHBvcnRzLnBhcmVudCA9IHBhcmVudDtcbmV4cG9ydHMucGFyZW50cyA9IHBhcmVudHM7XG5leHBvcnRzLnByZXBlbmQgPSBwcmVwZW5kO1xuZXhwb3J0cy5wcmVwZW5kVG8gPSBwcmVwZW5kVG87XG5leHBvcnRzLnByZXYgPSBwcmV2O1xuZXhwb3J0cy5wcmV2QWxsID0gcHJldkFsbDtcbmV4cG9ydHMucHJvcCA9IHByb3A7XG5leHBvcnRzLnJlbW92ZSA9IHJlbW92ZTtcbmV4cG9ydHMucmVtb3ZlQXR0ciA9IHJlbW92ZUF0dHI7XG5leHBvcnRzLnJlbW92ZUNsYXNzID0gcmVtb3ZlQ2xhc3M7XG5leHBvcnRzLnJlbW92ZURhdGEgPSByZW1vdmVEYXRhO1xuZXhwb3J0cy5yZXNpemUgPSByZXNpemU7XG5leHBvcnRzLnNjcm9sbCA9IHNjcm9sbDtcbmV4cG9ydHMuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG5leHBvcnRzLnNjcm9sbFRvID0gc2Nyb2xsVG87XG5leHBvcnRzLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbmV4cG9ydHMuc2hvdyA9IHNob3c7XG5leHBvcnRzLnNpYmxpbmdzID0gc2libGluZ3M7XG5leHBvcnRzLnN0b3AgPSBzdG9wO1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5leHBvcnRzLnN1Ym1pdCA9IHN1Ym1pdDtcbmV4cG9ydHMudGV4dCA9IHRleHQ7XG5leHBvcnRzLnRvZ2dsZUNsYXNzID0gdG9nZ2xlQ2xhc3M7XG5leHBvcnRzLnRvdWNoZW5kID0gdG91Y2hlbmQ7XG5leHBvcnRzLnRvdWNobW92ZSA9IHRvdWNobW92ZTtcbmV4cG9ydHMudG91Y2hzdGFydCA9IHRvdWNoc3RhcnQ7XG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbmV4cG9ydHMudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG5leHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kO1xuZXhwb3J0cy50cmlnZ2VyID0gdHJpZ2dlcjtcbmV4cG9ydHMudmFsID0gdmFsO1xuZXhwb3J0cy52YWx1ZSA9IHZhbHVlO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuXG59LHtcInNzci13aW5kb3dcIjo1fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24od2luZG93LCBmYWN0b3J5KSB7XG5cdHZhciBsYXp5U2l6ZXMgPSBmYWN0b3J5KHdpbmRvdywgd2luZG93LmRvY3VtZW50LCBEYXRlKTtcblx0d2luZG93LmxhenlTaXplcyA9IGxhenlTaXplcztcblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBsYXp5U2l6ZXM7XG5cdH1cbn0odHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/XG4gICAgICB3aW5kb3cgOiB7fSwgZnVuY3Rpb24gbCh3aW5kb3csIGRvY3VtZW50LCBEYXRlKSB7IC8vIFBhc3MgaW4gdGhlIHdpbmRvZSBEYXRlIGZ1bmN0aW9uIGFsc28gZm9yIFNTUiBiZWNhdXNlIHRoZSBEYXRlIGNsYXNzIGNhbiBiZSBsb3N0XG5cdCd1c2Ugc3RyaWN0Jztcblx0Lypqc2hpbnQgZXFudWxsOnRydWUgKi9cblxuXHR2YXIgbGF6eXNpemVzLCBsYXp5U2l6ZXNDZmc7XG5cblx0KGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByb3A7XG5cblx0XHR2YXIgbGF6eVNpemVzRGVmYXVsdHMgPSB7XG5cdFx0XHRsYXp5Q2xhc3M6ICdsYXp5bG9hZCcsXG5cdFx0XHRsb2FkZWRDbGFzczogJ2xhenlsb2FkZWQnLFxuXHRcdFx0bG9hZGluZ0NsYXNzOiAnbGF6eWxvYWRpbmcnLFxuXHRcdFx0cHJlbG9hZENsYXNzOiAnbGF6eXByZWxvYWQnLFxuXHRcdFx0ZXJyb3JDbGFzczogJ2xhenllcnJvcicsXG5cdFx0XHQvL3N0cmljdENsYXNzOiAnbGF6eXN0cmljdCcsXG5cdFx0XHRhdXRvc2l6ZXNDbGFzczogJ2xhenlhdXRvc2l6ZXMnLFxuXHRcdFx0ZmFzdExvYWRlZENsYXNzOiAnbHMtaXMtY2FjaGVkJyxcblx0XHRcdGlmcmFtZUxvYWRNb2RlOiAwLFxuXHRcdFx0c3JjQXR0cjogJ2RhdGEtc3JjJyxcblx0XHRcdHNyY3NldEF0dHI6ICdkYXRhLXNyY3NldCcsXG5cdFx0XHRzaXplc0F0dHI6ICdkYXRhLXNpemVzJyxcblx0XHRcdC8vcHJlbG9hZEFmdGVyTG9hZDogZmFsc2UsXG5cdFx0XHRtaW5TaXplOiA0MCxcblx0XHRcdGN1c3RvbU1lZGlhOiB7fSxcblx0XHRcdGluaXQ6IHRydWUsXG5cdFx0XHRleHBGYWN0b3I6IDEuNSxcblx0XHRcdGhGYWM6IDAuOCxcblx0XHRcdGxvYWRNb2RlOiAyLFxuXHRcdFx0bG9hZEhpZGRlbjogdHJ1ZSxcblx0XHRcdHJpY1RpbWVvdXQ6IDAsXG5cdFx0XHR0aHJvdHRsZURlbGF5OiAxMjUsXG5cdFx0fTtcblxuXHRcdGxhenlTaXplc0NmZyA9IHdpbmRvdy5sYXp5U2l6ZXNDb25maWcgfHwgd2luZG93LmxhenlzaXplc0NvbmZpZyB8fCB7fTtcblxuXHRcdGZvcihwcm9wIGluIGxhenlTaXplc0RlZmF1bHRzKXtcblx0XHRcdGlmKCEocHJvcCBpbiBsYXp5U2l6ZXNDZmcpKXtcblx0XHRcdFx0bGF6eVNpemVzQ2ZnW3Byb3BdID0gbGF6eVNpemVzRGVmYXVsdHNbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9KSgpO1xuXG5cdGlmICghZG9jdW1lbnQgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5pdDogZnVuY3Rpb24gKCkge30sXG5cdFx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRcdG5vU3VwcG9ydDogdHJ1ZSxcblx0XHR9O1xuXHR9XG5cblx0dmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblx0dmFyIHN1cHBvcnRQaWN0dXJlID0gd2luZG93LkhUTUxQaWN0dXJlRWxlbWVudDtcblxuXHR2YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSAnYWRkRXZlbnRMaXN0ZW5lcic7XG5cblx0dmFyIF9nZXRBdHRyaWJ1dGUgPSAnZ2V0QXR0cmlidXRlJztcblxuXHQvKipcblx0ICogVXBkYXRlIHRvIGJpbmQgdG8gd2luZG93IGJlY2F1c2UgJ3RoaXMnIGJlY29tZXMgbnVsbCBkdXJpbmcgU1NSXG5cdCAqIGJ1aWxkcy5cblx0ICovXG5cdHZhciBhZGRFdmVudExpc3RlbmVyID0gd2luZG93W19hZGRFdmVudExpc3RlbmVyXS5iaW5kKHdpbmRvdyk7XG5cblx0dmFyIHNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dDtcblxuXHR2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBzZXRUaW1lb3V0O1xuXG5cdHZhciByZXF1ZXN0SWRsZUNhbGxiYWNrID0gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2s7XG5cblx0dmFyIHJlZ1BpY3R1cmUgPSAvXnBpY3R1cmUkL2k7XG5cblx0dmFyIGxvYWRFdmVudHMgPSBbJ2xvYWQnLCAnZXJyb3InLCAnbGF6eWluY2x1ZGVkJywgJ19sYXp5bG9hZGVkJ107XG5cblx0dmFyIHJlZ0NsYXNzQ2FjaGUgPSB7fTtcblxuXHR2YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5cdHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0aWYoIXJlZ0NsYXNzQ2FjaGVbY2xzXSl7XG5cdFx0XHRyZWdDbGFzc0NhY2hlW2Nsc10gPSBuZXcgUmVnRXhwKCcoXFxcXHN8XiknK2NscysnKFxcXFxzfCQpJyk7XG5cdFx0fVxuXHRcdHJldHVybiByZWdDbGFzc0NhY2hlW2Nsc10udGVzdChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpICYmIHJlZ0NsYXNzQ2FjaGVbY2xzXTtcblx0fTtcblxuXHR2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdGlmICghaGFzQ2xhc3MoZWxlLCBjbHMpKXtcblx0XHRcdGVsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykudHJpbSgpICsgJyAnICsgY2xzKTtcblx0XHR9XG5cdH07XG5cblx0dmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHR2YXIgcmVnO1xuXHRcdGlmICgocmVnID0gaGFzQ2xhc3MoZWxlLGNscykpKSB7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnJlcGxhY2UocmVnLCAnICcpKTtcblx0XHR9XG5cdH07XG5cblx0dmFyIGFkZFJlbW92ZUxvYWRFdmVudHMgPSBmdW5jdGlvbihkb20sIGZuLCBhZGQpe1xuXHRcdHZhciBhY3Rpb24gPSBhZGQgPyBfYWRkRXZlbnRMaXN0ZW5lciA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcblx0XHRpZihhZGQpe1xuXHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhkb20sIGZuKTtcblx0XHR9XG5cdFx0bG9hZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHRkb21bYWN0aW9uXShldnQsIGZuKTtcblx0XHR9KTtcblx0fTtcblxuXHR2YXIgdHJpZ2dlckV2ZW50ID0gZnVuY3Rpb24oZWxlbSwgbmFtZSwgZGV0YWlsLCBub0J1YmJsZXMsIG5vQ2FuY2VsYWJsZSl7XG5cdFx0dmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cblx0XHRpZighZGV0YWlsKXtcblx0XHRcdGRldGFpbCA9IHt9O1xuXHRcdH1cblxuXHRcdGRldGFpbC5pbnN0YW5jZSA9IGxhenlzaXplcztcblxuXHRcdGV2ZW50LmluaXRFdmVudChuYW1lLCAhbm9CdWJibGVzLCAhbm9DYW5jZWxhYmxlKTtcblxuXHRcdGV2ZW50LmRldGFpbCA9IGRldGFpbDtcblxuXHRcdGVsZW0uZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0cmV0dXJuIGV2ZW50O1xuXHR9O1xuXG5cdHZhciB1cGRhdGVQb2x5ZmlsbCA9IGZ1bmN0aW9uIChlbCwgZnVsbCl7XG5cdFx0dmFyIHBvbHlmaWxsO1xuXHRcdGlmKCAhc3VwcG9ydFBpY3R1cmUgJiYgKCBwb2x5ZmlsbCA9ICh3aW5kb3cucGljdHVyZWZpbGwgfHwgbGF6eVNpemVzQ2ZnLnBmKSApICl7XG5cdFx0XHRpZihmdWxsICYmIGZ1bGwuc3JjICYmICFlbFtfZ2V0QXR0cmlidXRlXSgnc3Jjc2V0Jykpe1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIGZ1bGwuc3JjKTtcblx0XHRcdH1cblx0XHRcdHBvbHlmaWxsKHtyZWV2YWx1YXRlOiB0cnVlLCBlbGVtZW50czogW2VsXX0pO1xuXHRcdH0gZWxzZSBpZihmdWxsICYmIGZ1bGwuc3JjKXtcblx0XHRcdGVsLnNyYyA9IGZ1bGwuc3JjO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgZ2V0Q1NTID0gZnVuY3Rpb24gKGVsZW0sIHN0eWxlKXtcblx0XHRyZXR1cm4gKGdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCkgfHwge30pW3N0eWxlXTtcblx0fTtcblxuXHR2YXIgZ2V0V2lkdGggPSBmdW5jdGlvbihlbGVtLCBwYXJlbnQsIHdpZHRoKXtcblx0XHR3aWR0aCA9IHdpZHRoIHx8IGVsZW0ub2Zmc2V0V2lkdGg7XG5cblx0XHR3aGlsZSh3aWR0aCA8IGxhenlTaXplc0NmZy5taW5TaXplICYmIHBhcmVudCAmJiAhZWxlbS5fbGF6eXNpemVzV2lkdGgpe1xuXHRcdFx0d2lkdGggPSAgcGFyZW50Lm9mZnNldFdpZHRoO1xuXHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9O1xuXG5cdHZhciByQUYgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcnVubmluZywgd2FpdGluZztcblx0XHR2YXIgZmlyc3RGbnMgPSBbXTtcblx0XHR2YXIgc2Vjb25kRm5zID0gW107XG5cdFx0dmFyIGZucyA9IGZpcnN0Rm5zO1xuXG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgcnVuRm5zID0gZm5zO1xuXG5cdFx0XHRmbnMgPSBmaXJzdEZucy5sZW5ndGggPyBzZWNvbmRGbnMgOiBmaXJzdEZucztcblxuXHRcdFx0cnVubmluZyA9IHRydWU7XG5cdFx0XHR3YWl0aW5nID0gZmFsc2U7XG5cblx0XHRcdHdoaWxlKHJ1bkZucy5sZW5ndGgpe1xuXHRcdFx0XHRydW5GbnMuc2hpZnQoKSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHZhciByYWZCYXRjaCA9IGZ1bmN0aW9uKGZuLCBxdWV1ZSl7XG5cdFx0XHRpZihydW5uaW5nICYmICFxdWV1ZSl7XG5cdFx0XHRcdGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbnMucHVzaChmbik7XG5cblx0XHRcdFx0aWYoIXdhaXRpbmcpe1xuXHRcdFx0XHRcdHdhaXRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdChkb2N1bWVudC5oaWRkZW4gPyBzZXRUaW1lb3V0IDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKShydW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJhZkJhdGNoLl9sc0ZsdXNoID0gcnVuO1xuXG5cdFx0cmV0dXJuIHJhZkJhdGNoO1xuXHR9KSgpO1xuXG5cdHZhciByQUZJdCA9IGZ1bmN0aW9uKGZuLCBzaW1wbGUpe1xuXHRcdHJldHVybiBzaW1wbGUgP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJBRihmbik7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRcdFx0dmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdFx0XHRcdHJBRihmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHQ7XG5cdH07XG5cblx0dmFyIHRocm90dGxlID0gZnVuY3Rpb24oZm4pe1xuXHRcdHZhciBydW5uaW5nO1xuXHRcdHZhciBsYXN0VGltZSA9IDA7XG5cdFx0dmFyIGdEZWxheSA9IGxhenlTaXplc0NmZy50aHJvdHRsZURlbGF5O1xuXHRcdHZhciBySUNUaW1lb3V0ID0gbGF6eVNpemVzQ2ZnLnJpY1RpbWVvdXQ7XG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0XHRsYXN0VGltZSA9IERhdGUubm93KCk7XG5cdFx0XHRmbigpO1xuXHRcdH07XG5cdFx0dmFyIGlkbGVDYWxsYmFjayA9IHJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgcklDVGltZW91dCA+IDQ5ID9cblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJlcXVlc3RJZGxlQ2FsbGJhY2socnVuLCB7dGltZW91dDogcklDVGltZW91dH0pO1xuXG5cdFx0XHRcdGlmKHJJQ1RpbWVvdXQgIT09IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0KXtcblx0XHRcdFx0XHRySUNUaW1lb3V0ID0gbGF6eVNpemVzQ2ZnLnJpY1RpbWVvdXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gOlxuXHRcdFx0ckFGSXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0c2V0VGltZW91dChydW4pO1xuXHRcdFx0fSwgdHJ1ZSlcblx0XHQ7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oaXNQcmlvcml0eSl7XG5cdFx0XHR2YXIgZGVsYXk7XG5cblx0XHRcdGlmKChpc1ByaW9yaXR5ID0gaXNQcmlvcml0eSA9PT0gdHJ1ZSkpe1xuXHRcdFx0XHRySUNUaW1lb3V0ID0gMzM7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHJ1bm5pbmcpe1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJ1bm5pbmcgPSAgdHJ1ZTtcblxuXHRcdFx0ZGVsYXkgPSBnRGVsYXkgLSAoRGF0ZS5ub3coKSAtIGxhc3RUaW1lKTtcblxuXHRcdFx0aWYoZGVsYXkgPCAwKXtcblx0XHRcdFx0ZGVsYXkgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihpc1ByaW9yaXR5IHx8IGRlbGF5IDwgOSl7XG5cdFx0XHRcdGlkbGVDYWxsYmFjaygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2V0VGltZW91dChpZGxlQ2FsbGJhY2ssIGRlbGF5KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdC8vYmFzZWQgb24gaHR0cDovL21vZGVybmphdmFzY3JpcHQuYmxvZ3Nwb3QuZGUvMjAxMy8wOC9idWlsZGluZy1iZXR0ZXItZGVib3VuY2UuaHRtbFxuXHR2YXIgZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jKSB7XG5cdFx0dmFyIHRpbWVvdXQsIHRpbWVzdGFtcDtcblx0XHR2YXIgd2FpdCA9IDk5O1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRmdW5jKCk7XG5cdFx0fTtcblx0XHR2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0ID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcDtcblxuXHRcdFx0aWYgKGxhc3QgPCB3YWl0KSB7XG5cdFx0XHRcdHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdChyZXF1ZXN0SWRsZUNhbGxiYWNrIHx8IHJ1bikocnVuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0aWYgKCF0aW1lb3V0KSB7XG5cdFx0XHRcdHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdHZhciBsb2FkZXIgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcHJlbG9hZEVsZW1zLCBpc0NvbXBsZXRlZCwgcmVzZXRQcmVsb2FkaW5nVGltZXIsIGxvYWRNb2RlLCBzdGFydGVkO1xuXG5cdFx0dmFyIGVMdlcsIGVsdkgsIGVMdG9wLCBlTGxlZnQsIGVMcmlnaHQsIGVMYm90dG9tLCBpc0JvZHlIaWRkZW47XG5cblx0XHR2YXIgcmVnSW1nID0gL15pbWckL2k7XG5cdFx0dmFyIHJlZ0lmcmFtZSA9IC9eaWZyYW1lJC9pO1xuXG5cdFx0dmFyIHN1cHBvcnRTY3JvbGwgPSAoJ29uc2Nyb2xsJyBpbiB3aW5kb3cpICYmICEoLyhnbGV8aW5nKWJvdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSk7XG5cblx0XHR2YXIgc2hyaW5rRXhwYW5kID0gMDtcblx0XHR2YXIgY3VycmVudEV4cGFuZCA9IDA7XG5cblx0XHR2YXIgaXNMb2FkaW5nID0gMDtcblx0XHR2YXIgbG93UnVucyA9IC0xO1xuXG5cdFx0dmFyIHJlc2V0UHJlbG9hZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aXNMb2FkaW5nLS07XG5cdFx0XHRpZighZSB8fCBpc0xvYWRpbmcgPCAwIHx8ICFlLnRhcmdldCl7XG5cdFx0XHRcdGlzTG9hZGluZyA9IDA7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBpc1Zpc2libGUgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0aWYgKGlzQm9keUhpZGRlbiA9PSBudWxsKSB7XG5cdFx0XHRcdGlzQm9keUhpZGRlbiA9IGdldENTUyhkb2N1bWVudC5ib2R5LCAndmlzaWJpbGl0eScpID09ICdoaWRkZW4nO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaXNCb2R5SGlkZGVuIHx8ICEoZ2V0Q1NTKGVsZW0ucGFyZW50Tm9kZSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJyAmJiBnZXRDU1MoZWxlbSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJyk7XG5cdFx0fTtcblxuXHRcdHZhciBpc05lc3RlZFZpc2libGUgPSBmdW5jdGlvbihlbGVtLCBlbGVtRXhwYW5kKXtcblx0XHRcdHZhciBvdXRlclJlY3Q7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbTtcblx0XHRcdHZhciB2aXNpYmxlID0gaXNWaXNpYmxlKGVsZW0pO1xuXG5cdFx0XHRlTHRvcCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxib3R0b20gKz0gZWxlbUV4cGFuZDtcblx0XHRcdGVMbGVmdCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxyaWdodCArPSBlbGVtRXhwYW5kO1xuXG5cdFx0XHR3aGlsZSh2aXNpYmxlICYmIChwYXJlbnQgPSBwYXJlbnQub2Zmc2V0UGFyZW50KSAmJiBwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSAmJiBwYXJlbnQgIT0gZG9jRWxlbSl7XG5cdFx0XHRcdHZpc2libGUgPSAoKGdldENTUyhwYXJlbnQsICdvcGFjaXR5JykgfHwgMSkgPiAwKTtcblxuXHRcdFx0XHRpZih2aXNpYmxlICYmIGdldENTUyhwYXJlbnQsICdvdmVyZmxvdycpICE9ICd2aXNpYmxlJyl7XG5cdFx0XHRcdFx0b3V0ZXJSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdHZpc2libGUgPSBlTHJpZ2h0ID4gb3V0ZXJSZWN0LmxlZnQgJiZcblx0XHRcdFx0XHRcdGVMbGVmdCA8IG91dGVyUmVjdC5yaWdodCAmJlxuXHRcdFx0XHRcdFx0ZUxib3R0b20gPiBvdXRlclJlY3QudG9wIC0gMSAmJlxuXHRcdFx0XHRcdFx0ZUx0b3AgPCBvdXRlclJlY3QuYm90dG9tICsgMVxuXHRcdFx0XHRcdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmlzaWJsZTtcblx0XHR9O1xuXG5cdFx0dmFyIGNoZWNrRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlTGxlbiwgaSwgcmVjdCwgYXV0b0xvYWRFbGVtLCBsb2FkZWRTb21ldGhpbmcsIGVsZW1FeHBhbmQsIGVsZW1OZWdhdGl2ZUV4cGFuZCwgZWxlbUV4cGFuZFZhbCxcblx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsLCBkZWZhdWx0RXhwYW5kLCBwcmVsb2FkRXhwYW5kLCBoRmFjO1xuXHRcdFx0dmFyIGxhenlsb2FkRWxlbXMgPSBsYXp5c2l6ZXMuZWxlbWVudHM7XG5cblx0XHRcdGlmKChsb2FkTW9kZSA9IGxhenlTaXplc0NmZy5sb2FkTW9kZSkgJiYgaXNMb2FkaW5nIDwgOCAmJiAoZUxsZW4gPSBsYXp5bG9hZEVsZW1zLmxlbmd0aCkpe1xuXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRcdGxvd1J1bnMrKztcblxuXHRcdFx0XHRmb3IoOyBpIDwgZUxsZW47IGkrKyl7XG5cblx0XHRcdFx0XHRpZighbGF6eWxvYWRFbGVtc1tpXSB8fCBsYXp5bG9hZEVsZW1zW2ldLl9sYXp5UmFjZSl7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIXN1cHBvcnRTY3JvbGwgfHwgKGxhenlzaXplcy5wcmVtYXR1cmVVbnZlaWwgJiYgbGF6eXNpemVzLnByZW1hdHVyZVVudmVpbChsYXp5bG9hZEVsZW1zW2ldKSkpe3VudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIShlbGVtRXhwYW5kVmFsID0gbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXSgnZGF0YS1leHBhbmQnKSkgfHwgIShlbGVtRXhwYW5kID0gZWxlbUV4cGFuZFZhbCAqIDEpKXtcblx0XHRcdFx0XHRcdGVsZW1FeHBhbmQgPSBjdXJyZW50RXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghZGVmYXVsdEV4cGFuZCkge1xuXHRcdFx0XHRcdFx0ZGVmYXVsdEV4cGFuZCA9ICghbGF6eVNpemVzQ2ZnLmV4cGFuZCB8fCBsYXp5U2l6ZXNDZmcuZXhwYW5kIDwgMSkgP1xuXHRcdFx0XHRcdFx0XHRkb2NFbGVtLmNsaWVudEhlaWdodCA+IDUwMCAmJiBkb2NFbGVtLmNsaWVudFdpZHRoID4gNTAwID8gNTAwIDogMzcwIDpcblx0XHRcdFx0XHRcdFx0bGF6eVNpemVzQ2ZnLmV4cGFuZDtcblxuXHRcdFx0XHRcdFx0bGF6eXNpemVzLl9kZWZFeCA9IGRlZmF1bHRFeHBhbmQ7XG5cblx0XHRcdFx0XHRcdHByZWxvYWRFeHBhbmQgPSBkZWZhdWx0RXhwYW5kICogbGF6eVNpemVzQ2ZnLmV4cEZhY3Rvcjtcblx0XHRcdFx0XHRcdGhGYWMgPSBsYXp5U2l6ZXNDZmcuaEZhYztcblx0XHRcdFx0XHRcdGlzQm9keUhpZGRlbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdGlmKGN1cnJlbnRFeHBhbmQgPCBwcmVsb2FkRXhwYW5kICYmIGlzTG9hZGluZyA8IDEgJiYgbG93UnVucyA+IDIgJiYgbG9hZE1vZGUgPiAyICYmICFkb2N1bWVudC5oaWRkZW4pe1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gcHJlbG9hZEV4cGFuZDtcblx0XHRcdFx0XHRcdFx0bG93UnVucyA9IDA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYobG9hZE1vZGUgPiAxICYmIGxvd1J1bnMgPiAxICYmIGlzTG9hZGluZyA8IDYpe1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gZGVmYXVsdEV4cGFuZDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBzaHJpbmtFeHBhbmQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoYmVmb3JlRXhwYW5kVmFsICE9PSBlbGVtRXhwYW5kKXtcblx0XHRcdFx0XHRcdGVMdlcgPSBpbm5lcldpZHRoICsgKGVsZW1FeHBhbmQgKiBoRmFjKTtcblx0XHRcdFx0XHRcdGVsdkggPSBpbm5lckhlaWdodCArIGVsZW1FeHBhbmQ7XG5cdFx0XHRcdFx0XHRlbGVtTmVnYXRpdmVFeHBhbmQgPSBlbGVtRXhwYW5kICogLTE7XG5cdFx0XHRcdFx0XHRiZWZvcmVFeHBhbmRWYWwgPSBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlY3QgPSBsYXp5bG9hZEVsZW1zW2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRcdFx0aWYgKChlTGJvdHRvbSA9IHJlY3QuYm90dG9tKSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgJiZcblx0XHRcdFx0XHRcdChlTHRvcCA9IHJlY3QudG9wKSA8PSBlbHZIICYmXG5cdFx0XHRcdFx0XHQoZUxyaWdodCA9IHJlY3QucmlnaHQpID49IGVsZW1OZWdhdGl2ZUV4cGFuZCAqIGhGYWMgJiZcblx0XHRcdFx0XHRcdChlTGxlZnQgPSByZWN0LmxlZnQpIDw9IGVMdlcgJiZcblx0XHRcdFx0XHRcdChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgJiZcblx0XHRcdFx0XHRcdChsYXp5U2l6ZXNDZmcubG9hZEhpZGRlbiB8fCBpc1Zpc2libGUobGF6eWxvYWRFbGVtc1tpXSkpICYmXG5cdFx0XHRcdFx0XHQoKGlzQ29tcGxldGVkICYmIGlzTG9hZGluZyA8IDMgJiYgIWVsZW1FeHBhbmRWYWwgJiYgKGxvYWRNb2RlIDwgMyB8fCBsb3dSdW5zIDwgNCkpIHx8IGlzTmVzdGVkVmlzaWJsZShsYXp5bG9hZEVsZW1zW2ldLCBlbGVtRXhwYW5kKSkpe1xuXHRcdFx0XHRcdFx0dW52ZWlsRWxlbWVudChsYXp5bG9hZEVsZW1zW2ldKTtcblx0XHRcdFx0XHRcdGxvYWRlZFNvbWV0aGluZyA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZihpc0xvYWRpbmcgPiA5KXticmVhazt9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCFsb2FkZWRTb21ldGhpbmcgJiYgaXNDb21wbGV0ZWQgJiYgIWF1dG9Mb2FkRWxlbSAmJlxuXHRcdFx0XHRcdFx0aXNMb2FkaW5nIDwgNCAmJiBsb3dSdW5zIDwgNCAmJiBsb2FkTW9kZSA+IDIgJiZcblx0XHRcdFx0XHRcdChwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eVNpemVzQ2ZnLnByZWxvYWRBZnRlckxvYWQpICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8ICghZWxlbUV4cGFuZFZhbCAmJiAoKGVMYm90dG9tIHx8IGVMcmlnaHQgfHwgZUxsZWZ0IHx8IGVMdG9wKSB8fCBsYXp5bG9hZEVsZW1zW2ldW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zaXplc0F0dHIpICE9ICdhdXRvJykpKSl7XG5cdFx0XHRcdFx0XHRhdXRvTG9hZEVsZW0gPSBwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eWxvYWRFbGVtc1tpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihhdXRvTG9hZEVsZW0gJiYgIWxvYWRlZFNvbWV0aGluZyl7XG5cdFx0XHRcdFx0dW52ZWlsRWxlbWVudChhdXRvTG9hZEVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciB0aHJvdHRsZWRDaGVja0VsZW1lbnRzID0gdGhyb3R0bGUoY2hlY2tFbGVtZW50cyk7XG5cblx0XHR2YXIgc3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgZWxlbSA9IGUudGFyZ2V0O1xuXG5cdFx0XHRpZiAoZWxlbS5fbGF6eUNhY2hlKSB7XG5cdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5Q2FjaGU7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cmVzZXRQcmVsb2FkaW5nKGUpO1xuXHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxvYWRlZENsYXNzKTtcblx0XHRcdHJlbW92ZUNsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlbGVtLCByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdFx0dHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5bG9hZGVkJyk7XG5cdFx0fTtcblx0XHR2YXIgcmFmZWRTd2l0Y2hMb2FkaW5nQ2xhc3MgPSByQUZJdChzd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdHZhciByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MgPSBmdW5jdGlvbihlKXtcblx0XHRcdHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzKHt0YXJnZXQ6IGUudGFyZ2V0fSk7XG5cdFx0fTtcblxuXHRcdHZhciBjaGFuZ2VJZnJhbWVTcmMgPSBmdW5jdGlvbihlbGVtLCBzcmMpe1xuXHRcdFx0dmFyIGxvYWRNb2RlID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbG9hZC1tb2RlJykgfHwgbGF6eVNpemVzQ2ZnLmlmcmFtZUxvYWRNb2RlO1xuXG5cdFx0XHQvLyBsb2FkTW9kZSBjYW4gYmUgYWxzbyBhIHN0cmluZyFcblx0XHRcdGlmIChsb2FkTW9kZSA9PSAwKSB7XG5cdFx0XHRcdGVsZW0uY29udGVudFdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHNyYyk7XG5cdFx0XHR9IGVsc2UgaWYgKGxvYWRNb2RlID09IDEpIHtcblx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBoYW5kbGVTb3VyY2VzID0gZnVuY3Rpb24oc291cmNlKXtcblx0XHRcdHZhciBjdXN0b21NZWRpYTtcblxuXHRcdFx0dmFyIHNvdXJjZVNyY3NldCA9IHNvdXJjZVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3Jjc2V0QXR0cik7XG5cblx0XHRcdGlmKCAoY3VzdG9tTWVkaWEgPSBsYXp5U2l6ZXNDZmcuY3VzdG9tTWVkaWFbc291cmNlW19nZXRBdHRyaWJ1dGVdKCdkYXRhLW1lZGlhJykgfHwgc291cmNlW19nZXRBdHRyaWJ1dGVdKCdtZWRpYScpXSkgKXtcblx0XHRcdFx0c291cmNlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBjdXN0b21NZWRpYSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHNvdXJjZVNyY3NldCl7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIHNvdXJjZVNyY3NldCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBsYXp5VW52ZWlsID0gckFGSXQoZnVuY3Rpb24gKGVsZW0sIGRldGFpbCwgaXNBdXRvLCBzaXplcywgaXNJbWcpe1xuXHRcdFx0dmFyIHNyYywgc3Jjc2V0LCBwYXJlbnQsIGlzUGljdHVyZSwgZXZlbnQsIGZpcmVzTG9hZDtcblxuXHRcdFx0aWYoIShldmVudCA9IHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWJlZm9yZXVudmVpbCcsIGRldGFpbCkpLmRlZmF1bHRQcmV2ZW50ZWQpe1xuXG5cdFx0XHRcdGlmKHNpemVzKXtcblx0XHRcdFx0XHRpZihpc0F1dG8pe1xuXHRcdFx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgc2l6ZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNyY3NldCA9IGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY3NldEF0dHIpO1xuXHRcdFx0XHRzcmMgPSBlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNBdHRyKTtcblxuXHRcdFx0XHRpZihpc0ltZykge1xuXHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpc1BpY3R1cmUgPSBwYXJlbnQgJiYgcmVnUGljdHVyZS50ZXN0KHBhcmVudC5ub2RlTmFtZSB8fCAnJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmaXJlc0xvYWQgPSBkZXRhaWwuZmlyZXNMb2FkIHx8ICgoJ3NyYycgaW4gZWxlbSkgJiYgKHNyY3NldCB8fCBzcmMgfHwgaXNQaWN0dXJlKSk7XG5cblx0XHRcdFx0ZXZlbnQgPSB7dGFyZ2V0OiBlbGVtfTtcblxuXHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0XHRpZihmaXJlc0xvYWQpe1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dChyZXNldFByZWxvYWRpbmdUaW1lcik7XG5cdFx0XHRcdFx0cmVzZXRQcmVsb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KHJlc2V0UHJlbG9hZGluZywgMjUwMCk7XG5cdFx0XHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlbGVtLCByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MsIHRydWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoaXNQaWN0dXJlKXtcblx0XHRcdFx0XHRmb3JFYWNoLmNhbGwocGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKSwgaGFuZGxlU291cmNlcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihzcmNzZXQpe1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzcmNzZXQpO1xuXHRcdFx0XHR9IGVsc2UgaWYoc3JjICYmICFpc1BpY3R1cmUpe1xuXHRcdFx0XHRcdGlmKHJlZ0lmcmFtZS50ZXN0KGVsZW0ubm9kZU5hbWUpKXtcblx0XHRcdFx0XHRcdGNoYW5nZUlmcmFtZVNyYyhlbGVtLCBzcmMpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNyYyA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihpc0ltZyAmJiAoc3Jjc2V0IHx8IGlzUGljdHVyZSkpe1xuXHRcdFx0XHRcdHVwZGF0ZVBvbHlmaWxsKGVsZW0sIHtzcmM6IHNyY30pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKGVsZW0uX2xhenlSYWNlKXtcblx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlSYWNlO1xuXHRcdFx0fVxuXHRcdFx0cmVtb3ZlQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxhenlDbGFzcyk7XG5cblx0XHRcdHJBRihmdW5jdGlvbigpe1xuXHRcdFx0XHQvLyBQYXJ0IG9mIHRoaXMgY2FuIGJlIHJlbW92ZWQgYXMgc29vbiBhcyB0aGlzIGZpeCBpcyBvbGRlcjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NzczMSAoMjAxNSlcblx0XHRcdFx0dmFyIGlzTG9hZGVkID0gZWxlbS5jb21wbGV0ZSAmJiBlbGVtLm5hdHVyYWxXaWR0aCA+IDE7XG5cblx0XHRcdFx0aWYoICFmaXJlc0xvYWQgfHwgaXNMb2FkZWQpe1xuXHRcdFx0XHRcdGlmIChpc0xvYWRlZCkge1xuXHRcdFx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmZhc3RMb2FkZWRDbGFzcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN3aXRjaExvYWRpbmdDbGFzcyhldmVudCk7XG5cdFx0XHRcdFx0ZWxlbS5fbGF6eUNhY2hlID0gdHJ1ZTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZiAoJ19sYXp5Q2FjaGUnIGluIGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlDYWNoZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCA5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZWxlbS5sb2FkaW5nID09ICdsYXp5Jykge1xuXHRcdFx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdHZhciB1bnZlaWxFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW0pe1xuXHRcdFx0aWYgKGVsZW0uX2xhenlSYWNlKSB7cmV0dXJuO31cblx0XHRcdHZhciBkZXRhaWw7XG5cblx0XHRcdHZhciBpc0ltZyA9IHJlZ0ltZy50ZXN0KGVsZW0ubm9kZU5hbWUpO1xuXG5cdFx0XHQvL2FsbG93IHVzaW5nIHNpemVzPVwiYXV0b1wiLCBidXQgZG9uJ3QgdXNlLiBpdCdzIGludmFsaWQuIFVzZSBkYXRhLXNpemVzPVwiYXV0b1wiIG9yIGEgdmFsaWQgdmFsdWUgZm9yIHNpemVzIGluc3RlYWQgKGkuZS46IHNpemVzPVwiODB2d1wiKVxuXHRcdFx0dmFyIHNpemVzID0gaXNJbWcgJiYgKGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNpemVzQXR0cikgfHwgZWxlbVtfZ2V0QXR0cmlidXRlXSgnc2l6ZXMnKSk7XG5cdFx0XHR2YXIgaXNBdXRvID0gc2l6ZXMgPT0gJ2F1dG8nO1xuXG5cdFx0XHRpZiggKGlzQXV0byB8fCAhaXNDb21wbGV0ZWQpICYmIGlzSW1nICYmIChlbGVtW19nZXRBdHRyaWJ1dGVdKCdzcmMnKSB8fCBlbGVtLnNyY3NldCkgJiYgIWVsZW0uY29tcGxldGUgJiYgIWhhc0NsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5lcnJvckNsYXNzKSAmJiBoYXNDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKSl7cmV0dXJuO31cblxuXHRcdFx0ZGV0YWlsID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5dW52ZWlscmVhZCcpLmRldGFpbDtcblxuXHRcdFx0aWYoaXNBdXRvKXtcblx0XHRcdFx0IGF1dG9TaXplci51cGRhdGVFbGVtKGVsZW0sIHRydWUsIGVsZW0ub2Zmc2V0V2lkdGgpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLl9sYXp5UmFjZSA9IHRydWU7XG5cdFx0XHRpc0xvYWRpbmcrKztcblxuXHRcdFx0bGF6eVVudmVpbChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKTtcblx0XHR9O1xuXG5cdFx0dmFyIGFmdGVyU2Nyb2xsID0gZGVib3VuY2UoZnVuY3Rpb24oKXtcblx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDM7XG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cdFx0fSk7XG5cblx0XHR2YXIgYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmKGxhenlTaXplc0NmZy5sb2FkTW9kZSA9PSAzKXtcblx0XHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMjtcblx0XHRcdH1cblx0XHRcdGFmdGVyU2Nyb2xsKCk7XG5cdFx0fTtcblxuXHRcdHZhciBvbmxvYWQgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYoaXNDb21wbGV0ZWQpe3JldHVybjt9XG5cdFx0XHRpZihEYXRlLm5vdygpIC0gc3RhcnRlZCA8IDk5OSl7XG5cdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCA5OTkpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblxuXHRcdFx0aXNDb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAzO1xuXG5cdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cblx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciwgdHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRzdGFydGVkID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0XHRsYXp5c2l6ZXMuZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpO1xuXHRcdFx0XHRwcmVsb2FkRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5sYXp5Q2xhc3MgKyAnICcgKyBsYXp5U2l6ZXNDZmcucHJlbG9hZENsYXNzKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdwYWdlc2hvdycsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0aWYgKGUucGVyc2lzdGVkKSB7XG5cdFx0XHRcdFx0XHR2YXIgbG9hZGluZ0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0XHRcdFx0aWYgKGxvYWRpbmdFbGVtZW50cy5sZW5ndGggJiYgbG9hZGluZ0VsZW1lbnRzLmZvckVhY2gpIHtcblx0XHRcdFx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRsb2FkaW5nRWxlbWVudHMuZm9yRWFjaCggZnVuY3Rpb24gKGltZykge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGltZy5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGltZyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpe1xuXHRcdFx0XHRcdG5ldyBNdXRhdGlvbk9ic2VydmVyKCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzICkub2JzZXJ2ZSggZG9jRWxlbSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZX0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2NFbGVtW19hZGRFdmVudExpc3RlbmVyXSgnRE9NTm9kZUluc2VydGVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdFx0ZG9jRWxlbVtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUF0dHJNb2RpZmllZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHRcdHNldEludGVydmFsKHRocm90dGxlZENoZWNrRWxlbWVudHMsIDk5OSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0Ly8sICdmdWxsc2NyZWVuY2hhbmdlJ1xuXHRcdFx0XHRbJ2ZvY3VzJywgJ21vdXNlb3ZlcicsICdjbGljaycsICdsb2FkJywgJ3RyYW5zaXRpb25lbmQnLCAnYW5pbWF0aW9uZW5kJ10uZm9yRWFjaChmdW5jdGlvbihuYW1lKXtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0obmFtZSwgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKCgvZCR8XmMvLnRlc3QoZG9jdW1lbnQucmVhZHlTdGF0ZSkpKXtcblx0XHRcdFx0XHRvbmxvYWQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25sb2FkKTtcblx0XHRcdFx0XHRkb2N1bWVudFtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzKTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KG9ubG9hZCwgMjAwMDApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYobGF6eXNpemVzLmVsZW1lbnRzLmxlbmd0aCl7XG5cdFx0XHRcdFx0Y2hlY2tFbGVtZW50cygpO1xuXHRcdFx0XHRcdHJBRi5fbHNGbHVzaCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNoZWNrRWxlbXM6IHRocm90dGxlZENoZWNrRWxlbWVudHMsXG5cdFx0XHR1bnZlaWw6IHVudmVpbEVsZW1lbnQsXG5cdFx0XHRfYUxTTDogYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyLFxuXHRcdH07XG5cdH0pKCk7XG5cblxuXHR2YXIgYXV0b1NpemVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGF1dG9zaXplc0VsZW1zO1xuXG5cdFx0dmFyIHNpemVFbGVtZW50ID0gckFGSXQoZnVuY3Rpb24oZWxlbSwgcGFyZW50LCBldmVudCwgd2lkdGgpe1xuXHRcdFx0dmFyIHNvdXJjZXMsIGksIGxlbjtcblx0XHRcdGVsZW0uX2xhenlzaXplc1dpZHRoID0gd2lkdGg7XG5cdFx0XHR3aWR0aCArPSAncHgnO1xuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCB3aWR0aCk7XG5cblx0XHRcdGlmKHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKXtcblx0XHRcdFx0c291cmNlcyA9IHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyk7XG5cdFx0XHRcdGZvcihpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0c291cmNlc1tpXS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFldmVudC5kZXRhaWwuZGF0YUF0dHIpe1xuXHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCBldmVudC5kZXRhaWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHZhciBnZXRTaXplRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhQXR0ciwgd2lkdGgpe1xuXHRcdFx0dmFyIGV2ZW50O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYocGFyZW50KXtcblx0XHRcdFx0d2lkdGggPSBnZXRXaWR0aChlbGVtLCBwYXJlbnQsIHdpZHRoKTtcblx0XHRcdFx0ZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmVzaXplcycsIHt3aWR0aDogd2lkdGgsIGRhdGFBdHRyOiAhIWRhdGFBdHRyfSk7XG5cblx0XHRcdFx0aWYoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpe1xuXHRcdFx0XHRcdHdpZHRoID0gZXZlbnQuZGV0YWlsLndpZHRoO1xuXG5cdFx0XHRcdFx0aWYod2lkdGggJiYgd2lkdGggIT09IGVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdFx0XHRcdHNpemVFbGVtZW50KGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIHVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGk7XG5cdFx0XHR2YXIgbGVuID0gYXV0b3NpemVzRWxlbXMubGVuZ3RoO1xuXHRcdFx0aWYobGVuKXtcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdFx0XHRnZXRTaXplRWxlbWVudChhdXRvc2l6ZXNFbGVtc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBkZWJvdW5jZSh1cGRhdGVFbGVtZW50c1NpemVzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRhdXRvc2l6ZXNFbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyk7XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyxcblx0XHRcdHVwZGF0ZUVsZW06IGdldFNpemVFbGVtZW50XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0aWYoIWluaXQuaSAmJiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXtcblx0XHRcdGluaXQuaSA9IHRydWU7XG5cdFx0XHRhdXRvU2l6ZXIuXygpO1xuXHRcdFx0bG9hZGVyLl8oKTtcblx0XHR9XG5cdH07XG5cblx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdGlmKGxhenlTaXplc0NmZy5pbml0KXtcblx0XHRcdGluaXQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGxhenlzaXplcyA9IHtcblx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRhdXRvU2l6ZXI6IGF1dG9TaXplcixcblx0XHRsb2FkZXI6IGxvYWRlcixcblx0XHRpbml0OiBpbml0LFxuXHRcdHVQOiB1cGRhdGVQb2x5ZmlsbCxcblx0XHRhQzogYWRkQ2xhc3MsXG5cdFx0ckM6IHJlbW92ZUNsYXNzLFxuXHRcdGhDOiBoYXNDbGFzcyxcblx0XHRmaXJlOiB0cmlnZ2VyRXZlbnQsXG5cdFx0Z1c6IGdldFdpZHRoLFxuXHRcdHJBRjogckFGLFxuXHR9O1xuXG5cdHJldHVybiBsYXp5c2l6ZXM7XG59XG4pKTtcblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24od2luZG93LCBmYWN0b3J5KSB7XG5cdGlmKCF3aW5kb3cpIHtyZXR1cm47fVxuXHR2YXIgZ2xvYmFsSW5zdGFsbCA9IGZ1bmN0aW9uKCl7XG5cdFx0ZmFjdG9yeSh3aW5kb3cubGF6eVNpemVzKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fTtcblxuXHRmYWN0b3J5ID0gZmFjdG9yeS5iaW5kKG51bGwsIHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcblxuXHRpZih0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKXtcblx0XHRmYWN0b3J5KHJlcXVpcmUoJ2xhenlzaXplcycpKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShbJ2xhenlzaXplcyddLCBmYWN0b3J5KTtcblx0fSBlbHNlIGlmKHdpbmRvdy5sYXp5U2l6ZXMpIHtcblx0XHRnbG9iYWxJbnN0YWxsKCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH1cbn0odHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/XG5cdHdpbmRvdyA6IDAsIGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQndXNlIHN0cmljdCc7XG5cblx0aWYoIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKXtyZXR1cm47fVxuXG5cdHZhciByZWdEZXNjcmlwdG9ycyA9IC9cXHMrKFxcZCspKHd8aClcXHMrKFxcZCspKHd8aCkvO1xuXHR2YXIgcmVnQ3NzRml0ID0gL3BhcmVudC1maXRbXCInXSpcXHMqOlxccypbXCInXSooY29udGFpbnxjb3Zlcnx3aWR0aCkvO1xuXHR2YXIgcmVnQ3NzT2JqZWN0ID0gL3BhcmVudC1jb250YWluZXJbXCInXSpcXHMqOlxccypbXCInXSooLis/KSg/PShcXHN8JHwsfCd8XCJ8OykpLztcblx0dmFyIHJlZ1BpY3R1cmUgPSAvXnBpY3R1cmUkL2k7XG5cdHZhciBjZmcgPSBsYXp5U2l6ZXMuY2ZnO1xuXG5cdHZhciBnZXRDU1MgPSBmdW5jdGlvbiAoZWxlbSl7XG5cdFx0cmV0dXJuIChnZXRDb21wdXRlZFN0eWxlKGVsZW0sIG51bGwpIHx8IHt9KTtcblx0fTtcblxuXHR2YXIgcGFyZW50Rml0ID0ge1xuXG5cdFx0Z2V0UGFyZW50OiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnRTZWwpe1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW1lbnQ7XG5cdFx0XHR2YXIgcGFyZW50Tm9kZSA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYoKCFwYXJlbnRTZWwgfHwgcGFyZW50U2VsID09ICdwcmV2JykgJiYgcGFyZW50Tm9kZSAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Tm9kZS5ub2RlTmFtZSB8fCAnJykpe1xuXHRcdFx0XHRwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihwYXJlbnRTZWwgIT0gJ3NlbGYnKXtcblx0XHRcdFx0aWYocGFyZW50U2VsID09ICdwcmV2Jyl7XG5cdFx0XHRcdFx0cGFyZW50ID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXHRcdFx0XHR9IGVsc2UgaWYocGFyZW50U2VsICYmIChwYXJlbnROb2RlLmNsb3Nlc3QgfHwgd2luZG93LmpRdWVyeSkpe1xuXHRcdFx0XHRcdHBhcmVudCA9IChwYXJlbnROb2RlLmNsb3Nlc3QgP1xuXHRcdFx0XHRcdFx0XHRwYXJlbnROb2RlLmNsb3Nlc3QocGFyZW50U2VsKSA6XG5cdFx0XHRcdFx0XHRcdGpRdWVyeShwYXJlbnROb2RlKS5jbG9zZXN0KHBhcmVudFNlbClbMF0pIHx8XG5cdFx0XHRcdFx0XHRwYXJlbnROb2RlXG5cdFx0XHRcdFx0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBhcmVudCA9IHBhcmVudE5vZGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHBhcmVudDtcblx0XHR9LFxuXG5cdFx0Z2V0Rml0OiBmdW5jdGlvbihlbGVtZW50KXtcblx0XHRcdHZhciB0bXBNYXRjaCwgcGFyZW50T2JqO1xuXHRcdFx0dmFyIGNzcyA9IGdldENTUyhlbGVtZW50KTtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzLmNvbnRlbnQgfHwgY3NzLmZvbnRGYW1pbHk7XG5cdFx0XHR2YXIgb2JqID0ge1xuXHRcdFx0XHRmaXQ6IGVsZW1lbnQuX2xhenlzaXplc1BhcmVudEZpdCB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQtZml0Jylcblx0XHRcdH07XG5cblx0XHRcdGlmKCFvYmouZml0ICYmIGNvbnRlbnQgJiYgKHRtcE1hdGNoID0gY29udGVudC5tYXRjaChyZWdDc3NGaXQpKSl7XG5cdFx0XHRcdG9iai5maXQgPSB0bXBNYXRjaFsxXTtcblx0XHRcdH1cblxuXHRcdFx0aWYob2JqLmZpdCl7XG5cdFx0XHRcdHBhcmVudE9iaiA9IGVsZW1lbnQuX2xhenlzaXplc1BhcmVudENvbnRhaW5lciB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQtY29udGFpbmVyJyk7XG5cblx0XHRcdFx0aWYoIXBhcmVudE9iaiAmJiBjb250ZW50ICYmICh0bXBNYXRjaCA9IGNvbnRlbnQubWF0Y2gocmVnQ3NzT2JqZWN0KSkpe1xuXHRcdFx0XHRcdHBhcmVudE9iaiA9IHRtcE1hdGNoWzFdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0b2JqLnBhcmVudCA9IHBhcmVudEZpdC5nZXRQYXJlbnQoZWxlbWVudCwgcGFyZW50T2JqKTtcblxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmouZml0ID0gY3NzLm9iamVjdEZpdDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2VSYXRpbzogZnVuY3Rpb24oZWxlbWVudCl7XG5cdFx0XHR2YXIgaSwgc3Jjc2V0LCBtZWRpYSwgcmF0aW8sIG1hdGNoLCB3aWR0aCwgaGVpZ2h0O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0XHRcdHZhciBlbGVtZW50cyA9IHBhcmVudCAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKSA/XG5cdFx0XHRcdFx0cGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NvdXJjZSwgaW1nJykgOlxuXHRcdFx0XHRcdFtlbGVtZW50XVxuXHRcdFx0XHQ7XG5cblx0XHRcdGZvcihpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0ZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXHRcdFx0XHRzcmNzZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShjZmcuc3Jjc2V0QXR0cikgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBmc3Jjc2V0JykgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmlzcmNzZXQnKSB8fCAnJztcblx0XHRcdFx0bWVkaWEgPSBlbGVtZW50Ll9sc01lZGlhIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtZWRpYScpO1xuXHRcdFx0XHRtZWRpYSA9IGNmZy5jdXN0b21NZWRpYVtlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1tZWRpYScpIHx8IG1lZGlhXSB8fCBtZWRpYTtcblxuXHRcdFx0XHRpZihzcmNzZXQgJiYgKCFtZWRpYSB8fCAod2luZG93Lm1hdGNoTWVkaWEgJiYgbWF0Y2hNZWRpYShtZWRpYSkgfHwge30pLm1hdGNoZXMgKSl7XG5cdFx0XHRcdFx0cmF0aW8gPSBwYXJzZUZsb2F0KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFzcGVjdHJhdGlvJykpO1xuXG5cdFx0XHRcdFx0aWYgKCFyYXRpbykge1xuXHRcdFx0XHRcdFx0bWF0Y2ggPSBzcmNzZXQubWF0Y2gocmVnRGVzY3JpcHRvcnMpO1xuXG5cdFx0XHRcdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0XHRcdFx0aWYobWF0Y2hbMl0gPT0gJ3cnKXtcblx0XHRcdFx0XHRcdFx0XHR3aWR0aCA9IG1hdGNoWzFdO1xuXHRcdFx0XHRcdFx0XHRcdGhlaWdodCA9IG1hdGNoWzNdO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHdpZHRoID0gbWF0Y2hbM107XG5cdFx0XHRcdFx0XHRcdFx0aGVpZ2h0ID0gbWF0Y2hbMV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHdpZHRoID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG5cdFx0XHRcdFx0XHRcdGhlaWdodCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmF0aW8gPSB3aWR0aCAvIGhlaWdodDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmF0aW87XG5cdFx0fSxcblxuXHRcdGNhbGN1bGF0ZVNpemU6IGZ1bmN0aW9uKGVsZW1lbnQsIHdpZHRoKXtcblx0XHRcdHZhciBkaXNwbGF5UmF0aW8sIGhlaWdodCwgaW1hZ2VSYXRpbywgcmV0V2lkdGg7XG5cdFx0XHR2YXIgZml0T2JqID0gdGhpcy5nZXRGaXQoZWxlbWVudCk7XG5cdFx0XHR2YXIgZml0ID0gZml0T2JqLmZpdDtcblx0XHRcdHZhciBmaXRFbGVtID0gZml0T2JqLnBhcmVudDtcblxuXHRcdFx0aWYoZml0ICE9ICd3aWR0aCcgJiYgKChmaXQgIT0gJ2NvbnRhaW4nICYmIGZpdCAhPSAnY292ZXInKSB8fCAhKGltYWdlUmF0aW8gPSB0aGlzLmdldEltYWdlUmF0aW8oZWxlbWVudCkpKSl7XG5cdFx0XHRcdHJldHVybiB3aWR0aDtcblx0XHRcdH1cblxuXHRcdFx0aWYoZml0RWxlbSl7XG5cdFx0XHRcdHdpZHRoID0gZml0RWxlbS5jbGllbnRXaWR0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZpdEVsZW0gPSBlbGVtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRXaWR0aCA9IHdpZHRoO1xuXG5cdFx0XHRpZihmaXQgPT0gJ3dpZHRoJyl7XG5cdFx0XHRcdHJldFdpZHRoID0gd2lkdGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWlnaHQgPSBmaXRFbGVtLmNsaWVudEhlaWdodDtcblxuXHRcdFx0XHRpZigoZGlzcGxheVJhdGlvID0gIHdpZHRoIC8gaGVpZ2h0KSAmJiAoKGZpdCA9PSAnY292ZXInICYmIGRpc3BsYXlSYXRpbyA8IGltYWdlUmF0aW8pIHx8IChmaXQgPT0gJ2NvbnRhaW4nICYmIGRpc3BsYXlSYXRpbyA+IGltYWdlUmF0aW8pKSl7XG5cdFx0XHRcdFx0cmV0V2lkdGggPSB3aWR0aCAqIChpbWFnZVJhdGlvIC8gZGlzcGxheVJhdGlvKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0V2lkdGg7XG5cdFx0fVxuXHR9O1xuXG5cdGxhenlTaXplcy5wYXJlbnRGaXQgPSBwYXJlbnRGaXQ7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbGF6eWJlZm9yZXNpemVzJywgZnVuY3Rpb24oZSl7XG5cdFx0aWYoZS5kZWZhdWx0UHJldmVudGVkIHx8IGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcyl7cmV0dXJuO31cblxuXHRcdHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG5cdFx0ZS5kZXRhaWwud2lkdGggPSBwYXJlbnRGaXQuY2FsY3VsYXRlU2l6ZShlbGVtZW50LCBlLmRldGFpbC53aWR0aCk7XG5cdH0pO1xufSkpO1xuXG59LHtcImxhenlzaXplc1wiOjJ9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vXG4vLyBTbW9vdGhTY3JvbGwgZm9yIHdlYnNpdGVzIHYxLjQuMTAgKEJhbGF6cyBHYWxhbWJvc2kpXG4vLyBodHRwOi8vd3d3LnNtb290aHNjcm9sbC5uZXQvXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZS5cbi8vXG4vLyBZb3UgbWF5IHVzZSBpdCBpbiB5b3VyIHRoZW1lIGlmIHlvdSBjcmVkaXQgbWUuIFxuLy8gSXQgaXMgYWxzbyBmcmVlIHRvIHVzZSBvbiBhbnkgaW5kaXZpZHVhbCB3ZWJzaXRlLlxuLy9cbi8vIEV4Y2VwdGlvbjpcbi8vIFRoZSBvbmx5IHJlc3RyaWN0aW9uIGlzIHRvIG5vdCBwdWJsaXNoIGFueSAgXG4vLyBleHRlbnNpb24gZm9yIGJyb3dzZXJzIG9yIG5hdGl2ZSBhcHBsaWNhdGlvblxuLy8gd2l0aG91dCBnZXR0aW5nIGEgd3JpdHRlbiBwZXJtaXNzaW9uIGZpcnN0LlxuLy9cblxuKGZ1bmN0aW9uICgpIHtcbiAgXG4vLyBTY3JvbGwgVmFyaWFibGVzICh0d2Vha2FibGUpXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG5cbiAgICAvLyBTY3JvbGxpbmcgQ29yZVxuICAgIGZyYW1lUmF0ZSAgICAgICAgOiAxNTAsIC8vIFtIel1cbiAgICBhbmltYXRpb25UaW1lICAgIDogNDAwLCAvLyBbbXNdXG4gICAgc3RlcFNpemUgICAgICAgICA6IDEwMCwgLy8gW3B4XVxuXG4gICAgLy8gUHVsc2UgKGxlc3MgdHdlYWthYmxlKVxuICAgIC8vIHJhdGlvIG9mIFwidGFpbFwiIHRvIFwiYWNjZWxlcmF0aW9uXCJcbiAgICBwdWxzZUFsZ29yaXRobSAgIDogdHJ1ZSxcbiAgICBwdWxzZVNjYWxlICAgICAgIDogNCxcbiAgICBwdWxzZU5vcm1hbGl6ZSAgIDogMSxcblxuICAgIC8vIEFjY2VsZXJhdGlvblxuICAgIGFjY2VsZXJhdGlvbkRlbHRhIDogNTAsICAvLyA1MFxuICAgIGFjY2VsZXJhdGlvbk1heCAgIDogMywgICAvLyAzXG5cbiAgICAvLyBLZXlib2FyZCBTZXR0aW5nc1xuICAgIGtleWJvYXJkU3VwcG9ydCAgIDogdHJ1ZSwgIC8vIG9wdGlvblxuICAgIGFycm93U2Nyb2xsICAgICAgIDogNTAsICAgIC8vIFtweF1cblxuICAgIC8vIE90aGVyXG4gICAgZml4ZWRCYWNrZ3JvdW5kICAgOiB0cnVlLCBcbiAgICBleGNsdWRlZCAgICAgICAgICA6ICcnICAgIFxufTtcblxudmFyIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcblxuXG4vLyBPdGhlciBWYXJpYWJsZXNcbnZhciBpc0V4Y2x1ZGVkID0gZmFsc2U7XG52YXIgaXNGcmFtZSA9IGZhbHNlO1xudmFyIGRpcmVjdGlvbiA9IHsgeDogMCwgeTogMCB9O1xudmFyIGluaXREb25lICA9IGZhbHNlO1xudmFyIHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG52YXIgYWN0aXZlRWxlbWVudDtcbnZhciBvYnNlcnZlcjtcbnZhciByZWZyZXNoU2l6ZTtcbnZhciBkZWx0YUJ1ZmZlciA9IFtdO1xudmFyIGRlbHRhQnVmZmVyVGltZXI7XG52YXIgaXNNYWMgPSAvXk1hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xuXG52YXIga2V5ID0geyBsZWZ0OiAzNywgdXA6IDM4LCByaWdodDogMzksIGRvd246IDQwLCBzcGFjZWJhcjogMzIsIFxuICAgICAgICAgICAgcGFnZXVwOiAzMywgcGFnZWRvd246IDM0LCBlbmQ6IDM1LCBob21lOiAzNiB9O1xudmFyIGFycm93S2V5cyA9IHsgMzc6IDEsIDM4OiAxLCAzOTogMSwgNDA6IDEgfTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBJTklUSUFMSVpFXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogVGVzdHMgaWYgc21vb3RoIHNjcm9sbGluZyBpcyBhbGxvd2VkLiBTaHV0cyBkb3duIGV2ZXJ5dGhpbmcgaWYgbm90LlxuICovXG5mdW5jdGlvbiBpbml0VGVzdCgpIHtcbiAgICBpZiAob3B0aW9ucy5rZXlib2FyZFN1cHBvcnQpIHtcbiAgICAgICAgYWRkRXZlbnQoJ2tleWRvd24nLCBrZXlkb3duKTtcbiAgICB9XG59XG5cbi8qKlxuICogU2V0cyB1cCBzY3JvbGxzIGFycmF5LCBkZXRlcm1pbmVzIGlmIGZyYW1lcyBhcmUgaW52b2x2ZWQuXG4gKi9cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIFxuICAgIGlmIChpbml0RG9uZSB8fCAhZG9jdW1lbnQuYm9keSkgcmV0dXJuO1xuXG4gICAgaW5pdERvbmUgPSB0cnVlO1xuXG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7IFxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBib2R5LnNjcm9sbEhlaWdodDtcbiAgICBcbiAgICAvLyBjaGVjayBjb21wYXQgbW9kZSBmb3Igcm9vdCBlbGVtZW50XG4gICAgcm9vdCA9IChkb2N1bWVudC5jb21wYXRNb2RlLmluZGV4T2YoJ0NTUycpID49IDApID8gaHRtbCA6IGJvZHk7XG4gICAgYWN0aXZlRWxlbWVudCA9IGJvZHk7XG4gICAgXG4gICAgaW5pdFRlc3QoKTtcblxuICAgIC8vIENoZWNrcyBpZiB0aGlzIHNjcmlwdCBpcyBydW5uaW5nIGluIGEgZnJhbWVcbiAgICBpZiAodG9wICE9IHNlbGYpIHtcbiAgICAgICAgaXNGcmFtZSA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2FmYXJpIDEwIGZpeGVkIGl0LCBDaHJvbWUgZml4ZWQgaXQgaW4gdjQ1OlxuICAgICAqIFRoaXMgZml4ZXMgYSBidWcgd2hlcmUgdGhlIGFyZWFzIGxlZnQgYW5kIHJpZ2h0IHRvIFxuICAgICAqIHRoZSBjb250ZW50IGRvZXMgbm90IHRyaWdnZXIgdGhlIG9ubW91c2V3aGVlbCBldmVudFxuICAgICAqIG9uIHNvbWUgcGFnZXMuIGUuZy46IGh0bWwsIGJvZHkgeyBoZWlnaHQ6IDEwMCUgfVxuICAgICAqL1xuICAgIGVsc2UgaWYgKGlzT2xkU2FmYXJpICYmXG4gICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID4gd2luZG93SGVpZ2h0ICYmXG4gICAgICAgICAgICAoYm9keS5vZmZzZXRIZWlnaHQgPD0gd2luZG93SGVpZ2h0IHx8IFxuICAgICAgICAgICAgIGh0bWwub2Zmc2V0SGVpZ2h0IDw9IHdpbmRvd0hlaWdodCkpIHtcblxuICAgICAgICB2YXIgZnVsbFBhZ2VFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGZ1bGxQYWdlRWxlbS5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOmFic29sdXRlOyB6LWluZGV4Oi0xMDAwMDsgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcDowOyBsZWZ0OjA7IHJpZ2h0OjA7IGhlaWdodDonICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Quc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmdWxsUGFnZUVsZW0pO1xuICAgICAgICBcbiAgICAgICAgLy8gRE9NIGNoYW5nZWQgKHRocm90dGxlZCkgdG8gZml4IGhlaWdodFxuICAgICAgICB2YXIgcGVuZGluZ1JlZnJlc2g7XG4gICAgICAgIHJlZnJlc2hTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHBlbmRpbmdSZWZyZXNoKSByZXR1cm47IC8vIGNvdWxkIGFsc28gYmU6IGNsZWFyVGltZW91dChwZW5kaW5nUmVmcmVzaCk7XG4gICAgICAgICAgICBwZW5kaW5nUmVmcmVzaCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0V4Y2x1ZGVkKSByZXR1cm47IC8vIGNvdWxkIGJlIHJ1bm5pbmcgYWZ0ZXIgY2xlYW51cFxuICAgICAgICAgICAgICAgIGZ1bGxQYWdlRWxlbS5zdHlsZS5oZWlnaHQgPSAnMCc7XG4gICAgICAgICAgICAgICAgZnVsbFBhZ2VFbGVtLnN0eWxlLmhlaWdodCA9IHJvb3Quc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVmcmVzaCA9IG51bGw7XG4gICAgICAgICAgICB9LCA1MDApOyAvLyBhY3QgcmFyZWx5IHRvIHN0YXkgZmFzdFxuICAgICAgICB9O1xuICBcbiAgICAgICAgc2V0VGltZW91dChyZWZyZXNoU2l6ZSwgMTApO1xuXG4gICAgICAgIGFkZEV2ZW50KCdyZXNpemUnLCByZWZyZXNoU2l6ZSk7XG5cbiAgICAgICAgLy8gVE9ETzogYXR0cmlidXRlRmlsdGVyP1xuICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwgXG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsIFxuICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogZmFsc2UgXG4gICAgICAgICAgICAvLyBzdWJ0cmVlOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihyZWZyZXNoU2l6ZSk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoYm9keSwgY29uZmlnKTtcblxuICAgICAgICBpZiAocm9vdC5vZmZzZXRIZWlnaHQgPD0gd2luZG93SGVpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgY2xlYXJmaXggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgICBcbiAgICAgICAgICAgIGNsZWFyZml4LnN0eWxlLmNsZWFyID0gJ2JvdGgnO1xuICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChjbGVhcmZpeCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkaXNhYmxlIGZpeGVkIGJhY2tncm91bmRcbiAgICBpZiAoIW9wdGlvbnMuZml4ZWRCYWNrZ3JvdW5kICYmICFpc0V4Y2x1ZGVkKSB7XG4gICAgICAgIGJvZHkuc3R5bGUuYmFja2dyb3VuZEF0dGFjaG1lbnQgPSAnc2Nyb2xsJztcbiAgICAgICAgaHRtbC5zdHlsZS5iYWNrZ3JvdW5kQXR0YWNobWVudCA9ICdzY3JvbGwnO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBhbmQgb3RoZXIgdHJhY2VzIGxlZnQgb24gdGhlIHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgb2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIHJlbW92ZUV2ZW50KHdoZWVsRXZlbnQsIHdoZWVsKTtcbiAgICByZW1vdmVFdmVudCgnbW91c2Vkb3duJywgbW91c2Vkb3duKTtcbiAgICByZW1vdmVFdmVudCgna2V5ZG93bicsIGtleWRvd24pO1xuICAgIHJlbW92ZUV2ZW50KCdyZXNpemUnLCByZWZyZXNoU2l6ZSk7XG4gICAgcmVtb3ZlRXZlbnQoJ2xvYWQnLCBpbml0KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTQ1JPTExJTkcgXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIFxudmFyIHF1ZSA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcbnZhciBsYXN0U2Nyb2xsID0gRGF0ZS5ub3coKTtcblxuLyoqXG4gKiBQdXNoZXMgc2Nyb2xsIGFjdGlvbnMgdG8gdGhlIHNjcm9sbGluZyBxdWV1ZS5cbiAqL1xuZnVuY3Rpb24gc2Nyb2xsQXJyYXkoZWxlbSwgbGVmdCwgdG9wKSB7XG4gICAgXG4gICAgZGlyZWN0aW9uQ2hlY2sobGVmdCwgdG9wKTtcblxuICAgIGlmIChvcHRpb25zLmFjY2VsZXJhdGlvbk1heCAhPSAxKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgZWxhcHNlZCA9IG5vdyAtIGxhc3RTY3JvbGw7XG4gICAgICAgIGlmIChlbGFwc2VkIDwgb3B0aW9ucy5hY2NlbGVyYXRpb25EZWx0YSkge1xuICAgICAgICAgICAgdmFyIGZhY3RvciA9ICgxICsgKDUwIC8gZWxhcHNlZCkpIC8gMjtcbiAgICAgICAgICAgIGlmIChmYWN0b3IgPiAxKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yID0gTWF0aC5taW4oZmFjdG9yLCBvcHRpb25zLmFjY2VsZXJhdGlvbk1heCk7XG4gICAgICAgICAgICAgICAgbGVmdCAqPSBmYWN0b3I7XG4gICAgICAgICAgICAgICAgdG9wICAqPSBmYWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFNjcm9sbCA9IERhdGUubm93KCk7XG4gICAgfSAgICAgICAgICBcbiAgICBcbiAgICAvLyBwdXNoIGEgc2Nyb2xsIGNvbW1hbmRcbiAgICBxdWUucHVzaCh7XG4gICAgICAgIHg6IGxlZnQsIFxuICAgICAgICB5OiB0b3AsIFxuICAgICAgICBsYXN0WDogKGxlZnQgPCAwKSA/IDAuOTkgOiAtMC45OSxcbiAgICAgICAgbGFzdFk6ICh0b3AgIDwgMCkgPyAwLjk5IDogLTAuOTksIFxuICAgICAgICBzdGFydDogRGF0ZS5ub3coKVxuICAgIH0pO1xuICAgICAgICBcbiAgICAvLyBkb24ndCBhY3QgaWYgdGhlcmUncyBhIHBlbmRpbmcgcXVldWVcbiAgICBpZiAocGVuZGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfSAgXG5cbiAgICB2YXIgc2Nyb2xsUm9vdCA9IGdldFNjcm9sbFJvb3QoKTtcbiAgICB2YXIgaXNXaW5kb3dTY3JvbGwgPSAoZWxlbSA9PT0gc2Nyb2xsUm9vdCB8fCBlbGVtID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICBcbiAgICAvLyBpZiB3ZSBoYXZlbid0IGFscmVhZHkgZml4ZWQgdGhlIGJlaGF2aW9yLCBcbiAgICAvLyBhbmQgaXQgbmVlZHMgZml4aW5nIGZvciB0aGlzIHNlc2hcbiAgICBpZiAoZWxlbS4kc2Nyb2xsQmVoYXZpb3IgPT0gbnVsbCAmJiBpc1Njcm9sbEJlaGF2aW9yU21vb3RoKGVsZW0pKSB7XG4gICAgICAgIGVsZW0uJHNjcm9sbEJlaGF2aW9yID0gZWxlbS5zdHlsZS5zY3JvbGxCZWhhdmlvcjtcbiAgICAgICAgZWxlbS5zdHlsZS5zY3JvbGxCZWhhdmlvciA9ICdhdXRvJztcbiAgICB9XG5cbiAgICB2YXIgc3RlcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIHNjcm9sbFggPSAwO1xuICAgICAgICB2YXIgc2Nyb2xsWSA9IDA7IFxuICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHF1ZVtpXTtcbiAgICAgICAgICAgIHZhciBlbGFwc2VkICA9IG5vdyAtIGl0ZW0uc3RhcnQ7XG4gICAgICAgICAgICB2YXIgZmluaXNoZWQgPSAoZWxhcHNlZCA+PSBvcHRpb25zLmFuaW1hdGlvblRpbWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBzY3JvbGwgcG9zaXRpb246IFswLCAxXVxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gKGZpbmlzaGVkKSA/IDEgOiBlbGFwc2VkIC8gb3B0aW9ucy5hbmltYXRpb25UaW1lO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBlYXNpbmcgW29wdGlvbmFsXVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucHVsc2VBbGdvcml0aG0pIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHB1bHNlKHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gb25seSBuZWVkIHRoZSBkaWZmZXJlbmNlXG4gICAgICAgICAgICB2YXIgeCA9IChpdGVtLnggKiBwb3NpdGlvbiAtIGl0ZW0ubGFzdFgpID4+IDA7XG4gICAgICAgICAgICB2YXIgeSA9IChpdGVtLnkgKiBwb3NpdGlvbiAtIGl0ZW0ubGFzdFkpID4+IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCB0aGlzIHRvIHRoZSB0b3RhbCBzY3JvbGxpbmdcbiAgICAgICAgICAgIHNjcm9sbFggKz0geDtcbiAgICAgICAgICAgIHNjcm9sbFkgKz0geTsgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdXBkYXRlIGxhc3QgdmFsdWVzXG4gICAgICAgICAgICBpdGVtLmxhc3RYICs9IHg7XG4gICAgICAgICAgICBpdGVtLmxhc3RZICs9IHk7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gZGVsZXRlIGFuZCBzdGVwIGJhY2sgaWYgaXQncyBvdmVyXG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBxdWUuc3BsaWNlKGksIDEpOyBpLS07XG4gICAgICAgICAgICB9ICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNjcm9sbCBsZWZ0IGFuZCB0b3BcbiAgICAgICAgaWYgKGlzV2luZG93U2Nyb2xsKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsQnkoc2Nyb2xsWCwgc2Nyb2xsWSk7XG4gICAgICAgIH0gXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNjcm9sbFgpIGVsZW0uc2Nyb2xsTGVmdCArPSBzY3JvbGxYO1xuICAgICAgICAgICAgaWYgKHNjcm9sbFkpIGVsZW0uc2Nyb2xsVG9wICArPSBzY3JvbGxZOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGNsZWFuIHVwIGlmIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvXG4gICAgICAgIGlmICghbGVmdCAmJiAhdG9wKSB7XG4gICAgICAgICAgICBxdWUgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHF1ZS5sZW5ndGgpIHsgXG4gICAgICAgICAgICByZXF1ZXN0RnJhbWUoc3RlcCwgZWxlbSwgKDEwMDAgLyBvcHRpb25zLmZyYW1lUmF0ZSArIDEpKTsgXG4gICAgICAgIH0gZWxzZSB7IFxuICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gcmVzdG9yZSBkZWZhdWx0IGJlaGF2aW9yIGF0IHRoZSBlbmQgb2Ygc2Nyb2xsaW5nIHNlc2hcbiAgICAgICAgICAgIGlmIChlbGVtLiRzY3JvbGxCZWhhdmlvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZWxlbS5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IGVsZW0uJHNjcm9sbEJlaGF2aW9yO1xuICAgICAgICAgICAgICAgIGVsZW0uJHNjcm9sbEJlaGF2aW9yID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLy8gc3RhcnQgYSBuZXcgcXVldWUgb2YgYWN0aW9uc1xuICAgIHJlcXVlc3RGcmFtZShzdGVwLCBlbGVtLCAwKTtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIEVWRU5UU1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAqIE1vdXNlIHdoZWVsIGhhbmRsZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gd2hlZWwoZXZlbnQpIHtcblxuICAgIGlmICghaW5pdERvbmUpIHtcbiAgICAgICAgaW5pdCgpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgLy8gbGVhdmUgZWFybHkgaWYgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkICAgXG4gICAgLy8gb3IgaXQncyBhIHpvb21pbmcgZXZlbnQgd2l0aCBDVFJMIFxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkIHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIC8vIGxlYXZlIGVtYmVkZGVkIGNvbnRlbnQgYWxvbmUgKGZsYXNoICYgcGRmKVxuICAgIGlmIChpc05vZGVOYW1lKGFjdGl2ZUVsZW1lbnQsICdlbWJlZCcpIHx8IFxuICAgICAgIChpc05vZGVOYW1lKHRhcmdldCwgJ2VtYmVkJykgJiYgL1xcLnBkZi9pLnRlc3QodGFyZ2V0LnNyYykpIHx8XG4gICAgICAgIGlzTm9kZU5hbWUoYWN0aXZlRWxlbWVudCwgJ29iamVjdCcpIHx8XG4gICAgICAgIHRhcmdldC5zaGFkb3dSb290KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBkZWx0YVggPSAtZXZlbnQud2hlZWxEZWx0YVggfHwgZXZlbnQuZGVsdGFYIHx8IDA7XG4gICAgdmFyIGRlbHRhWSA9IC1ldmVudC53aGVlbERlbHRhWSB8fCBldmVudC5kZWx0YVkgfHwgMDtcbiAgICBcbiAgICBpZiAoaXNNYWMpIHtcbiAgICAgICAgaWYgKGV2ZW50LndoZWVsRGVsdGFYICYmIGlzRGl2aXNpYmxlKGV2ZW50LndoZWVsRGVsdGFYLCAxMjApKSB7XG4gICAgICAgICAgICBkZWx0YVggPSAtMTIwICogKGV2ZW50LndoZWVsRGVsdGFYIC8gTWF0aC5hYnMoZXZlbnQud2hlZWxEZWx0YVgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQud2hlZWxEZWx0YVkgJiYgaXNEaXZpc2libGUoZXZlbnQud2hlZWxEZWx0YVksIDEyMCkpIHtcbiAgICAgICAgICAgIGRlbHRhWSA9IC0xMjAgKiAoZXZlbnQud2hlZWxEZWx0YVkgLyBNYXRoLmFicyhldmVudC53aGVlbERlbHRhWSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIHVzZSB3aGVlbERlbHRhIGlmIGRlbHRhWC9ZIGlzIG5vdCBhdmFpbGFibGVcbiAgICBpZiAoIWRlbHRhWCAmJiAhZGVsdGFZKSB7XG4gICAgICAgIGRlbHRhWSA9IC1ldmVudC53aGVlbERlbHRhIHx8IDA7XG4gICAgfVxuXG4gICAgLy8gbGluZSBiYXNlZCBzY3JvbGxpbmcgKEZpcmVmb3ggbW9zdGx5KVxuICAgIGlmIChldmVudC5kZWx0YU1vZGUgPT09IDEpIHtcbiAgICAgICAgZGVsdGFYICo9IDQwO1xuICAgICAgICBkZWx0YVkgKj0gNDA7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJmbG93aW5nID0gb3ZlcmZsb3dpbmdBbmNlc3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gbm90aGluZyB0byBkbyBpZiB0aGVyZSdzIG5vIGVsZW1lbnQgdGhhdCdzIHNjcm9sbGFibGVcbiAgICBpZiAoIW92ZXJmbG93aW5nKSB7XG4gICAgICAgIC8vIGV4Y2VwdCBDaHJvbWUgaWZyYW1lcyBzZWVtIHRvIGVhdCB3aGVlbCBldmVudHMsIHdoaWNoIHdlIG5lZWQgdG8gXG4gICAgICAgIC8vIHByb3BhZ2F0ZSB1cCwgaWYgdGhlIGlmcmFtZSBoYXMgbm90aGluZyBvdmVyZmxvd2luZyB0byBzY3JvbGxcbiAgICAgICAgaWYgKGlzRnJhbWUgJiYgaXNDaHJvbWUpICB7XG4gICAgICAgICAgICAvLyBjaGFuZ2UgdGFyZ2V0IHRvIGlmcmFtZSBlbGVtZW50IGl0c2VsZiBmb3IgdGhlIHBhcmVudCBmcmFtZVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCBcInRhcmdldFwiLCB7dmFsdWU6IHdpbmRvdy5mcmFtZUVsZW1lbnR9KTtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQud2hlZWwoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICAvLyBjaGVjayBpZiBpdCdzIGEgdG91Y2hwYWQgc2Nyb2xsIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWRcbiAgICBpZiAoaXNUb3VjaHBhZChkZWx0YVkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIHNjYWxlIGJ5IHN0ZXAgc2l6ZVxuICAgIC8vIGRlbHRhIGlzIDEyMCBtb3N0IG9mIHRoZSB0aW1lXG4gICAgLy8gc3luYXB0aWNzIHNlZW1zIHRvIHNlbmQgMSBzb21ldGltZXNcbiAgICBpZiAoTWF0aC5hYnMoZGVsdGFYKSA+IDEuMikge1xuICAgICAgICBkZWx0YVggKj0gb3B0aW9ucy5zdGVwU2l6ZSAvIDEyMDtcbiAgICB9XG4gICAgaWYgKE1hdGguYWJzKGRlbHRhWSkgPiAxLjIpIHtcbiAgICAgICAgZGVsdGFZICo9IG9wdGlvbnMuc3RlcFNpemUgLyAxMjA7XG4gICAgfVxuICAgIFxuICAgIHNjcm9sbEFycmF5KG92ZXJmbG93aW5nLCBkZWx0YVgsIGRlbHRhWSk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzY2hlZHVsZUNsZWFyQ2FjaGUoKTtcbn1cblxuLyoqXG4gKiBLZXlkb3duIGV2ZW50IGhhbmRsZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24ga2V5ZG93bihldmVudCkge1xuXG4gICAgdmFyIHRhcmdldCAgID0gZXZlbnQudGFyZ2V0O1xuICAgIHZhciBtb2RpZmllciA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgXG4gICAgICAgICAgICAgICAgICAoZXZlbnQuc2hpZnRLZXkgJiYgZXZlbnQua2V5Q29kZSAhPT0ga2V5LnNwYWNlYmFyKTtcbiAgICBcbiAgICAvLyBvdXIgb3duIHRyYWNrZWQgYWN0aXZlIGVsZW1lbnQgY291bGQndmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIERPTVxuICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyhhY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBkbyBub3RoaW5nIGlmIHVzZXIgaXMgZWRpdGluZyB0ZXh0XG4gICAgLy8gb3IgdXNpbmcgYSBtb2RpZmllciBrZXkgKGV4Y2VwdCBzaGlmdClcbiAgICAvLyBvciBpbiBhIGRyb3Bkb3duXG4gICAgLy8gb3IgaW5zaWRlIGludGVyYWN0aXZlIGVsZW1lbnRzXG4gICAgdmFyIGlucHV0Tm9kZU5hbWVzID0gL14odGV4dGFyZWF8c2VsZWN0fGVtYmVkfG9iamVjdCkkL2k7XG4gICAgdmFyIGJ1dHRvblR5cGVzID0gL14oYnV0dG9ufHN1Ym1pdHxyYWRpb3xjaGVja2JveHxmaWxlfGNvbG9yfGltYWdlKSQvaTtcbiAgICBpZiAoIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHxcbiAgICAgICAgIGlucHV0Tm9kZU5hbWVzLnRlc3QodGFyZ2V0Lm5vZGVOYW1lKSB8fFxuICAgICAgICAgaXNOb2RlTmFtZSh0YXJnZXQsICdpbnB1dCcpICYmICFidXR0b25UeXBlcy50ZXN0KHRhcmdldC50eXBlKSB8fFxuICAgICAgICAgaXNOb2RlTmFtZShhY3RpdmVFbGVtZW50LCAndmlkZW8nKSB8fFxuICAgICAgICAgaXNJbnNpZGVZb3V0dWJlVmlkZW8oZXZlbnQpIHx8XG4gICAgICAgICB0YXJnZXQuaXNDb250ZW50RWRpdGFibGUgfHwgXG4gICAgICAgICBtb2RpZmllciApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIFtzcGFjZWJhcl0gc2hvdWxkIHRyaWdnZXIgYnV0dG9uIHByZXNzLCBsZWF2ZSBpdCBhbG9uZVxuICAgIGlmICgoaXNOb2RlTmFtZSh0YXJnZXQsICdidXR0b24nKSB8fFxuICAgICAgICAgaXNOb2RlTmFtZSh0YXJnZXQsICdpbnB1dCcpICYmIGJ1dHRvblR5cGVzLnRlc3QodGFyZ2V0LnR5cGUpKSAmJlxuICAgICAgICBldmVudC5rZXlDb2RlID09PSBrZXkuc3BhY2ViYXIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIFthcnJ3b3cga2V5c10gb24gcmFkaW8gYnV0dG9ucyBzaG91bGQgYmUgbGVmdCBhbG9uZVxuICAgIGlmIChpc05vZGVOYW1lKHRhcmdldCwgJ2lucHV0JykgJiYgdGFyZ2V0LnR5cGUgPT0gJ3JhZGlvJyAmJlxuICAgICAgICBhcnJvd0tleXNbZXZlbnQua2V5Q29kZV0pICB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgdmFyIHNoaWZ0LCB4ID0gMCwgeSA9IDA7XG4gICAgdmFyIG92ZXJmbG93aW5nID0gb3ZlcmZsb3dpbmdBbmNlc3RvcihhY3RpdmVFbGVtZW50KTtcblxuICAgIGlmICghb3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgLy8gQ2hyb21lIGlmcmFtZXMgc2VlbSB0byBlYXQga2V5IGV2ZW50cywgd2hpY2ggd2UgbmVlZCB0byBcbiAgICAgICAgLy8gcHJvcGFnYXRlIHVwLCBpZiB0aGUgaWZyYW1lIGhhcyBub3RoaW5nIG92ZXJmbG93aW5nIHRvIHNjcm9sbFxuICAgICAgICByZXR1cm4gKGlzRnJhbWUgJiYgaXNDaHJvbWUpID8gcGFyZW50LmtleWRvd24oZXZlbnQpIDogdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgY2xpZW50SGVpZ2h0ID0gb3ZlcmZsb3dpbmcuY2xpZW50SGVpZ2h0OyBcblxuICAgIGlmIChvdmVyZmxvd2luZyA9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIGNsaWVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSBrZXkudXA6XG4gICAgICAgICAgICB5ID0gLW9wdGlvbnMuYXJyb3dTY3JvbGw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBrZXkuZG93bjpcbiAgICAgICAgICAgIHkgPSBvcHRpb25zLmFycm93U2Nyb2xsO1xuICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgXG4gICAgICAgIGNhc2Uga2V5LnNwYWNlYmFyOiAvLyAoKyBzaGlmdClcbiAgICAgICAgICAgIHNoaWZ0ID0gZXZlbnQuc2hpZnRLZXkgPyAxIDogLTE7XG4gICAgICAgICAgICB5ID0gLXNoaWZ0ICogY2xpZW50SGVpZ2h0ICogMC45O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Uga2V5LnBhZ2V1cDpcbiAgICAgICAgICAgIHkgPSAtY2xpZW50SGVpZ2h0ICogMC45O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Uga2V5LnBhZ2Vkb3duOlxuICAgICAgICAgICAgeSA9IGNsaWVudEhlaWdodCAqIDAuOTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGtleS5ob21lOlxuICAgICAgICAgICAgaWYgKG92ZXJmbG93aW5nID09IGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudClcbiAgICAgICAgICAgICAgICBvdmVyZmxvd2luZyA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG4gICAgICAgICAgICB5ID0gLW92ZXJmbG93aW5nLnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGtleS5lbmQ6XG4gICAgICAgICAgICB2YXIgc2Nyb2xsID0gb3ZlcmZsb3dpbmcuc2Nyb2xsSGVpZ2h0IC0gb3ZlcmZsb3dpbmcuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgdmFyIHNjcm9sbFJlbWFpbmluZyA9IHNjcm9sbCAtIGNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIHkgPSAoc2Nyb2xsUmVtYWluaW5nID4gMCkgPyBzY3JvbGxSZW1haW5pbmcgKyAxMCA6IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBrZXkubGVmdDpcbiAgICAgICAgICAgIHggPSAtb3B0aW9ucy5hcnJvd1Njcm9sbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGtleS5yaWdodDpcbiAgICAgICAgICAgIHggPSBvcHRpb25zLmFycm93U2Nyb2xsO1xuICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gYSBrZXkgd2UgZG9uJ3QgY2FyZSBhYm91dFxuICAgIH1cblxuICAgIHNjcm9sbEFycmF5KG92ZXJmbG93aW5nLCB4LCB5KTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHNjaGVkdWxlQ2xlYXJDYWNoZSgpO1xufVxuXG4vKipcbiAqIE1vdXNlZG93biBldmVudCBvbmx5IGZvciB1cGRhdGluZyBhY3RpdmVFbGVtZW50XG4gKi9cbmZ1bmN0aW9uIG1vdXNlZG93bihldmVudCkge1xuICAgIGFjdGl2ZUVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBPVkVSRkxPV1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgdW5pcXVlSUQgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC51bmlxdWVJRCB8fCAoZWwudW5pcXVlSUQgPSBpKyspO1xuICAgIH07XG59KSgpO1xuXG52YXIgY2FjaGVYID0ge307IC8vIGNsZWFyZWQgb3V0IGFmdGVyIGEgc2Nyb2xsaW5nIHNlc3Npb25cbnZhciBjYWNoZVkgPSB7fTsgLy8gY2xlYXJlZCBvdXQgYWZ0ZXIgYSBzY3JvbGxpbmcgc2Vzc2lvblxudmFyIGNsZWFyQ2FjaGVUaW1lcjtcbnZhciBzbW9vdGhCZWhhdmlvckZvckVsZW1lbnQgPSB7fTtcblxuLy9zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IGNhY2hlID0ge307IH0sIDEwICogMTAwMCk7XG5cbmZ1bmN0aW9uIHNjaGVkdWxlQ2xlYXJDYWNoZSgpIHtcbiAgICBjbGVhclRpbWVvdXQoY2xlYXJDYWNoZVRpbWVyKTtcbiAgICBjbGVhckNhY2hlVGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IFxuICAgICAgICBjYWNoZVggPSBjYWNoZVkgPSBzbW9vdGhCZWhhdmlvckZvckVsZW1lbnQgPSB7fTsgXG4gICAgfSwgMSoxMDAwKTtcbn1cblxuZnVuY3Rpb24gc2V0Q2FjaGUoZWxlbXMsIG92ZXJmbG93aW5nLCB4KSB7XG4gICAgdmFyIGNhY2hlID0geCA/IGNhY2hlWCA6IGNhY2hlWTtcbiAgICBmb3IgKHZhciBpID0gZWxlbXMubGVuZ3RoOyBpLS07KVxuICAgICAgICBjYWNoZVt1bmlxdWVJRChlbGVtc1tpXSldID0gb3ZlcmZsb3dpbmc7XG4gICAgcmV0dXJuIG92ZXJmbG93aW5nO1xufVxuXG5mdW5jdGlvbiBnZXRDYWNoZShlbCwgeCkge1xuICAgIHJldHVybiAoeCA/IGNhY2hlWCA6IGNhY2hlWSlbdW5pcXVlSUQoZWwpXTtcbn1cblxuLy8gIChib2R5KSAgICAgICAgICAgICAgICAocm9vdClcbi8vICAgICAgICAgfCBoaWRkZW4gfCB2aXNpYmxlIHwgc2Nyb2xsIHwgIGF1dG8gIHxcbi8vIGhpZGRlbiAgfCAgIG5vICAgfCAgICBubyAgIHwgICBZRVMgIHwgICBZRVMgIHxcbi8vIHZpc2libGUgfCAgIG5vICAgfCAgIFlFUyAgIHwgICBZRVMgIHwgICBZRVMgIHxcbi8vIHNjcm9sbCAgfCAgIG5vICAgfCAgIFlFUyAgIHwgICBZRVMgIHwgICBZRVMgIHxcbi8vIGF1dG8gICAgfCAgIG5vICAgfCAgIFlFUyAgIHwgICBZRVMgIHwgICBZRVMgIHxcblxuZnVuY3Rpb24gb3ZlcmZsb3dpbmdBbmNlc3RvcihlbCkge1xuICAgIHZhciBlbGVtcyA9IFtdO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgcm9vdFNjcm9sbEhlaWdodCA9IHJvb3Quc2Nyb2xsSGVpZ2h0O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIGNhY2hlZCA9IGdldENhY2hlKGVsLCBmYWxzZSk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRDYWNoZShlbGVtcywgY2FjaGVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtcy5wdXNoKGVsKTtcbiAgICAgICAgaWYgKHJvb3RTY3JvbGxIZWlnaHQgPT09IGVsLnNjcm9sbEhlaWdodCkge1xuICAgICAgICAgICAgdmFyIHRvcE92ZXJmbG93c05vdEhpZGRlbiA9IG92ZXJmbG93Tm90SGlkZGVuKHJvb3QpICYmIG92ZXJmbG93Tm90SGlkZGVuKGJvZHkpO1xuICAgICAgICAgICAgdmFyIGlzT3ZlcmZsb3dDU1MgPSB0b3BPdmVyZmxvd3NOb3RIaWRkZW4gfHwgb3ZlcmZsb3dBdXRvT3JTY3JvbGwocm9vdCk7XG4gICAgICAgICAgICBpZiAoaXNGcmFtZSAmJiBpc0NvbnRlbnRPdmVyZmxvd2luZyhyb290KSB8fCBcbiAgICAgICAgICAgICAgICFpc0ZyYW1lICYmIGlzT3ZlcmZsb3dDU1MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0Q2FjaGUoZWxlbXMsIGdldFNjcm9sbFJvb3QoKSk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzQ29udGVudE92ZXJmbG93aW5nKGVsKSAmJiBvdmVyZmxvd0F1dG9PclNjcm9sbChlbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRDYWNoZShlbGVtcywgZWwpO1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoKGVsID0gZWwucGFyZW50RWxlbWVudCkpO1xufVxuXG5mdW5jdGlvbiBpc0NvbnRlbnRPdmVyZmxvd2luZyhlbCkge1xuICAgIHJldHVybiAoZWwuY2xpZW50SGVpZ2h0ICsgMTAgPCBlbC5zY3JvbGxIZWlnaHQpO1xufVxuXG4vLyB0eXBpY2FsbHkgZm9yIDxib2R5PiBhbmQgPGh0bWw+XG5mdW5jdGlvbiBvdmVyZmxvd05vdEhpZGRlbihlbCkge1xuICAgIHZhciBvdmVyZmxvdyA9IGdldENvbXB1dGVkU3R5bGUoZWwsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKCdvdmVyZmxvdy15Jyk7XG4gICAgcmV0dXJuIChvdmVyZmxvdyAhPT0gJ2hpZGRlbicpO1xufVxuXG4vLyBmb3IgYWxsIG90aGVyIGVsZW1lbnRzXG5mdW5jdGlvbiBvdmVyZmxvd0F1dG9PclNjcm9sbChlbCkge1xuICAgIHZhciBvdmVyZmxvdyA9IGdldENvbXB1dGVkU3R5bGUoZWwsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKCdvdmVyZmxvdy15Jyk7XG4gICAgcmV0dXJuIChvdmVyZmxvdyA9PT0gJ3Njcm9sbCcgfHwgb3ZlcmZsb3cgPT09ICdhdXRvJyk7XG59XG5cbi8vIGZvciBhbGwgb3RoZXIgZWxlbWVudHNcbmZ1bmN0aW9uIGlzU2Nyb2xsQmVoYXZpb3JTbW9vdGgoZWwpIHtcbiAgICB2YXIgaWQgPSB1bmlxdWVJRChlbCk7XG4gICAgaWYgKHNtb290aEJlaGF2aW9yRm9yRWxlbWVudFtpZF0gPT0gbnVsbCkge1xuICAgICAgICB2YXIgc2Nyb2xsQmVoYXZpb3IgPSBnZXRDb21wdXRlZFN0eWxlKGVsLCAnJylbJ3Njcm9sbC1iZWhhdmlvciddO1xuICAgICAgICBzbW9vdGhCZWhhdmlvckZvckVsZW1lbnRbaWRdID0gKCdzbW9vdGgnID09IHNjcm9sbEJlaGF2aW9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHNtb290aEJlaGF2aW9yRm9yRWxlbWVudFtpZF07XG59XG5cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBIRUxQRVJTXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIGFkZEV2ZW50KHR5cGUsIGZuLCBhcmcpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgYXJnIHx8IGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnQodHlwZSwgZm4sIGFyZykge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBhcmcgfHwgZmFsc2UpOyAgXG59XG5cbmZ1bmN0aW9uIGlzTm9kZU5hbWUoZWwsIHRhZykge1xuICAgIHJldHVybiBlbCAmJiAoZWwubm9kZU5hbWV8fCcnKS50b0xvd2VyQ2FzZSgpID09PSB0YWcudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gZGlyZWN0aW9uQ2hlY2soeCwgeSkge1xuICAgIHggPSAoeCA+IDApID8gMSA6IC0xO1xuICAgIHkgPSAoeSA+IDApID8gMSA6IC0xO1xuICAgIGlmIChkaXJlY3Rpb24ueCAhPT0geCB8fCBkaXJlY3Rpb24ueSAhPT0geSkge1xuICAgICAgICBkaXJlY3Rpb24ueCA9IHg7XG4gICAgICAgIGRpcmVjdGlvbi55ID0geTtcbiAgICAgICAgcXVlID0gW107XG4gICAgICAgIGxhc3RTY3JvbGwgPSAwO1xuICAgIH1cbn1cblxuaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UgJiYgbG9jYWxTdG9yYWdlLlNTX2RlbHRhQnVmZmVyKSB7XG4gICAgdHJ5IHsgLy8gIzQ2IFNhZmFyaSB0aHJvd3MgaW4gcHJpdmF0ZSBicm93c2luZyBmb3IgbG9jYWxTdG9yYWdlIFxuICAgICAgICBkZWx0YUJ1ZmZlciA9IGxvY2FsU3RvcmFnZS5TU19kZWx0YUJ1ZmZlci5zcGxpdCgnLCcpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfSBcbn1cblxuZnVuY3Rpb24gaXNUb3VjaHBhZChkZWx0YVkpIHtcbiAgICBpZiAoIWRlbHRhWSkgcmV0dXJuO1xuICAgIGlmICghZGVsdGFCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGRlbHRhQnVmZmVyID0gW2RlbHRhWSwgZGVsdGFZLCBkZWx0YVldO1xuICAgIH1cbiAgICBkZWx0YVkgPSBNYXRoLmFicyhkZWx0YVkpO1xuICAgIGRlbHRhQnVmZmVyLnB1c2goZGVsdGFZKTtcbiAgICBkZWx0YUJ1ZmZlci5zaGlmdCgpO1xuICAgIGNsZWFyVGltZW91dChkZWx0YUJ1ZmZlclRpbWVyKTtcbiAgICBkZWx0YUJ1ZmZlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7IC8vICM0NiBTYWZhcmkgdGhyb3dzIGluIHByaXZhdGUgYnJvd3NpbmcgZm9yIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLlNTX2RlbHRhQnVmZmVyID0gZGVsdGFCdWZmZXIuam9pbignLCcpO1xuICAgICAgICB9IGNhdGNoIChlKSB7IH0gIFxuICAgIH0sIDEwMDApO1xuICAgIHZhciBkcGlTY2FsZWRXaGVlbERlbHRhID0gZGVsdGFZID4gMTIwICYmIGFsbERlbHRhc0RpdmlzYWJsZUJ5KGRlbHRhWSk7IC8vIHdpbjY0IFxuICAgIHZhciB0cCA9ICFhbGxEZWx0YXNEaXZpc2FibGVCeSgxMjApICYmICFhbGxEZWx0YXNEaXZpc2FibGVCeSgxMDApICYmICFkcGlTY2FsZWRXaGVlbERlbHRhO1xuICAgIGlmIChkZWx0YVkgPCA1MCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHRwO1xufSBcblxuZnVuY3Rpb24gaXNEaXZpc2libGUobiwgZGl2aXNvcikge1xuICAgIHJldHVybiAoTWF0aC5mbG9vcihuIC8gZGl2aXNvcikgPT0gbiAvIGRpdmlzb3IpO1xufVxuXG5mdW5jdGlvbiBhbGxEZWx0YXNEaXZpc2FibGVCeShkaXZpc29yKSB7XG4gICAgcmV0dXJuIChpc0RpdmlzaWJsZShkZWx0YUJ1ZmZlclswXSwgZGl2aXNvcikgJiZcbiAgICAgICAgICAgIGlzRGl2aXNpYmxlKGRlbHRhQnVmZmVyWzFdLCBkaXZpc29yKSAmJlxuICAgICAgICAgICAgaXNEaXZpc2libGUoZGVsdGFCdWZmZXJbMl0sIGRpdmlzb3IpKTtcbn1cblxuZnVuY3Rpb24gaXNJbnNpZGVZb3V0dWJlVmlkZW8oZXZlbnQpIHtcbiAgICB2YXIgZWxlbSA9IGV2ZW50LnRhcmdldDtcbiAgICB2YXIgaXNDb250cm9sID0gZmFsc2U7XG4gICAgaWYgKGRvY3VtZW50LlVSTC5pbmRleE9mICgnd3d3LnlvdXR1YmUuY29tL3dhdGNoJykgIT0gLTEpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaXNDb250cm9sID0gKGVsZW0uY2xhc3NMaXN0ICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdodG1sNS12aWRlby1jb250cm9scycpKTtcbiAgICAgICAgICAgIGlmIChpc0NvbnRyb2wpIGJyZWFrO1xuICAgICAgICB9IHdoaWxlICgoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkpO1xuICAgIH1cbiAgICByZXR1cm4gaXNDb250cm9sO1xufVxuXG52YXIgcmVxdWVzdEZyYW1lID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgICB8fCBcbiAgICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBcbiAgICAgICAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSAgICB8fFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoY2FsbGJhY2ssIGVsZW1lbnQsIGRlbGF5KSB7XG4gICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSB8fCAoMTAwMC82MCkpO1xuICAgICAgICAgICAgIH0pO1xufSkoKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXIpOyAgXG5cbnZhciBnZXRTY3JvbGxSb290ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgU0NST0xMX1JPT1QgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFTQ1JPTExfUk9PVCkge1xuICAgICAgdmFyIGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBkdW1teS5zdHlsZS5jc3NUZXh0ID0gJ2hlaWdodDoxMDAwMHB4O3dpZHRoOjFweDsnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkdW1teSk7XG4gICAgICB2YXIgYm9keVNjcm9sbFRvcCAgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgICAgIHZhciBkb2NFbFNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICB3aW5kb3cuc2Nyb2xsQnkoMCwgMyk7XG4gICAgICBpZiAoZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgIT0gYm9keVNjcm9sbFRvcClcbiAgICAgICAgKFNDUk9MTF9ST09UID0gZG9jdW1lbnQuYm9keSk7XG4gICAgICBlbHNlIFxuICAgICAgICAoU0NST0xMX1JPT1QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgd2luZG93LnNjcm9sbEJ5KDAsIC0zKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZHVtbXkpO1xuICAgIH1cbiAgICByZXR1cm4gU0NST0xMX1JPT1Q7XG4gIH07XG59KSgpO1xuXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogUFVMU0UgKGJ5IE1pY2hhZWwgSGVyZilcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiBcbi8qKlxuICogVmlzY291cyBmbHVpZCB3aXRoIGEgcHVsc2UgZm9yIHBhcnQgYW5kIGRlY2F5IGZvciB0aGUgcmVzdC5cbiAqIC0gQXBwbGllcyBhIGZpeGVkIGZvcmNlIG92ZXIgYW4gaW50ZXJ2YWwgKGEgZGFtcGVkIGFjY2VsZXJhdGlvbiksIGFuZFxuICogLSBMZXRzIHRoZSBleHBvbmVudGlhbCBibGVlZCBhd2F5IHRoZSB2ZWxvY2l0eSBvdmVyIGEgbG9uZ2VyIGludGVydmFsXG4gKiAtIE1pY2hhZWwgSGVyZiwgaHR0cDovL3N0ZXJlb3BzaXMuY29tL3N0b3BwaW5nL1xuICovXG5mdW5jdGlvbiBwdWxzZV8oeCkge1xuICAgIHZhciB2YWwsIHN0YXJ0LCBleHB4O1xuICAgIC8vIHRlc3RcbiAgICB4ID0geCAqIG9wdGlvbnMucHVsc2VTY2FsZTtcbiAgICBpZiAoeCA8IDEpIHsgLy8gYWNjZWxlYXJ0aW9uXG4gICAgICAgIHZhbCA9IHggLSAoMSAtIE1hdGguZXhwKC14KSk7XG4gICAgfSBlbHNlIHsgICAgIC8vIHRhaWxcbiAgICAgICAgLy8gdGhlIHByZXZpb3VzIGFuaW1hdGlvbiBlbmRlZCBoZXJlOlxuICAgICAgICBzdGFydCA9IE1hdGguZXhwKC0xKTtcbiAgICAgICAgLy8gc2ltcGxlIHZpc2NvdXMgZHJhZ1xuICAgICAgICB4IC09IDE7XG4gICAgICAgIGV4cHggPSAxIC0gTWF0aC5leHAoLXgpO1xuICAgICAgICB2YWwgPSBzdGFydCArIChleHB4ICogKDEgLSBzdGFydCkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsICogb3B0aW9ucy5wdWxzZU5vcm1hbGl6ZTtcbn1cblxuZnVuY3Rpb24gcHVsc2UoeCkge1xuICAgIGlmICh4ID49IDEpIHJldHVybiAxO1xuICAgIGlmICh4IDw9IDApIHJldHVybiAwO1xuXG4gICAgaWYgKG9wdGlvbnMucHVsc2VOb3JtYWxpemUgPT0gMSkge1xuICAgICAgICBvcHRpb25zLnB1bHNlTm9ybWFsaXplIC89IHB1bHNlXygxKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1bHNlXyh4KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIEZJUlNUIFJVTlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG52YXIgaXNFZGdlICAgID0gL0VkZ2UvLnRlc3QodXNlckFnZW50KTsgLy8gdGhhbmsgeW91IE1TXG52YXIgaXNDaHJvbWUgID0gL2Nocm9tZS9pLnRlc3QodXNlckFnZW50KSAmJiAhaXNFZGdlOyBcbnZhciBpc1NhZmFyaSAgPSAvc2FmYXJpL2kudGVzdCh1c2VyQWdlbnQpICYmICFpc0VkZ2U7IFxudmFyIGlzTW9iaWxlICA9IC9tb2JpbGUvaS50ZXN0KHVzZXJBZ2VudCk7XG52YXIgaXNJRVdpbjcgID0gL1dpbmRvd3MgTlQgNi4xL2kudGVzdCh1c2VyQWdlbnQpICYmIC9ydjoxMS9pLnRlc3QodXNlckFnZW50KTtcbnZhciBpc09sZFNhZmFyaSA9IGlzU2FmYXJpICYmICgvVmVyc2lvblxcLzgvaS50ZXN0KHVzZXJBZ2VudCkgfHwgL1ZlcnNpb25cXC85L2kudGVzdCh1c2VyQWdlbnQpKTtcbnZhciBpc0VuYWJsZWRGb3JCcm93c2VyID0gKGlzQ2hyb21lIHx8IGlzU2FmYXJpIHx8IGlzSUVXaW43KSAmJiAhaXNNb2JpbGU7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbnRyeSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgfSBcbiAgICB9KSk7XG59IGNhdGNoKGUpIHt9XG5cbnZhciB3aGVlbE9wdCA9IHN1cHBvcnRzUGFzc2l2ZSA/IHsgcGFzc2l2ZTogZmFsc2UgfSA6IGZhbHNlO1xudmFyIHdoZWVsRXZlbnQgPSAnb253aGVlbCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnOyBcblxuaWYgKHdoZWVsRXZlbnQgJiYgaXNFbmFibGVkRm9yQnJvd3Nlcikge1xuICAgIGFkZEV2ZW50KHdoZWVsRXZlbnQsIHdoZWVsLCB3aGVlbE9wdCk7XG4gICAgYWRkRXZlbnQoJ21vdXNlZG93bicsIG1vdXNlZG93bik7XG4gICAgYWRkRXZlbnQoJ2xvYWQnLCBpbml0KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFBVQkxJQyBJTlRFUkZBQ0VcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZnVuY3Rpb24gU21vb3RoU2Nyb2xsKG9wdGlvbnNUb1NldCkge1xuICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zVG9TZXQpXG4gICAgICAgIGlmIChkZWZhdWx0T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSBcbiAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IG9wdGlvbnNUb1NldFtrZXldO1xufVxuU21vb3RoU2Nyb2xsLmRlc3Ryb3kgPSBjbGVhbnVwO1xuXG5pZiAod2luZG93LlNtb290aFNjcm9sbE9wdGlvbnMpIC8vIGFzeW5jIEFQSVxuICAgIFNtb290aFNjcm9sbCh3aW5kb3cuU21vb3RoU2Nyb2xsT3B0aW9ucyk7XG5cbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gU21vb3RoU2Nyb2xsO1xuICAgIH0pO1xuZWxzZSBpZiAoJ29iamVjdCcgPT0gdHlwZW9mIGV4cG9ydHMpXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBTbW9vdGhTY3JvbGw7XG5lbHNlXG4gICAgd2luZG93LlNtb290aFNjcm9sbCA9IFNtb290aFNjcm9sbDtcblxufSkoKTtcblxufSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIFNTUiBXaW5kb3cgMy4wLjBcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIwLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBOb3ZlbWJlciA5LCAyMDIwXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5zc3JXaW5kb3cgPSB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICAgICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAnY29uc3RydWN0b3InIGluIG9iaiAmJlxuICAgICAgICAgICAgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IHt9OyB9XG4gICAgICAgIGlmIChzcmMgPT09IHZvaWQgMCkgeyBzcmMgPSB7fTsgfVxuICAgICAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBzc3JEb2N1bWVudCA9IHtcbiAgICAgICAgYm9keToge30sXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBhY3RpdmVFbGVtZW50OiB7XG4gICAgICAgICAgICBibHVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBub2RlTmFtZTogJycsXG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH0sXG4gICAgICAgIGdldEVsZW1lbnRCeUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5pdEV2ZW50OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVFbGVtZW50TlM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgaW1wb3J0Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgICAgICAgaHJlZjogJycsXG4gICAgICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICAgICAgc2VhcmNoOiAnJyxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgICAgICB2YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgICAgIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgICAgICAgcmV0dXJuIGRvYztcbiAgICB9XG5cbiAgICB2YXIgc3NyV2luZG93ID0ge1xuICAgICAgICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gICAgICAgIG5hdmlnYXRvcjoge1xuICAgICAgICAgICAgdXNlckFnZW50OiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIGhhc2g6ICcnLFxuICAgICAgICAgICAgaG9zdDogJycsXG4gICAgICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgICAgICBwcm90b2NvbDogJycsXG4gICAgICAgICAgICBzZWFyY2g6ICcnLFxuICAgICAgICB9LFxuICAgICAgICBoaXN0b3J5OiB7XG4gICAgICAgICAgICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICAgICAgZ286IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGJhY2s6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgfSxcbiAgICAgICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBnZXRDb21wdXRlZFN0eWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBJbWFnZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBEYXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIHNjcmVlbjoge30sXG4gICAgICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIG1hdGNoTWVkaWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgICAgICAgdmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gICAgICAgIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gICAgICAgIHJldHVybiB3aW47XG4gICAgfVxuXG4gICAgZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG4gICAgZXhwb3J0cy5nZXREb2N1bWVudCA9IGdldERvY3VtZW50O1xuICAgIGV4cG9ydHMuZ2V0V2luZG93ID0gZ2V0V2luZG93O1xuICAgIGV4cG9ydHMuc3NyRG9jdW1lbnQgPSBzc3JEb2N1bWVudDtcbiAgICBleHBvcnRzLnNzcldpbmRvdyA9IHNzcldpbmRvdztcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG5cblxufSx7fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgQTExeSA9IHtcbiAgZ2V0UmFuZG9tTnVtYmVyOiBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIoc2l6ZSkge1xuICAgIGlmIChzaXplID09PSB2b2lkIDApIHtcbiAgICAgIHNpemUgPSAxNjtcbiAgICB9XG5cbiAgICB2YXIgcmFuZG9tQ2hhciA9IGZ1bmN0aW9uIHJhbmRvbUNoYXIoKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCgxNiAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDE2KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuICd4Jy5yZXBlYXQoc2l6ZSkucmVwbGFjZSgveC9nLCByYW5kb21DaGFyKTtcbiAgfSxcbiAgbWFrZUVsRm9jdXNhYmxlOiBmdW5jdGlvbiBtYWtlRWxGb2N1c2FibGUoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ3RhYkluZGV4JywgJzAnKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBtYWtlRWxOb3RGb2N1c2FibGU6IGZ1bmN0aW9uIG1ha2VFbE5vdEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnLTEnKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbFJvbGU6IGZ1bmN0aW9uIGFkZEVsUm9sZSgkZWwsIHJvbGUpIHtcbiAgICAkZWwuYXR0cigncm9sZScsIHJvbGUpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsUm9sZURlc2NyaXB0aW9uOiBmdW5jdGlvbiBhZGRFbFJvbGVEZXNjcmlwdGlvbigkZWwsIGRlc2NyaXB0aW9uKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtcm9sZS1kZXNjcmlwdGlvbicsIGRlc2NyaXB0aW9uKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbENvbnRyb2xzOiBmdW5jdGlvbiBhZGRFbENvbnRyb2xzKCRlbCwgY29udHJvbHMpIHtcbiAgICAkZWwuYXR0cignYXJpYS1jb250cm9scycsIGNvbnRyb2xzKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbExhYmVsOiBmdW5jdGlvbiBhZGRFbExhYmVsKCRlbCwgbGFiZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbElkOiBmdW5jdGlvbiBhZGRFbElkKCRlbCwgaWQpIHtcbiAgICAkZWwuYXR0cignaWQnLCBpZCk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxMaXZlOiBmdW5jdGlvbiBhZGRFbExpdmUoJGVsLCBsaXZlKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtbGl2ZScsIGxpdmUpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGRpc2FibGVFbDogZnVuY3Rpb24gZGlzYWJsZUVsKCRlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgZW5hYmxlRWw6IGZ1bmN0aW9uIGVuYWJsZUVsKCRlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgZmFsc2UpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIG9uRW50ZXJLZXk6IGZ1bmN0aW9uIG9uRW50ZXJLZXkoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKGUua2V5Q29kZSAhPT0gMTMpIHJldHVybjtcbiAgICB2YXIgJHRhcmdldEVsID0gKDAsIF9kb20uZGVmYXVsdCkoZS50YXJnZXQpO1xuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMubGFzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmICR0YXJnZXRFbC5pcyhcIi5cIiArIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcy5yZXBsYWNlKC8gL2csICcuJykpKSB7XG4gICAgICAkdGFyZ2V0RWxbMF0uY2xpY2soKTtcbiAgICB9XG4gIH0sXG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgbm90aWZpY2F0aW9uID0gc3dpcGVyLmExMXkubGl2ZVJlZ2lvbjtcbiAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIG5vdGlmaWNhdGlvbi5odG1sKCcnKTtcbiAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgfSxcbiAgdXBkYXRlTmF2aWdhdGlvbjogZnVuY3Rpb24gdXBkYXRlTmF2aWdhdGlvbigpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wIHx8ICFzd2lwZXIubmF2aWdhdGlvbikgcmV0dXJuO1xuICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24gPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kbmV4dEVsLFxuICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uLiRwcmV2RWw7XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkuZGlzYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxOb3RGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5lbmFibGVFbCgkcHJldkVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRwcmV2RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB1cGRhdGVQYWdpbmF0aW9uOiBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG5cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmVhY2goZnVuY3Rpb24gKGJ1bGxldEVsKSB7XG4gICAgICAgIHZhciAkYnVsbGV0RWwgPSAoMCwgX2RvbS5kZWZhdWx0KShidWxsZXRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkYnVsbGV0RWwpO1xuXG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkYnVsbGV0RWwsICdidXR0b24nKTtcbiAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgJGJ1bGxldEVsLmluZGV4KCkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIHN3aXBlci4kZWwuYXBwZW5kKHN3aXBlci5hMTF5LmxpdmVSZWdpb24pOyAvLyBDb250YWluZXJcblxuICAgIHZhciAkY29udGFpbmVyRWwgPSBzd2lwZXIuJGVsO1xuXG4gICAgaWYgKHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGVEZXNjcmlwdGlvbigkY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpIHtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyTWVzc2FnZSk7XG4gICAgfSAvLyBXcmFwcGVyXG5cblxuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyIHdyYXBwZXJJZCA9ICR3cmFwcGVyRWwuYXR0cignaWQnKSB8fCBcInN3aXBlci13cmFwcGVyLVwiICsgc3dpcGVyLmExMXkuZ2V0UmFuZG9tTnVtYmVyKDE2KTtcbiAgICB2YXIgbGl2ZTtcbiAgICBzd2lwZXIuYTExeS5hZGRFbElkKCR3cmFwcGVyRWwsIHdyYXBwZXJJZCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQpIHtcbiAgICAgIGxpdmUgPSAnb2ZmJztcbiAgICB9IGVsc2Uge1xuICAgICAgbGl2ZSA9ICdwb2xpdGUnO1xuICAgIH1cblxuICAgIHN3aXBlci5hMTF5LmFkZEVsTGl2ZSgkd3JhcHBlckVsLCBsaXZlKTsgLy8gU2xpZGVcblxuICAgIGlmIChwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpIHtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZURlc2NyaXB0aW9uKCgwLCBfZG9tLmRlZmF1bHQpKHN3aXBlci5zbGlkZXMpLCBwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgoMCwgX2RvbS5kZWZhdWx0KShzd2lwZXIuc2xpZGVzKSwgJ2dyb3VwJyk7XG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUVsKSB7XG4gICAgICB2YXIgJHNsaWRlRWwgPSAoMCwgX2RvbS5kZWZhdWx0KShzbGlkZUVsKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJHNsaWRlRWwsICRzbGlkZUVsLmluZGV4KCkgKyAxICsgXCIgLyBcIiArIHN3aXBlci5zbGlkZXMubGVuZ3RoKTtcbiAgICB9KTsgLy8gTmF2aWdhdGlvblxuXG4gICAgdmFyICRuZXh0RWw7XG4gICAgdmFyICRwcmV2RWw7XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG5cbiAgICAgIGlmICgkbmV4dEVsWzBdLnRhZ05hbWUgIT09ICdCVVRUT04nKSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkbmV4dEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICRuZXh0RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkbmV4dEVsLCBwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbENvbnRyb2xzKCRuZXh0RWwsIHdyYXBwZXJJZCk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcblxuICAgICAgaWYgKCRwcmV2RWxbMF0udGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRwcmV2RWwsICdidXR0b24nKTtcbiAgICAgICAgJHByZXZFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRwcmV2RWwsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsQ29udHJvbHMoJHByZXZFbCwgd3JhcHBlcklkKTtcbiAgICB9IC8vIFBhZ2luYXRpb25cblxuXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9uKCdrZXlkb3duJywgXCIuXCIgKyBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MucmVwbGFjZSgvIC9nLCAnLicpLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5hMTF5LmxpdmVSZWdpb24gJiYgc3dpcGVyLmExMXkubGl2ZVJlZ2lvbi5sZW5ndGggPiAwKSBzd2lwZXIuYTExeS5saXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgIHZhciAkbmV4dEVsO1xuICAgIHZhciAkcHJldkVsO1xuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCkge1xuICAgICAgJG5leHRFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9IC8vIFBhZ2luYXRpb25cblxuXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9mZigna2V5ZG93bicsIFwiLlwiICsgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzLnJlcGxhY2UoLyAvZywgJy4nKSwgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgfVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0ge1xuICBuYW1lOiAnYTExeScsXG4gIHBhcmFtczoge1xuICAgIGExMXk6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLFxuICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJyxcbiAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLFxuICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgICAgY29udGFpbmVyTWVzc2FnZTogbnVsbCxcbiAgICAgIGNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBpdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbFxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBhMTF5OiBfZXh0ZW5kcyh7fSwgQTExeSwge1xuICAgICAgICBsaXZlUmVnaW9uOiAoMCwgX2RvbS5kZWZhdWx0KShcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHN3aXBlci5wYXJhbXMuYTExeS5ub3RpZmljYXRpb25DbGFzcyArIFwiXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiPjwvc3Bhbj5cIilcbiAgICAgIH0pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYWZ0ZXJJbml0OiBmdW5jdGlvbiBhZnRlckluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS5pbml0KCk7XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICB0b0VkZ2U6IGZ1bmN0aW9uIHRvRWRnZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICB9LFxuICAgIGZyb21FZGdlOiBmdW5jdGlvbiBmcm9tRWRnZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICB9LFxuICAgIHBhZ2luYXRpb25VcGRhdGU6IGZ1bmN0aW9uIHBhZ2luYXRpb25VcGRhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTN9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgQXV0b3BsYXkgPSB7XG4gIHJ1bjogZnVuY3Rpb24gcnVuKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICB2YXIgZGVsYXkgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuXG4gICAgaWYgKCRhY3RpdmVTbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JykpIHtcbiAgICAgIGRlbGF5ID0gJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSB8fCBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSAoMCwgX3V0aWxzLm5leHRUaWNrKShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXV0b3BsYXlSZXN1bHQ7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICBhdXRvcGxheVJlc3VsdCA9IHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlVG8oMCwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZykgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO2Vsc2UgaWYgKGF1dG9wbGF5UmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICB9XG4gICAgfSwgZGVsYXkpO1xuICB9LFxuICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IHRydWU7XG4gICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0b3AnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKHNwZWVkKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlO1xuXG4gICAgaWYgKHNwZWVkID09PSAwIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH0sXG4gIG9uVmlzaWJpbGl0eUNoYW5nZTogZnVuY3Rpb24gb25WaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuXG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgfVxuICB9LFxuICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLiR3cmFwcGVyRWwpIHJldHVybjtcbiAgICBpZiAoZS50YXJnZXQgIT09IHN3aXBlci4kd3JhcHBlckVsWzBdKSByZXR1cm47XG4gICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG5cbiAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0ge1xuICBuYW1lOiAnYXV0b3BsYXknLFxuICBwYXJhbXM6IHtcbiAgICBhdXRvcGxheToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBkZWxheTogMzAwMCxcbiAgICAgIHdhaXRGb3JUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgZGlzYWJsZU9uSW50ZXJhY3Rpb246IHRydWUsXG4gICAgICBzdG9wT25MYXN0U2xpZGU6IGZhbHNlLFxuICAgICAgcmV2ZXJzZURpcmVjdGlvbjogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICgwLCBfdXRpbHMuYmluZE1vZHVsZU1ldGhvZHMpKHN3aXBlciwge1xuICAgICAgYXV0b3BsYXk6IF9leHRlbmRzKHt9LCBBdXRvcGxheSwge1xuICAgICAgICBydW5uaW5nOiBmYWxzZSxcbiAgICAgICAgcGF1c2VkOiBmYWxzZVxuICAgICAgfSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RhcnQoKTtcbiAgICAgICAgdmFyIGRvY3VtZW50ID0gKDAsIF9zc3JXaW5kb3cuZ2V0RG9jdW1lbnQpKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBzd2lwZXIuYXV0b3BsYXkub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gYmVmb3JlVHJhbnNpdGlvblN0YXJ0KHN3aXBlciwgc3BlZWQsIGludGVybmFsKSB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgaWYgKGludGVybmFsIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKHNwZWVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZXJGaXJzdE1vdmU6IGZ1bmN0aW9uIHNsaWRlckZpcnN0TW92ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCAmJiAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHN3aXBlci5hdXRvcGxheS5vblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy91dGlsc1wiOjkzLFwic3NyLXdpbmRvd1wiOjV9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgQ29udHJvbGxlciA9IHtcbiAgTGluZWFyU3BsaW5lOiBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoeCwgeSkge1xuICAgIHZhciBiaW5hcnlTZWFyY2ggPSBmdW5jdGlvbiBzZWFyY2goKSB7XG4gICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICB2YXIgbWluSW5kZXg7XG4gICAgICB2YXIgZ3Vlc3M7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCB2YWwpIHtcbiAgICAgICAgbWluSW5kZXggPSAtMTtcbiAgICAgICAgbWF4SW5kZXggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKG1heEluZGV4IC0gbWluSW5kZXggPiAxKSB7XG4gICAgICAgICAgZ3Vlc3MgPSBtYXhJbmRleCArIG1pbkluZGV4ID4+IDE7XG5cbiAgICAgICAgICBpZiAoYXJyYXlbZ3Vlc3NdIDw9IHZhbCkge1xuICAgICAgICAgICAgbWluSW5kZXggPSBndWVzcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4SW5kZXggPSBndWVzcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF4SW5kZXg7XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmxhc3RJbmRleCA9IHgubGVuZ3RoIC0gMTsgLy8gR2l2ZW4gYW4geCB2YWx1ZSAoeDIpLCByZXR1cm4gdGhlIGV4cGVjdGVkIHkyIHZhbHVlOlxuICAgIC8vICh4MSx5MSkgaXMgdGhlIGtub3duIHBvaW50IGJlZm9yZSBnaXZlbiB2YWx1ZSxcbiAgICAvLyAoeDMseTMpIGlzIHRoZSBrbm93biBwb2ludCBhZnRlciBnaXZlbiB2YWx1ZS5cblxuICAgIHZhciBpMTtcbiAgICB2YXIgaTM7XG5cbiAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoeDIpIHtcbiAgICAgIGlmICgheDIpIHJldHVybiAwOyAvLyBHZXQgdGhlIGluZGV4ZXMgb2YgeDEgYW5kIHgzICh0aGUgYXJyYXkgaW5kZXhlcyBiZWZvcmUgYW5kIGFmdGVyIGdpdmVuIHgyKTpcblxuICAgICAgaTMgPSBiaW5hcnlTZWFyY2godGhpcy54LCB4Mik7XG4gICAgICBpMSA9IGkzIC0gMTsgLy8gV2UgaGF2ZSBvdXIgaW5kZXhlcyBpMSAmIGkzLCBzbyB3ZSBjYW4gY2FsY3VsYXRlIGFscmVhZHk6XG4gICAgICAvLyB5MiA6PSAoKHgy4oiSeDEpIMOXICh5M+KIknkxKSkgw7cgKHgz4oiSeDEpICsgeTFcblxuICAgICAgcmV0dXJuICh4MiAtIHRoaXMueFtpMV0pICogKHRoaXMueVtpM10gLSB0aGlzLnlbaTFdKSAvICh0aGlzLnhbaTNdIC0gdGhpcy54W2kxXSkgKyB0aGlzLnlbaTFdO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLy8geHh4OiBmb3Igbm93IGkgd2lsbCBqdXN0IHNhdmUgb25lIHNwbGluZSBmdW5jdGlvbiB0byB0b1xuICBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBuZXcgQ29udHJvbGxlci5MaW5lYXJTcGxpbmUoc3dpcGVyLnNsaWRlc0dyaWQsIGMuc2xpZGVzR3JpZCkgOiBuZXcgQ29udHJvbGxlci5MaW5lYXJTcGxpbmUoc3dpcGVyLnNuYXBHcmlkLCBjLnNuYXBHcmlkKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKF9zZXRUcmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICB2YXIgbXVsdGlwbGllcjtcbiAgICB2YXIgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICB2YXIgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjKSB7XG4gICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXJcbiAgICAgIC8vIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSB0aGlzIG9ubHkgb25jZSBhbmQgcmVjYWxsIGl0IGZvciB0aGUgaW50ZXJwb2xhdGlvblxuICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7IC8vIGkgYW0gbm90IHN1cmUgd2h5IHRoZSB2YWx1ZXMgaGF2ZSB0byBiZSBtdWx0aXBsaWNhdGVkIHRoaXMgd2F5LCB0cmllZCB0byBpbnZlcnQgdGhlIHNuYXBHcmlkXG4gICAgICAgIC8vIGJ1dCBpdCBkaWQgbm90IHdvcmsgb3V0XG5cbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IC1zd2lwZXIuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXRyYW5zbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgIG11bHRpcGxpZXIgPSAoYy5tYXhUcmFuc2xhdGUoKSAtIGMubWluVHJhbnNsYXRlKCkpIC8gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIG11bHRpcGxpZXIgKyBjLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UpIHtcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IGMubWF4VHJhbnNsYXRlKCkgLSBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgICAgfVxuXG4gICAgICBjLnVwZGF0ZVByb2dyZXNzKGNvbnRyb2xsZWRUcmFuc2xhdGUpO1xuICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIGMudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIHZhciBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICB2YXIgaTtcblxuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGMpIHtcbiAgICAgIGMuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgc3dpcGVyKTtcblxuICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgIGMudHJhbnNpdGlvblN0YXJ0KCk7XG5cbiAgICAgICAgaWYgKGMucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICAoMCwgX3V0aWxzLm5leHRUaWNrKShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMuJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWNvbnRyb2xsZWQpIHJldHVybjtcblxuICAgICAgICAgIGlmIChjLnBhcmFtcy5sb29wICYmIHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgYy5sb29wRml4KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYy50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgbmFtZTogJ2NvbnRyb2xsZXInLFxuICBwYXJhbXM6IHtcbiAgICBjb250cm9sbGVyOiB7XG4gICAgICBjb250cm9sOiB1bmRlZmluZWQsXG4gICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgIGJ5OiAnc2xpZGUnIC8vIG9yICdjb250YWluZXInXG5cbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICgwLCBfdXRpbHMuYmluZE1vZHVsZU1ldGhvZHMpKHN3aXBlciwge1xuICAgICAgY29udHJvbGxlcjogX2V4dGVuZHMoe1xuICAgICAgICBjb250cm9sOiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbFxuICAgICAgfSwgQ29udHJvbGxlcilcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuXG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG5cbiAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGU6IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG5cbiAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyLCB0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRCcmVha3BvaW50cztcblxudmFyIF9zc3JXaW5kb3cgPSByZXF1aXJlKFwic3NyLXdpbmRvd1wiKTtcblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTsgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aFxuXG4gIGlmICghYnJlYWtwb2ludHMpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBicmVha3BvaW50ID0gZmFsc2U7XG4gIHZhciBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgdmFyIG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgdmFyIHZhbHVlID0gd2luZG93LmlubmVySGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHBvaW50OiBwb2ludFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnQ6IHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgX3BvaW50cyRpID0gcG9pbnRzW2ldLFxuICAgICAgICBwb2ludCA9IF9wb2ludHMkaS5wb2ludCxcbiAgICAgICAgdmFsdWUgPSBfcG9pbnRzJGkudmFsdWU7XG5cbiAgICBpZiAodmFsdWUgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cbn0se1wic3NyLXdpbmRvd1wiOjV9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zZXRCcmVha3BvaW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zZXRCcmVha3BvaW50XCIpKTtcblxudmFyIF9nZXRCcmVha3BvaW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRCcmVha3BvaW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBzZXRCcmVha3BvaW50OiBfc2V0QnJlYWtwb2ludC5kZWZhdWx0LFxuICBnZXRCcmVha3BvaW50OiBfZ2V0QnJlYWtwb2ludC5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4vZ2V0QnJlYWtwb2ludFwiOjksXCIuL3NldEJyZWFrcG9pbnRcIjoxMX1dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2V0QnJlYWtwb2ludDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIGluaXRpYWxpemVkID0gc3dpcGVyLmluaXRpYWxpemVkLFxuICAgICAgX3N3aXBlciRsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzLFxuICAgICAgbG9vcGVkU2xpZGVzID0gX3N3aXBlciRsb29wZWRTbGlkZXMgPT09IHZvaWQgMCA/IDAgOiBfc3dpcGVyJGxvb3BlZFNsaWRlcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkZWwgPSBzd2lwZXIuJGVsO1xuICB2YXIgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuXG4gIHZhciBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMpO1xuXG4gIGlmIChicmVha3BvaW50ICYmIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCAhPT0gYnJlYWtwb2ludCkge1xuICAgIHZhciBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChicmVha3BvaW50T25seVBhcmFtcykge1xuICAgICAgWydzbGlkZXNQZXJWaWV3JywgJ3NwYWNlQmV0d2VlbicsICdzbGlkZXNQZXJHcm91cCcsICdzbGlkZXNQZXJHcm91cFNraXAnLCAnc2xpZGVzUGVyQ29sdW1uJ10uZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgdmFyIHBhcmFtVmFsdWUgPSBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV07XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1WYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblxuICAgICAgICBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3JyAmJiAocGFyYW1WYWx1ZSA9PT0gJ0FVVE8nIHx8IHBhcmFtVmFsdWUgPT09ICdhdXRvJykpIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSAnYXV0byc7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3Jykge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlRmxvYXQocGFyYW1WYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VJbnQocGFyYW1WYWx1ZSwgMTApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgICB2YXIgd2FzTXVsdGlSb3cgPSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMTtcbiAgICB2YXIgaXNNdWx0aVJvdyA9IGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMTtcblxuICAgIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdyBcIiArIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdy1jb2x1bW5cIik7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93XCIpO1xuXG4gICAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93LWNvbHVtblwiKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgICB2YXIgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgKDAsIF91dGlscy5leHRlbmQpKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIsIHtcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICAgIH0pO1xuICAgIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gICAgc3dpcGVyLmVtaXQoJ19iZWZvcmVCcmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG5cbiAgICBpZiAobmVlZHNSZUxvb3AgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIH1cbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG4gIHZhciBsYXN0U2xpZGVQb3NpdGlvbiA9IHN3aXBlci5zbGlkZXMubGVuZ3RoID4gMCAmJiBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICsgcGFyYW1zLnNwYWNlQmV0d2VlbiAqIChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpICsgc3dpcGVyLnNsaWRlc1swXS5vZmZzZXRXaWR0aCAqIHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gIGlmIChwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICYmIHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlciAmJiBsYXN0U2xpZGVQb3NpdGlvbikge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IGxhc3RTbGlkZVBvc2l0aW9uIDw9IHN3aXBlci5zaXplO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gIH1cblxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkOyAvLyBldmVudHNcblxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcblxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uKSBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgfVxufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3dcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se31dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3NlcztcblxuZnVuY3Rpb24gYWRkQ2xhc3NlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXMsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bCxcbiAgICAgICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlO1xuICB2YXIgc3VmZml4ZXMgPSBbXTtcbiAgc3VmZml4ZXMucHVzaCgnaW5pdGlhbGl6ZWQnKTtcbiAgc3VmZml4ZXMucHVzaChwYXJhbXMuZGlyZWN0aW9uKTtcblxuICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnZnJlZS1tb2RlJyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdhdXRvaGVpZ2h0Jyk7XG4gIH1cblxuICBpZiAocnRsKSB7XG4gICAgc3VmZml4ZXMucHVzaCgncnRsJyk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdtdWx0aXJvdycpO1xuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgc3VmZml4ZXMucHVzaCgnbXVsdGlyb3ctY29sdW1uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRldmljZS5hbmRyb2lkKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnYW5kcm9pZCcpO1xuICB9XG5cbiAgaWYgKGRldmljZS5pb3MpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdpb3MnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2Nzcy1tb2RlJyk7XG4gIH1cblxuICBzdWZmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdWZmaXgpIHtcbiAgICBjbGFzc05hbWVzLnB1c2gocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBzdWZmaXgpO1xuICB9KTtcbiAgJGVsLmFkZENsYXNzKGNsYXNzTmFtZXMuam9pbignICcpKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG59LHt9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9hZGRDbGFzc2VzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRDbGFzc2VzXCIpKTtcblxudmFyIF9yZW1vdmVDbGFzc2VzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZW1vdmVDbGFzc2VzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBhZGRDbGFzc2VzOiBfYWRkQ2xhc3Nlcy5kZWZhdWx0LFxuICByZW1vdmVDbGFzc2VzOiBfcmVtb3ZlQ2xhc3Nlcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4vYWRkQ2xhc3Nlc1wiOjEzLFwiLi9yZW1vdmVDbGFzc2VzXCI6MTV9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZUNsYXNzZXM7XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgIGNsYXNzTmFtZXMgPSBzd2lwZXIuY2xhc3NOYW1lcztcbiAgJGVsLnJlbW92ZUNsYXNzKGNsYXNzTmFtZXMuam9pbignICcpKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG59LHt9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG52YXIgX2dldFN1cHBvcnQgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvZ2V0LXN1cHBvcnRcIik7XG5cbnZhciBfZ2V0RGV2aWNlID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2dldC1kZXZpY2VcIik7XG5cbnZhciBfZ2V0QnJvd3NlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9nZXQtYnJvd3NlclwiKTtcblxudmFyIF9yZXNpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL3Jlc2l6ZS9yZXNpemVcIikpO1xuXG52YXIgX29ic2VydmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlclwiKSk7XG5cbnZhciBfbW9kdWxhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxhclwiKSk7XG5cbnZhciBfZXZlbnRzRW1pdHRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXZlbnRzLWVtaXR0ZXJcIikpO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91cGRhdGUvaW5kZXhcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHJhbnNsYXRlL2luZGV4XCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb24vaW5kZXhcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2xpZGUvaW5kZXhcIikpO1xuXG52YXIgX2luZGV4NSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbG9vcC9pbmRleFwiKSk7XG5cbnZhciBfaW5kZXg2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ncmFiLWN1cnNvci9pbmRleFwiKSk7XG5cbnZhciBfaW5kZXg3ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tYW5pcHVsYXRpb24vaW5kZXhcIikpO1xuXG52YXIgX2luZGV4OCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXZlbnRzL2luZGV4XCIpKTtcblxudmFyIF9pbmRleDkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2JyZWFrcG9pbnRzL2luZGV4XCIpKTtcblxudmFyIF9pbmRleDEwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jbGFzc2VzL2luZGV4XCIpKTtcblxudmFyIF9pbmRleDExID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbWFnZXMvaW5kZXhcIikpO1xuXG52YXIgX2luZGV4MTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NoZWNrLW92ZXJmbG93L2luZGV4XCIpKTtcblxudmFyIF9kZWZhdWx0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZGVmYXVsdHNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBwcm90b3R5cGVzID0ge1xuICBtb2R1bGFyOiBfbW9kdWxhci5kZWZhdWx0LFxuICBldmVudHNFbWl0dGVyOiBfZXZlbnRzRW1pdHRlci5kZWZhdWx0LFxuICB1cGRhdGU6IF9pbmRleC5kZWZhdWx0LFxuICB0cmFuc2xhdGU6IF9pbmRleDIuZGVmYXVsdCxcbiAgdHJhbnNpdGlvbjogX2luZGV4My5kZWZhdWx0LFxuICBzbGlkZTogX2luZGV4NC5kZWZhdWx0LFxuICBsb29wOiBfaW5kZXg1LmRlZmF1bHQsXG4gIGdyYWJDdXJzb3I6IF9pbmRleDYuZGVmYXVsdCxcbiAgbWFuaXB1bGF0aW9uOiBfaW5kZXg3LmRlZmF1bHQsXG4gIGV2ZW50czogX2luZGV4OC5kZWZhdWx0LFxuICBicmVha3BvaW50czogX2luZGV4OS5kZWZhdWx0LFxuICBjaGVja092ZXJmbG93OiBfaW5kZXgxMi5kZWZhdWx0LFxuICBjbGFzc2VzOiBfaW5kZXgxMC5kZWZhdWx0LFxuICBpbWFnZXM6IF9pbmRleDExLmRlZmF1bHRcbn07XG52YXIgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuXG52YXIgU3dpcGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3dpcGVyKCkge1xuICAgIHZhciBlbDtcbiAgICB2YXIgcGFyYW1zO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwgPSBhcmdzWzBdO1xuICAgICAgcGFyYW1zID0gYXJnc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gKDAsIF91dGlscy5leHRlbmQpKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDsgLy8gU3dpcGVyIEluc3RhbmNlXG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc3VwcG9ydCA9ICgwLCBfZ2V0U3VwcG9ydC5nZXRTdXBwb3J0KSgpO1xuICAgIHN3aXBlci5kZXZpY2UgPSAoMCwgX2dldERldmljZS5nZXREZXZpY2UpKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gKDAsIF9nZXRCcm93c2VyLmdldEJyb3dzZXIpKCk7XG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLm1vZHVsZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2lwZXIubW9kdWxlcyA9IHt9O1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHN3aXBlci5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gc3dpcGVyLm1vZHVsZXNbbW9kdWxlTmFtZV07XG5cbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIHZhciBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhtb2R1bGUucGFyYW1zKVswXTtcbiAgICAgICAgdmFyIG1vZHVsZVBhcmFtcyA9IG1vZHVsZS5wYXJhbXNbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkge1xuICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcblxuICAgIHZhciBzd2lwZXJQYXJhbXMgPSAoMCwgX3V0aWxzLmV4dGVuZCkoe30sIF9kZWZhdWx0cy5kZWZhdWx0KTtcbiAgICBzd2lwZXIudXNlUGFyYW1zKHN3aXBlclBhcmFtcyk7IC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcblxuICAgIHN3aXBlci5wYXJhbXMgPSAoMCwgX3V0aWxzLmV4dGVuZCkoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSAoMCwgX3V0aWxzLmV4dGVuZCkoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSAoMCwgX3V0aWxzLmV4dGVuZCkoe30sIHBhcmFtcyk7IC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcblxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5wYXJhbXMub24pLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgIH0gLy8gU2F2ZSBEb20gbGliXG5cblxuICAgIHN3aXBlci4kID0gX2RvbS5kZWZhdWx0OyAvLyBGaW5kIGVsXG5cbiAgICB2YXIgJGVsID0gKDAsIF9kb20uZGVmYXVsdCkoc3dpcGVyLnBhcmFtcy5lbCk7XG4gICAgZWwgPSAkZWxbMF07XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIHN3aXBlcnMgPSBbXTtcbiAgICAgICRlbC5lYWNoKGZ1bmN0aW9uIChjb250YWluZXJFbCkge1xuICAgICAgICB2YXIgbmV3UGFyYW1zID0gKDAsIF91dGlscy5leHRlbmQpKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7IC8vIEZpbmQgV3JhcHBlclxuXG4gICAgdmFyICR3cmFwcGVyRWw7XG5cbiAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICR3cmFwcGVyRWwgPSAoMCwgX2RvbS5kZWZhdWx0KShlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcykpOyAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuXG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihvcHRpb25zKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwgPSAkZWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgfSAvLyBFeHRlbmQgU3dpcGVyXG5cblxuICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIsIHtcbiAgICAgICRlbDogJGVsLFxuICAgICAgZWw6IGVsLFxuICAgICAgJHdyYXBwZXJFbDogJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSxcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6ICgwLCBfZG9tLmRlZmF1bHQpKCksXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsOiBmdW5jdGlvbiBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWw6IGZ1bmN0aW9uIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogJHdyYXBwZXJFbC5jc3MoJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94JyxcbiAgICAgIC8vIEluZGV4ZXNcbiAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgLy8gUHJvcHNcbiAgICAgIHRyYW5zbGF0ZTogMCxcbiAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAvLyBMb2Nrc1xuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgdG91Y2hFdmVudHM6IGZ1bmN0aW9uIHRvdWNoRXZlbnRzKCkge1xuICAgICAgICB2YXIgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ107XG4gICAgICAgIHZhciBkZXNrdG9wID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnXTtcblxuICAgICAgICBpZiAoc3dpcGVyLnN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7XG4gICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgIGVuZDogdG91Y2hbMl0sXG4gICAgICAgICAgY2FuY2VsOiB0b3VjaFszXVxuICAgICAgICB9O1xuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgZW5kOiBkZXNrdG9wWzJdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgfSgpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb3JtRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiAoMCwgX3V0aWxzLm5vdykoKSxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNUb3VjaEV2ZW50OiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pOyAvLyBJbnN0YWxsIE1vZHVsZXNcblxuICAgIHN3aXBlci51c2VNb2R1bGVzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTsgLy8gSW5pdFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9IC8vIFJldHVybiBhcHAgaW5zdGFuY2VcblxuXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2lwZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5lbWl0Q29udGFpbmVyQ2xhc3NlcyA9IGZ1bmN0aW9uIGVtaXRDb250YWluZXJDbGFzc2VzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIHZhciBjbGFzc2VzID0gc3dpcGVyLmVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1jb250YWluZXInKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpID09PSAwO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfY29udGFpbmVyQ2xhc3NlcycsIGNsYXNzZXMuam9pbignICcpKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24gZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXItc2xpZGUnKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpID09PSAwO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTtcblxuICBfcHJvdG8uZW1pdFNsaWRlc0NsYXNzZXMgPSBmdW5jdGlvbiBlbWl0U2xpZGVzQ2xhc3NlcygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVzLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwpIHtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gc3dpcGVyLmdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zbGlkZXNQZXJWaWV3RHluYW1pYyA9IGZ1bmN0aW9uIHNsaWRlc1BlclZpZXdEeW5hbWljKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHNwdiA9IDE7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICB2YXIgYnJlYWtMb29wO1xuXG4gICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pID0gYWN0aXZlSW5kZXggLSAxOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbX2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW19pXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2kyID0gYWN0aXZlSW5kZXggKyAxOyBfaTIgPCBzbGlkZXMubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzR3JpZFtfaTJdIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplKSB7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3B2O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsgLy8gQnJlYWtwb2ludHNcblxuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGVkO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfTtcblxuICBfcHJvdG8uY2hhbmdlRGlyZWN0aW9uID0gZnVuY3Rpb24gY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG5cbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cblxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cblxuICAgIHN3aXBlci4kZWwucmVtb3ZlQ2xhc3MoXCJcIiArIHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIGN1cnJlbnREaXJlY3Rpb24pLmFkZENsYXNzKFwiXCIgKyBzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBuZXdEaXJlY3Rpb24pO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH07XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpOyAvLyBTZXQgYnJlYWtwb2ludFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfSAvLyBBZGQgQ2xhc3Nlc1xuXG5cbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpOyAvLyBDcmVhdGUgbG9vcFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9IC8vIFVwZGF0ZSBzaXplXG5cblxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7IC8vIFVwZGF0ZSBzbGlkZXNcblxuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfSAvLyBTZXQgR3JhYiBDdXJzb3JcblxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICBzd2lwZXIucHJlbG9hZEltYWdlcygpO1xuICAgIH0gLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICB9IC8vIEF0dGFjaCBldmVudHNcblxuXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7IC8vIEVtaXRcblxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveShkZWxldGVJbnN0YW5jZSwgY2xlYW5TdHlsZXMpIHtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlSW5zdGFuY2UgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChjbGVhblN0eWxlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBjbGVhblN0eWxlcyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTsgLy8gSW5pdCBGbGFnXG5cbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTsgLy8gRGV0YWNoIGV2ZW50c1xuXG4gICAgc3dpcGVyLmRldGFjaEV2ZW50cygpOyAvLyBEZXN0cm95IGxvb3BcblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfSAvLyBDbGVhbnVwIHN0eWxlc1xuXG5cbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICAkZWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICR3cmFwcGVyRWwucmVtb3ZlQXR0cignc3R5bGUnKTtcblxuICAgICAgaWYgKHNsaWRlcyAmJiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHNsaWRlcy5yZW1vdmVDbGFzcyhbcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgcGFyYW1zLnNsaWRlTmV4dENsYXNzLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3NdLmpvaW4oJyAnKSkucmVtb3ZlQXR0cignc3R5bGUnKS5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdkZXN0cm95Jyk7IC8vIERldGFjaCBlbWl0dGVyIGV2ZW50c1xuXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG5cbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBzd2lwZXIuJGVsWzBdLnN3aXBlciA9IG51bGw7XG4gICAgICAoMCwgX3V0aWxzLmRlbGV0ZVByb3BzKShzd2lwZXIpO1xuICAgIH1cblxuICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIFN3aXBlci5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uIGV4dGVuZERlZmF1bHRzKG5ld0RlZmF1bHRzKSB7XG4gICAgKDAsIF91dGlscy5leHRlbmQpKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgfTtcblxuICBTd2lwZXIuaW5zdGFsbE1vZHVsZSA9IGZ1bmN0aW9uIGluc3RhbGxNb2R1bGUobW9kdWxlKSB7XG4gICAgaWYgKCFTd2lwZXIucHJvdG90eXBlLm1vZHVsZXMpIFN3aXBlci5wcm90b3R5cGUubW9kdWxlcyA9IHt9O1xuICAgIHZhciBuYW1lID0gbW9kdWxlLm5hbWUgfHwgT2JqZWN0LmtleXMoU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzKS5sZW5ndGggKyBcIl9cIiArICgwLCBfdXRpbHMubm93KSgpO1xuICAgIFN3aXBlci5wcm90b3R5cGUubW9kdWxlc1tuYW1lXSA9IG1vZHVsZTtcbiAgfTtcblxuICBTd2lwZXIudXNlID0gZnVuY3Rpb24gdXNlKG1vZHVsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBTd2lwZXIuaW5zdGFsbE1vZHVsZShtKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG5cbiAgICBTd2lwZXIuaW5zdGFsbE1vZHVsZShtb2R1bGUpO1xuICAgIHJldHVybiBTd2lwZXI7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN3aXBlciwgbnVsbCwgW3tcbiAgICBrZXk6IFwiZXh0ZW5kZWREZWZhdWx0c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlZmF1bHRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRzLmRlZmF1bHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN3aXBlcjtcbn0oKTtcblxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvdG90eXBlR3JvdXApIHtcbiAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2goZnVuY3Rpb24gKHByb3RvTWV0aG9kKSB7XG4gICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gIH0pO1xufSk7XG5Td2lwZXIudXNlKFtfcmVzaXplLmRlZmF1bHQsIF9vYnNlcnZlci5kZWZhdWx0XSk7XG52YXIgX2RlZmF1bHQgPSBTd2lwZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi4vLi4vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlclwiOjg3LFwiLi4vLi4vbW9kdWxlcy9yZXNpemUvcmVzaXplXCI6ODgsXCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL2dldC1icm93c2VyXCI6OTAsXCIuLi8uLi91dGlscy9nZXQtZGV2aWNlXCI6OTEsXCIuLi8uLi91dGlscy9nZXQtc3VwcG9ydFwiOjkyLFwiLi4vLi4vdXRpbHMvdXRpbHNcIjo5MyxcIi4vYnJlYWtwb2ludHMvaW5kZXhcIjoxMCxcIi4vY2hlY2stb3ZlcmZsb3cvaW5kZXhcIjoxMixcIi4vY2xhc3Nlcy9pbmRleFwiOjE0LFwiLi9kZWZhdWx0c1wiOjE3LFwiLi9ldmVudHMtZW1pdHRlclwiOjE4LFwiLi9ldmVudHMvaW5kZXhcIjoxOSxcIi4vZ3JhYi1jdXJzb3IvaW5kZXhcIjoyNixcIi4vaW1hZ2VzL2luZGV4XCI6MjksXCIuL2xvb3AvaW5kZXhcIjozMixcIi4vbWFuaXB1bGF0aW9uL2luZGV4XCI6MzgsXCIuL21vZHVsYXJcIjo0MixcIi4vc2xpZGUvaW5kZXhcIjo0MyxcIi4vdHJhbnNpdGlvbi9pbmRleFwiOjUxLFwiLi90cmFuc2xhdGUvaW5kZXhcIjo1NixcIi4vdXBkYXRlL2luZGV4XCI6NjF9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgaW5pdDogdHJ1ZSxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnY29udGFpbmVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIG5lc3RlZDogZmFsc2UsXG4gIC8vIE92ZXJyaWRlc1xuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuICAvLyBzc3JcbiAgdXNlckFnZW50OiBudWxsLFxuICB1cmw6IG51bGwsXG4gIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgLy8gRnJlZSBtb2RlXG4gIGZyZWVNb2RlOiBmYWxzZSxcbiAgZnJlZU1vZGVNb21lbnR1bTogdHJ1ZSxcbiAgZnJlZU1vZGVNb21lbnR1bVJhdGlvOiAxLFxuICBmcmVlTW9kZU1vbWVudHVtQm91bmNlOiB0cnVlLFxuICBmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gIGZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLFxuICBmcmVlTW9kZVN0aWNreTogZmFsc2UsXG4gIGZyZWVNb2RlTWluaW11bVZlbG9jaXR5OiAwLjAyLFxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJyxcbiAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuICAvLyBCcmVha3BvaW50c1xuICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICAvLyBTbGlkZXMgZ3JpZFxuICBzcGFjZUJldHdlZW46IDAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgc2xpZGVzUGVyQ29sdW1uRmlsbDogJ2NvbHVtbicsXG4gIHNsaWRlc1Blckdyb3VwOiAxLFxuICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsXG4gIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICB3YXRjaE92ZXJmbG93OiBmYWxzZSxcbiAgLy8gUm91bmQgbGVuZ3RoXG4gIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogMCxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICB1bmlxdWVOYXZFbGVtZW50czogdHJ1ZSxcbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IGZhbHNlLFxuICAvLyBDdXJzb3JcbiAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAvLyBJbWFnZXNcbiAgcHJlbG9hZEltYWdlczogdHJ1ZSxcbiAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgbG9vcEZpbGxHcm91cFdpdGhCbGFuazogZmFsc2UsXG4gIGxvb3BQcmV2ZW50c1NsaWRlOiB0cnVlLFxuICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgYWxsb3dTbGlkZVByZXY6IHRydWUsXG4gIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICBzd2lwZUhhbmRsZXI6IG51bGwsXG4gIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gIG5vU3dpcGluZzogdHJ1ZSxcbiAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLWNvbnRhaW5lci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1pbnZpc2libGUtYmxhbmsnLFxuICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gIHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLWFjdGl2ZScsXG4gIHNsaWRlVmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXZpc2libGUnLFxuICBzbGlkZUR1cGxpY2F0ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZUR1cGxpY2F0ZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICBzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldicsXG4gIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyJyxcbiAgLy8gQ2FsbGJhY2tzXG4gIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSxcbiAgLy8gSW50ZXJuYWxzXG4gIF9lbWl0Q2xhc3NlczogZmFsc2Vcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se31dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xudmFyIF9kZWZhdWx0ID0ge1xuICBvbjogZnVuY3Rpb24gb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIHZhciBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2U6IGZ1bmN0aW9uIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuXG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcblxuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25Bbnk6IGZ1bmN0aW9uIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuXG4gICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcikgPCAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnk6IGZ1bmN0aW9uIG9mZkFueShoYW5kbGVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIHZhciBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlciwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSAmJiBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIHZhciBldmVudHM7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIGNvbnRleHQ7XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cblxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICB2YXIgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgW2V2ZW50XS5jb25jYXQoZGF0YSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc3NyV2luZG93ID0gcmVxdWlyZShcInNzci13aW5kb3dcIik7XG5cbnZhciBfb25Ub3VjaFN0YXJ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vblRvdWNoU3RhcnRcIikpO1xuXG52YXIgX29uVG91Y2hNb3ZlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vblRvdWNoTW92ZVwiKSk7XG5cbnZhciBfb25Ub3VjaEVuZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb25Ub3VjaEVuZFwiKSk7XG5cbnZhciBfb25SZXNpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29uUmVzaXplXCIpKTtcblxudmFyIF9vbkNsaWNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vbkNsaWNrXCIpKTtcblxudmFyIF9vblNjcm9sbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb25TY3JvbGxcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZHVtbXlFdmVudEF0dGFjaGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGR1bW15RXZlbnRMaXN0ZW5lcigpIHt9XG5cbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoRXZlbnRzID0gc3dpcGVyLnRvdWNoRXZlbnRzLFxuICAgICAgZWwgPSBzd2lwZXIuZWwsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IF9vblRvdWNoU3RhcnQuZGVmYXVsdC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IF9vblRvdWNoTW92ZS5kZWZhdWx0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBfb25Ub3VjaEVuZC5kZWZhdWx0LmJpbmQoc3dpcGVyKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBfb25TY3JvbGwuZGVmYXVsdC5iaW5kKHN3aXBlcik7XG4gIH1cblxuICBzd2lwZXIub25DbGljayA9IF9vbkNsaWNrLmRlZmF1bHQuYmluZChzd2lwZXIpO1xuICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgaWYgKCFzdXBwb3J0LnRvdWNoICYmIHN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSA6IGZhbHNlO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IGNhcHR1cmVcbiAgICAgIH0gOiBjYXB0dXJlKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGlmICghZHVtbXlFdmVudEF0dGFjaGVkKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBkdW1teUV2ZW50TGlzdGVuZXIpO1xuICAgICAgICBkdW1teUV2ZW50QXR0YWNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhZGV2aWNlLmlvcyAmJiAhZGV2aWNlLmFuZHJvaWQgfHwgcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIXN1cHBvcnQudG91Y2ggJiYgZGV2aWNlLmlvcykge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfSAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuXG5cbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9IC8vIFJlc2l6ZSBoYW5kbGVyXG5cblxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyLm9uKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBfb25SZXNpemUuZGVmYXVsdCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLm9uKCdvYnNlcnZlclVwZGF0ZScsIF9vblJlc2l6ZS5kZWZhdWx0LCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cyxcbiAgICAgIGVsID0gc3dpcGVyLmVsLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIGRldmljZSA9IHN3aXBlci5kZXZpY2UsXG4gICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gIHZhciBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkOyAvLyBUb3VjaCBFdmVudHNcblxuICBpZiAoIXN1cHBvcnQudG91Y2ggJiYgc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3VwcG9ydC50b3VjaCkge1xuICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAnb25Ub3VjaFN0YXJ0JyAmJiBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICAgIH0gOiBmYWxzZTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5jYW5jZWwsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhZGV2aWNlLmlvcyAmJiAhZGV2aWNlLmFuZHJvaWQgfHwgcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIXN1cHBvcnQudG91Y2ggJiYgZGV2aWNlLmlvcykge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfSAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuXG5cbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9IC8vIFJlc2l6ZSBoYW5kbGVyXG5cblxuICBzd2lwZXIub2ZmKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBfb25SZXNpemUuZGVmYXVsdCk7XG59XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgYXR0YWNoRXZlbnRzOiBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50czogZGV0YWNoRXZlbnRzXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4vb25DbGlja1wiOjIwLFwiLi9vblJlc2l6ZVwiOjIxLFwiLi9vblNjcm9sbFwiOjIyLFwiLi9vblRvdWNoRW5kXCI6MjMsXCIuL29uVG91Y2hNb3ZlXCI6MjQsXCIuL29uVG91Y2hTdGFydFwiOjI1LFwic3NyLXdpbmRvd1wiOjV9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9uQ2xpY2s7XG5cbmZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcblxuICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxufVxufSx7fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBvblJlc2l6ZTtcblxuZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGVsID0gc3dpcGVyLmVsO1xuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjsgLy8gQnJlYWtwb2ludHNcblxuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfSAvLyBTYXZlIGxvY2tzXG5cblxuICB2YXIgYWxsb3dTbGlkZU5leHQgPSBzd2lwZXIuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldiA9IHN3aXBlci5hbGxvd1NsaWRlUHJldixcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkOyAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICB9XG5cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICB9IC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcblxuXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcblxuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG59LHt9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9uU2Nyb2xsO1xuXG5mdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgaWYgKHJ0bFRyYW5zbGF0ZSkge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IHdyYXBwZXJFbC5zY3JvbGxXaWR0aCAtIHdyYXBwZXJFbC5vZmZzZXRXaWR0aCAtIHdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gLTApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgdmFyIG5ld1Byb2dyZXNzO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn1cbn0se31dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gb25Ub3VjaEVuZDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cblxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cblxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH0gLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG5cblxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfSAvLyBUaW1lIGRpZmZcblxuXG4gIHZhciB0b3VjaEVuZFRpbWUgPSAoMCwgX3V0aWxzLm5vdykoKTtcbiAgdmFyIHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTsgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG5cbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG5cbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7XG4gICAgfVxuICB9XG5cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gKDAsIF91dGlscy5ub3cpKCk7XG4gICgwLCBfdXRpbHMubmV4dFRpY2spKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwIHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIHZhciBjdXJyZW50UG9zO1xuXG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRQb3MgPiAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPCBzbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtKSB7XG4gICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIHZhciB2ZWxvY2l0eUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgdmFyIHRpbWUgPSBsYXN0TW92ZUV2ZW50LnRpbWUgLSB2ZWxvY2l0eUV2ZW50LnRpbWU7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5IC89IDI7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9IC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuXG5cbiAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgKDAsIF91dGlscy5ub3cpKCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUgPiAzMDApIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuICAgICAgZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICB2YXIgbW9tZW50dW1EdXJhdGlvbiA9IDEwMDAgKiBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVJhdGlvO1xuICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuICAgICAgdmFyIG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICBpZiAocnRsKSBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgIHZhciBkb0JvdW5jZSA9IGZhbHNlO1xuICAgICAgdmFyIGFmdGVyQm91bmNlUG9zaXRpb247XG4gICAgICB2YXIgYm91bmNlQW1vdW50ID0gTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSAqIDIwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgIHZhciBuZWVkc0xvb3BGaXg7XG5cbiAgICAgIGlmIChuZXdQb3NpdGlvbiA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gKyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgPCAtYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zaXRpb24gPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIHZhciBuZXh0U2xpZGU7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmIChzbmFwR3JpZFtqXSA+IC1uZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgbmV4dFNsaWRlID0gajtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlIC0gMV0gLSBuZXdQb3NpdGlvbikgfHwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZHNMb29wRml4KSB7XG4gICAgICAgIHN3aXBlci5vbmNlKCd0cmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBGaXggZHVyYXRpb25cblxuXG4gICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIC8vIElmIGZyZWVNb2RlU3RpY2t5IGlzIGFjdGl2ZSBhbmQgdGhlIHVzZXIgZW5kcyBhIHN3aXBlIHdpdGggYSBzbG93LXZlbG9jaXR5XG4gICAgICAgICAgLy8gZXZlbnQsIHRoZW4gZHVyYXRpb25zIGNhbiBiZSAyMCsgc2Vjb25kcyB0byBzbGlkZSBvbmUgKG9yIHplcm8hKSBzbGlkZXMuXG4gICAgICAgICAgLy8gSXQncyBlYXN5IHRvIHNlZSB0aGlzIHdoZW4gc2ltdWxhdGluZyB0b3VjaCB3aXRoIG1vdXNlIGV2ZW50cy4gVG8gZml4IHRoaXMsXG4gICAgICAgICAgLy8gbGltaXQgc2luZ2xlLXNsaWRlIHN3aXBlcyB0byB0aGUgZGVmYXVsdCBzbGlkZSBkdXJhdGlvbi4gVGhpcyBhbHNvIGhhcyB0aGVcbiAgICAgICAgICAvLyBuaWNlIHNpZGUgZWZmZWN0IG9mIG1hdGNoaW5nIHNsaWRlIHNwZWVkIGlmIHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGJlZm9yZVxuICAgICAgICAgIC8vIGxpZnRpbmcgZmluZ2VyIG9yIG1vdXNlIHZzLiBtb3Zpbmcgc2xvd2x5IGJlZm9yZSBsaWZ0aW5nIHRoZSBmaW5nZXIvbW91c2UuXG4gICAgICAgICAgLy8gRm9yIGZhc3RlciBzd2lwZXMsIGFsc28gYXBwbHkgbGltaXRzIChhbGJlaXQgaGlnaGVyIG9uZXMpLlxuICAgICAgICAgIHZhciBtb3ZlRGlzdGFuY2UgPSBNYXRoLmFicygocnRsID8gLW5ld1Bvc2l0aW9uIDogbmV3UG9zaXRpb24pIC0gc3dpcGVyLnRyYW5zbGF0ZSk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRTbGlkZVNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleF07XG5cbiAgICAgICAgICBpZiAobW92ZURpc3RhbmNlIDwgY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVEaXN0YW5jZSA8IDIgKiBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMS41O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMi41O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlICYmIGRvQm91bmNlKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIWRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSkgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdtb21lbnR1bUJvdW5jZScpO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHBhcmFtcy5zcGVlZCk7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIudmVsb2NpdHkpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG5cbiAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlXG5cblxuICB2YXIgc3RvcEluZGV4ID0gMDtcbiAgdmFyIGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICB2YXIgX2luY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgX2luY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfSAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuXG5cbiAgdmFyIHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICB2YXIgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAvLyBMb25nIHRvdWNoZXNcbiAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcblxuICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59XG59LHtcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI6OTN9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9uVG91Y2hNb3ZlO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gIHZhciBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBlLnR5cGUgIT09ICd0b3VjaG1vdmUnKSByZXR1cm47XG4gIHZhciB0YXJnZXRUb3VjaCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzICYmIChlLnRhcmdldFRvdWNoZXNbMF0gfHwgZS5jaGFuZ2VkVG91Y2hlc1swXSk7XG4gIHZhciBwYWdlWCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWCA6IGUucGFnZVg7XG4gIHZhciBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWSA6IGUucGFnZVk7XG5cbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICAvLyBpc01vdmVkID0gdHJ1ZTtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICAoMCwgX3V0aWxzLmV4dGVuZCkodG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gKDAsIF91dGlscy5ub3cpKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKDAsIF9kb20uZGVmYXVsdCkoZS50YXJnZXQpLmlzKGRhdGEuZm9ybUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuXG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIHZhciBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgdmFyIGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KE1hdGgucG93KGRpZmZYLCAyKSArIE1hdGgucG93KGRpZmZZLCAyKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgdG91Y2hBbmdsZTtcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgfVxuXG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICB9XG5cbiAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTsgLy8gR3JhYiBDdXJzb3JcblxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIHZhciBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkgZGlmZiA9IC1kaWZmO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIHZhciBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgdmFyIHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG5cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuXG4gIGlmIChkaWZmID4gMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgTWF0aC5wb3coLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmLCByZXNpc3RhbmNlUmF0aW8pO1xuICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSBNYXRoLnBvdyhzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBkYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZiwgcmVzaXN0YW5jZVJhdGlvKTtcbiAgfVxuXG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH0gLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfSAvLyBUaHJlc2hvbGRcblxuXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47IC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAvLyBWZWxvY2l0eVxuICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICB0aW1lOiBkYXRhLnRvdWNoU3RhcnRUaW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnY3VycmVudFgnIDogJ2N1cnJlbnRZJ10sXG4gICAgICB0aW1lOiAoMCwgX3V0aWxzLm5vdykoKVxuICAgIH0pO1xuICB9IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7IC8vIFVwZGF0ZSB0cmFuc2xhdGVcblxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG59LHtcIi4uLy4uLy4uL3V0aWxzL2RvbVwiOjg5LFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjo5MyxcInNzci13aW5kb3dcIjo1fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBvblRvdWNoU3RhcnQ7XG5cbnZhciBfc3NyV2luZG93ID0gcmVxdWlyZShcInNzci13aW5kb3dcIik7XG5cbnZhciBfZG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHMvZG9tXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcbiAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcztcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgdmFyICR0YXJnZXRFbCA9ICgwLCBfZG9tLmRlZmF1bHQpKGUudGFyZ2V0KTtcblxuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHN3aXBlci53cmFwcGVyRWwpLmxlbmd0aCkgcmV0dXJuO1xuICB9XG5cbiAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjsgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW5ldFxuXG4gIHZhciBzd2lwaW5nQ2xhc3NIYXNWYWx1ZSA9ICEhcGFyYW1zLm5vU3dpcGluZ0NsYXNzICYmIHBhcmFtcy5ub1N3aXBpbmdDbGFzcyAhPT0gJyc7XG5cbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnQucGF0aCAmJiBldmVudC5wYXRoWzBdKSB7XG4gICAgJHRhcmdldEVsID0gKDAsIF9kb20uZGVmYXVsdCkoZXZlbnQucGF0aFswXSk7XG4gIH1cblxuICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBcIi5cIiArIHBhcmFtcy5ub1N3aXBpbmdDbGFzcylbMF0pIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSByZXR1cm47XG4gIH1cblxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICB2YXIgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgdmFyIHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7IC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIHZhciBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVEZXRlY3Rpb247XG4gIHZhciBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG5cbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgKDAsIF91dGlscy5leHRlbmQpKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9ICgwLCBfdXRpbHMubm93KSgpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuXG4gIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgaWYgKCR0YXJnZXRFbC5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoMCwgX2RvbS5kZWZhdWx0KShkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5pcyhkYXRhLmZvcm1FbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gJHRhcmdldEVsWzBdKSB7XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcblxuICAgIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhJHRhcmdldEVsWzBdLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvZG9tXCI6ODksXCIuLi8uLi8uLi91dGlscy91dGlsc1wiOjkzLFwic3NyLXdpbmRvd1wiOjV9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zZXRHcmFiQ3Vyc29yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zZXRHcmFiQ3Vyc29yXCIpKTtcblxudmFyIF91bnNldEdyYWJDdXJzb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Vuc2V0R3JhYkN1cnNvclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgc2V0R3JhYkN1cnNvcjogX3NldEdyYWJDdXJzb3IuZGVmYXVsdCxcbiAgdW5zZXRHcmFiQ3Vyc29yOiBfdW5zZXRHcmFiQ3Vyc29yLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi9zZXRHcmFiQ3Vyc29yXCI6MjcsXCIuL3Vuc2V0R3JhYkN1cnNvclwiOjI4fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXRHcmFiQ3Vyc29yO1xuXG5mdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgdmFyIGVsID0gc3dpcGVyLmVsO1xuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctd2Via2l0LWdyYWJiaW5nJyA6ICctd2Via2l0LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xufVxufSx7fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1bnNldEdyYWJDdXJzb3I7XG5cbmZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyLmVsLnN0eWxlLmN1cnNvciA9ICcnO1xufVxufSx7fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbG9hZEltYWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9sb2FkSW1hZ2VcIikpO1xuXG52YXIgX3ByZWxvYWRJbWFnZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ByZWxvYWRJbWFnZXNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIGxvYWRJbWFnZTogX2xvYWRJbWFnZS5kZWZhdWx0LFxuICBwcmVsb2FkSW1hZ2VzOiBfcHJlbG9hZEltYWdlcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4vbG9hZEltYWdlXCI6MzAsXCIuL3ByZWxvYWRJbWFnZXNcIjozMX1dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gbG9hZEltYWdlO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZShpbWFnZUVsLCBzcmMsIHNyY3NldCwgc2l6ZXMsIGNoZWNrRm9yQ29tcGxldGUsIGNhbGxiYWNrKSB7XG4gIHZhciB3aW5kb3cgPSAoMCwgX3NzcldpbmRvdy5nZXRXaW5kb3cpKCk7XG4gIHZhciBpbWFnZTtcblxuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfVxuXG4gIHZhciBpc1BpY3R1cmUgPSAoMCwgX2RvbS5kZWZhdWx0KShpbWFnZUVsKS5wYXJlbnQoJ3BpY3R1cmUnKVswXTtcblxuICBpZiAoIWlzUGljdHVyZSAmJiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG5cbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY3NldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICBvblJlYWR5KCk7XG4gIH1cbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvZG9tXCI6ODksXCJzc3Itd2luZG93XCI6NX1dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlbG9hZEltYWdlcztcblxuZnVuY3Rpb24gcHJlbG9hZEltYWdlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHN3aXBlci5pbWFnZXNUb0xvYWQgPSBzd2lwZXIuJGVsLmZpbmQoJ2ltZycpO1xuXG4gIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSBzd2lwZXIuaW1hZ2VzTG9hZGVkICs9IDE7XG5cbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCA9PT0gc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkpIHN3aXBlci51cGRhdGUoKTtcbiAgICAgIHN3aXBlci5lbWl0KCdpbWFnZXNSZWFkeScpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBpbWFnZUVsID0gc3dpcGVyLmltYWdlc1RvTG9hZFtpXTtcbiAgICBzd2lwZXIubG9hZEltYWdlKGltYWdlRWwsIGltYWdlRWwuY3VycmVudFNyYyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3JjJyksIGltYWdlRWwuc3Jjc2V0IHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmNzZXQnKSwgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSwgdHJ1ZSwgb25SZWFkeSk7XG4gIH1cbn1cbn0se31dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2xvb3BDcmVhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xvb3BDcmVhdGVcIikpO1xuXG52YXIgX2xvb3BGaXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xvb3BGaXhcIikpO1xuXG52YXIgX2xvb3BEZXN0cm95ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9sb29wRGVzdHJveVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgbG9vcENyZWF0ZTogX2xvb3BDcmVhdGUuZGVmYXVsdCxcbiAgbG9vcEZpeDogX2xvb3BGaXguZGVmYXVsdCxcbiAgbG9vcERlc3Ryb3k6IF9sb29wRGVzdHJveS5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4vbG9vcENyZWF0ZVwiOjMzLFwiLi9sb29wRGVzdHJveVwiOjM0LFwiLi9sb29wRml4XCI6MzV9XSwzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGxvb3BDcmVhdGU7XG5cbnZhciBfc3NyV2luZG93ID0gcmVxdWlyZShcInNzci13aW5kb3dcIik7XG5cbnZhciBfZG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHMvZG9tXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gbG9vcENyZWF0ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDsgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgc2xpZGVzXG5cbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykucmVtb3ZlKCk7XG4gIHZhciBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcEZpbGxHcm91cFdpdGhCbGFuaykge1xuICAgIHZhciBibGFua1NsaWRlc051bSA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAtIHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAoYmxhbmtTbGlkZXNOdW0gIT09IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibGFua1NsaWRlc051bTsgaSArPSAxKSB7XG4gICAgICAgIHZhciBibGFua05vZGUgPSAoMCwgX2RvbS5kZWZhdWx0KShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpO1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5sb29wZWRTbGlkZXMgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuXG4gIGlmIChzd2lwZXIubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgdmFyIHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgdmFyIGFwcGVuZFNsaWRlcyA9IFtdO1xuICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgdmFyIHNsaWRlID0gKDAsIF9kb20uZGVmYXVsdCkoZWwpO1xuXG4gICAgaWYgKGluZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgYXBwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA8IHNsaWRlcy5sZW5ndGggJiYgaW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIHtcbiAgICAgIHByZXBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgc2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gIH0pO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoKDAsIF9kb20uZGVmYXVsdCkoYXBwZW5kU2xpZGVzW19pXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cblxuICBmb3IgKHZhciBfaTIgPSBwcmVwZW5kU2xpZGVzLmxlbmd0aCAtIDE7IF9pMiA+PSAwOyBfaTIgLT0gMSkge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZCgoMCwgX2RvbS5kZWZhdWx0KShwcmVwZW5kU2xpZGVzW19pMl0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG59XG59LHtcIi4uLy4uLy4uL3V0aWxzL2RvbVwiOjg5LFwic3NyLXdpbmRvd1wiOjV9XSwzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGxvb3BEZXN0cm95O1xuXG5mdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiLC5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVCbGFua0NsYXNzKS5yZW1vdmUoKTtcbiAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG59XG59LHt9XSwzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGxvb3BGaXg7XG5cbmZ1bmN0aW9uIGxvb3BGaXgoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlcyxcbiAgICAgIGFsbG93U2xpZGVQcmV2ID0gc3dpcGVyLmFsbG93U2xpZGVQcmV2LFxuICAgICAgYWxsb3dTbGlkZU5leHQgPSBzd2lwZXIuYWxsb3dTbGlkZU5leHQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gIHZhciBuZXdJbmRleDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgdmFyIHNuYXBUcmFuc2xhdGUgPSAtc25hcEdyaWRbYWN0aXZlSW5kZXhdO1xuICB2YXIgZGlmZiA9IHNuYXBUcmFuc2xhdGUgLSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7IC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcblxuICBpZiAoYWN0aXZlSW5kZXggPCBsb29wZWRTbGlkZXMpIHtcbiAgICBuZXdJbmRleCA9IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMgKiAzICsgYWN0aXZlSW5kZXg7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgIHZhciBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKHNsaWRlQ2hhbmdlZCAmJiBkaWZmICE9PSAwKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZUluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMpIHtcbiAgICAvLyBGaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nXG4gICAgbmV3SW5kZXggPSAtc2xpZGVzLmxlbmd0aCArIGFjdGl2ZUluZGV4ICsgbG9vcGVkU2xpZGVzO1xuICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcblxuICAgIHZhciBfc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcblxuICAgIGlmIChfc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG59LHt9XSwzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZFNsaWRlO1xuXG5mdW5jdGlvbiBhZGRTbGlkZShpbmRleCwgc2xpZGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB9XG5cbiAgdmFyIGJhc2VMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcblxuICBpZiAoaW5kZXggPD0gMCkge1xuICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5kZXggPj0gYmFzZUxlbmd0aCkge1xuICAgIHN3aXBlci5hcHBlbmRTbGlkZShzbGlkZXMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgdmFyIHNsaWRlc0J1ZmZlciA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSBiYXNlTGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaSAtPSAxKSB7XG4gICAgdmFyIGN1cnJlbnRTbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgIHNsaWRlc0J1ZmZlci51bnNoaWZ0KGN1cnJlbnRTbGlkZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbX2ldKSAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbX2ldKTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgX2kyICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNCdWZmZXJbX2kyXSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn1cbn0se31dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXBwZW5kU2xpZGU7XG5cbmZ1bmN0aW9uIGFwcGVuZFNsaWRlKHNsaWRlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufVxufSx7fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfYXBwZW5kU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FwcGVuZFNsaWRlXCIpKTtcblxudmFyIF9wcmVwZW5kU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ByZXBlbmRTbGlkZVwiKSk7XG5cbnZhciBfYWRkU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FkZFNsaWRlXCIpKTtcblxudmFyIF9yZW1vdmVTbGlkZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVtb3ZlU2xpZGVcIikpO1xuXG52YXIgX3JlbW92ZUFsbFNsaWRlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVtb3ZlQWxsU2xpZGVzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBhcHBlbmRTbGlkZTogX2FwcGVuZFNsaWRlLmRlZmF1bHQsXG4gIHByZXBlbmRTbGlkZTogX3ByZXBlbmRTbGlkZS5kZWZhdWx0LFxuICBhZGRTbGlkZTogX2FkZFNsaWRlLmRlZmF1bHQsXG4gIHJlbW92ZVNsaWRlOiBfcmVtb3ZlU2xpZGUuZGVmYXVsdCxcbiAgcmVtb3ZlQWxsU2xpZGVzOiBfcmVtb3ZlQWxsU2xpZGVzLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi9hZGRTbGlkZVwiOjM2LFwiLi9hcHBlbmRTbGlkZVwiOjM3LFwiLi9wcmVwZW5kU2xpZGVcIjozOSxcIi4vcmVtb3ZlQWxsU2xpZGVzXCI6NDAsXCIuL3JlbW92ZVNsaWRlXCI6NDF9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZXBlbmRTbGlkZTtcblxuZnVuY3Rpb24gcHJlcGVuZFNsaWRlKHNsaWRlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuXG4gIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cblxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXMpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuXG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBzd2lwZXIuc3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xufVxufSx7fV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVBbGxTbGlkZXM7XG5cbmZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZXNJbmRleGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICB9XG5cbiAgc3dpcGVyLnJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpO1xufVxufSx7fV0sNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVTbGlkZTtcblxuZnVuY3Rpb24gcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgdmFyIGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgfVxuXG4gIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB2YXIgaW5kZXhUb1JlbW92ZTtcblxuICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0luZGV4ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzW2ldO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIH1cblxuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9IGVsc2Uge1xuICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn1cbn0se31dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG52YXIgX2RlZmF1bHQgPSB7XG4gIHVzZVBhcmFtczogZnVuY3Rpb24gdXNlUGFyYW1zKGluc3RhbmNlUGFyYW1zKSB7XG4gICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTsgLy8gRXh0ZW5kIHBhcmFtc1xuXG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICAoMCwgX3V0aWxzLmV4dGVuZCkoaW5zdGFuY2VQYXJhbXMsIG1vZHVsZS5wYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICB1c2VNb2R1bGVzOiBmdW5jdGlvbiB1c2VNb2R1bGVzKG1vZHVsZXNQYXJhbXMpIHtcbiAgICBpZiAobW9kdWxlc1BhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb2R1bGVzUGFyYW1zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGVzUGFyYW1zW21vZHVsZU5hbWVdIHx8IHt9OyAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICAgIGlmIChtb2R1bGUub24gJiYgaW5zdGFuY2Uub24pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVFdmVudE5hbWUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5vbihtb2R1bGVFdmVudE5hbWUsIG1vZHVsZS5vblttb2R1bGVFdmVudE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIE1vZHVsZSBjcmVhdGUgY2FsbGJhY2tcblxuXG4gICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICBtb2R1bGUuY3JlYXRlLmJpbmQoaW5zdGFuY2UpKG1vZHVsZVBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NsaWRlVG8gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NsaWRlVG9cIikpO1xuXG52YXIgX3NsaWRlVG9Mb29wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zbGlkZVRvTG9vcFwiKSk7XG5cbnZhciBfc2xpZGVOZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zbGlkZU5leHRcIikpO1xuXG52YXIgX3NsaWRlUHJldiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2xpZGVQcmV2XCIpKTtcblxudmFyIF9zbGlkZVJlc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zbGlkZVJlc2V0XCIpKTtcblxudmFyIF9zbGlkZVRvQ2xvc2VzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2xpZGVUb0Nsb3Nlc3RcIikpO1xuXG52YXIgX3NsaWRlVG9DbGlja2VkU2xpZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NsaWRlVG9DbGlja2VkU2xpZGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIHNsaWRlVG86IF9zbGlkZVRvLmRlZmF1bHQsXG4gIHNsaWRlVG9Mb29wOiBfc2xpZGVUb0xvb3AuZGVmYXVsdCxcbiAgc2xpZGVOZXh0OiBfc2xpZGVOZXh0LmRlZmF1bHQsXG4gIHNsaWRlUHJldjogX3NsaWRlUHJldi5kZWZhdWx0LFxuICBzbGlkZVJlc2V0OiBfc2xpZGVSZXNldC5kZWZhdWx0LFxuICBzbGlkZVRvQ2xvc2VzdDogX3NsaWRlVG9DbG9zZXN0LmRlZmF1bHQsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IF9zbGlkZVRvQ2xpY2tlZFNsaWRlLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi9zbGlkZU5leHRcIjo0NCxcIi4vc2xpZGVQcmV2XCI6NDUsXCIuL3NsaWRlUmVzZXRcIjo0NixcIi4vc2xpZGVUb1wiOjQ3LFwiLi9zbGlkZVRvQ2xpY2tlZFNsaWRlXCI6NDgsXCIuL3NsaWRlVG9DbG9zZXN0XCI6NDksXCIuL3NsaWRlVG9Mb29wXCI6NTB9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNsaWRlTmV4dDtcblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmc7XG4gIHZhciBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgfVxuXG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbn0se31dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2xpZGVQcmV2O1xuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZyxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgfVxuXG4gIHZhciB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuXG4gIHZhciBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIHZhciBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiBub3JtYWxpemUodmFsKTtcbiAgfSk7XG4gIHZhciBjdXJyZW50U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpXTtcbiAgdmFyIHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcblxuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHNuYXBHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgIGlmICghcHJldlNuYXAgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSBwcmV2U25hcCA9IHNuYXA7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcHJldkluZGV4O1xuXG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcbiAgfVxuXG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbn0se31dLDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2xpZGVSZXNldDtcblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxufSx7fV0sNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzbGlkZVRvO1xuXG5mdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgaW5kZXggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdpbmRleCcgYXJndW1lbnQgY2Fubm90IGhhdmUgdHlwZSBvdGhlciB0aGFuICdudW1iZXInIG9yICdzdHJpbmcnLiBbXCIgKyB0eXBlb2YgaW5kZXggKyBcIl0gZ2l2ZW4uXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYGluZGV4YCBhcmd1bWVudCBjb252ZXJ0ZWQgZnJvbSBgc3RyaW5nYCB0byBgbnVtYmVyYC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHZhciBpbmRleEFzTnVtYmVyID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGBpbmRleGAgYXJndW1lbnQgaXMgYSB2YWxpZCBgbnVtYmVyYFxuICAgICAqIGFmdGVyIGJlaW5nIGNvbnZlcnRlZCBmcm9tIHRoZSBgc3RyaW5nYCB0eXBlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gICAgdmFyIGlzVmFsaWROdW1iZXIgPSBpc0Zpbml0ZShpbmRleEFzTnVtYmVyKTtcblxuICAgIGlmICghaXNWYWxpZE51bWJlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHBhc3NlZC1pbiAnaW5kZXgnIChzdHJpbmcpIGNvdWxkbid0IGJlIGNvbnZlcnRlZCB0byAnbnVtYmVyJy4gW1wiICsgaW5kZXggKyBcIl0gZ2l2ZW4uXCIpO1xuICAgIH0gLy8gS25vd2luZyB0aGF0IHRoZSBjb252ZXJ0ZWQgYGluZGV4YCBpcyBhIHZhbGlkIG51bWJlcixcbiAgICAvLyB3ZSBjYW4gdXBkYXRlIHRoZSBvcmlnaW5hbCBhcmd1bWVudCdzIHZhbHVlLlxuXG5cbiAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICB2YXIgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICB2YXIgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpOyAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuXG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCkgPj0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKSkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG5cbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGlyZWN0aW9uO1xuICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7ZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7ZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnOyAvLyBVcGRhdGUgSW5kZXhcblxuICBpZiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7IC8vIFVwZGF0ZSBIZWlnaHRcblxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB2YXIgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciB0ID0gLXRyYW5zbGF0ZTtcblxuICAgIGlmIChydGwpIHtcbiAgICAgIHQgPSB3cmFwcGVyRWwuc2Nyb2xsV2lkdGggLSB3cmFwcGVyRWwub2Zmc2V0V2lkdGggLSB0O1xuICAgIH1cblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHdyYXBwZXJFbC5zY3JvbGxUbykge1xuICAgICAgICB2YXIgX3dyYXBwZXJFbCRzY3JvbGxUbztcblxuICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oKF93cmFwcGVyRWwkc2Nyb2xsVG8gPSB7fSwgX3dyYXBwZXJFbCRzY3JvbGxUb1tpc0ggPyAnbGVmdCcgOiAndG9wJ10gPSB0LCBfd3JhcHBlckVsJHNjcm9sbFRvLmJlaGF2aW9yID0gJ3Ntb290aCcsIF93cmFwcGVyRWwkc2Nyb2xsVG8pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuXG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG59LHt9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNsaWRlVG9DbGlja2VkU2xpZGU7XG5cbnZhciBfZG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHMvZG9tXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICB2YXIgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICB2YXIgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgdmFyIHJlYWxJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgcmV0dXJuO1xuICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KCgwLCBfZG9tLmRlZmF1bHQpKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXTpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilcIikuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgKDAsIF91dGlscy5uZXh0VGljaykoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICAoMCwgX3V0aWxzLm5leHRUaWNrKShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufVxufSx7XCIuLi8uLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI6OTN9XSw0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNsaWRlVG9DbG9zZXN0O1xuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgIHRocmVzaG9sZCA9IDAuNTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIHZhciBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgdmFyIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgdmFyIGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgdmFyIG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICB2YXIgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgdmFyIF9jdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChfY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbn0se31dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2xpZGVUb0xvb3A7XG5cbmZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIG5ld0luZGV4ID0gaW5kZXg7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIG5ld0luZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbn0se31dLDUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NldFRyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NldFRyYW5zaXRpb25cIikpO1xuXG52YXIgX3RyYW5zaXRpb25TdGFydCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHJhbnNpdGlvblN0YXJ0XCIpKTtcblxudmFyIF90cmFuc2l0aW9uRW5kID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90cmFuc2l0aW9uRW5kXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBzZXRUcmFuc2l0aW9uOiBfc2V0VHJhbnNpdGlvbi5kZWZhdWx0LFxuICB0cmFuc2l0aW9uU3RhcnQ6IF90cmFuc2l0aW9uU3RhcnQuZGVmYXVsdCxcbiAgdHJhbnNpdGlvbkVuZDogX3RyYW5zaXRpb25FbmQuZGVmYXVsdFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuL3NldFRyYW5zaXRpb25cIjo1MixcIi4vdHJhbnNpdGlvbkVuZFwiOjUzLFwiLi90cmFuc2l0aW9uU3RhcnRcIjo1NH1dLDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2V0VHJhbnNpdGlvbjtcblxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxufSx7fV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uRW5kO1xuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4LFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gIHZhciBkaXIgPSBkaXJlY3Rpb247XG5cbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uRW5kJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvbkVuZCcpO1xuXG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvbkVuZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfVxufVxufSx7fV0sNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uU3RhcnQ7XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cblxuICB2YXIgZGlyID0gZGlyZWN0aW9uO1xuXG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uU3RhcnQnKTtcblxuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25TdGFydCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICB9XG59XG59LHt9XSw1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFN3aXBlclRyYW5zbGF0ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIHRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGUsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG5cbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRUcmFuc2xhdGUgPSAoMCwgX3V0aWxzLmdldFRyYW5zbGF0ZSkoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2dldFRyYW5zbGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0VHJhbnNsYXRlXCIpKTtcblxudmFyIF9zZXRUcmFuc2xhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NldFRyYW5zbGF0ZVwiKSk7XG5cbnZhciBfbWluVHJhbnNsYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9taW5UcmFuc2xhdGVcIikpO1xuXG52YXIgX21heFRyYW5zbGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWF4VHJhbnNsYXRlXCIpKTtcblxudmFyIF90cmFuc2xhdGVUbyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHJhbnNsYXRlVG9cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIGdldFRyYW5zbGF0ZTogX2dldFRyYW5zbGF0ZS5kZWZhdWx0LFxuICBzZXRUcmFuc2xhdGU6IF9zZXRUcmFuc2xhdGUuZGVmYXVsdCxcbiAgbWluVHJhbnNsYXRlOiBfbWluVHJhbnNsYXRlLmRlZmF1bHQsXG4gIG1heFRyYW5zbGF0ZTogX21heFRyYW5zbGF0ZS5kZWZhdWx0LFxuICB0cmFuc2xhdGVUbzogX3RyYW5zbGF0ZVRvLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi9nZXRUcmFuc2xhdGVcIjo1NSxcIi4vbWF4VHJhbnNsYXRlXCI6NTcsXCIuL21pblRyYW5zbGF0ZVwiOjU4LFwiLi9zZXRUcmFuc2xhdGVcIjo1OSxcIi4vdHJhbnNsYXRlVG9cIjo2MH1dLDU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gbWF4VHJhbnNsYXRlO1xuXG5mdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufVxufSx7fV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBtaW5UcmFuc2xhdGU7XG5cbmZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufVxufSx7fV0sNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXRUcmFuc2xhdGU7XG5cbmZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzO1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcbiAgdmFyIHogPSAwO1xuXG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAteCA6IC15O1xuICB9IGVsc2UgaWYgKCFwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgXCIgKyB6ICsgXCJweClcIik7XG4gIH1cblxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7IC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG5cbiAgdmFyIG5ld1Byb2dyZXNzO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuXG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxufSx7fV0sNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2xhdGVUbztcblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIHZhciBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gIHZhciBuZXdUcmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlOyAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB2YXIgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuXG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAod3JhcHBlckVsLnNjcm9sbFRvKSB7XG4gICAgICAgIHZhciBfd3JhcHBlckVsJHNjcm9sbFRvO1xuXG4gICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbygoX3dyYXBwZXJFbCRzY3JvbGxUbyA9IHt9LCBfd3JhcHBlckVsJHNjcm9sbFRvW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXSA9IC1uZXdUcmFuc2xhdGUsIF93cmFwcGVyRWwkc2Nyb2xsVG8uYmVoYXZpb3IgPSAnc21vb3RoJywgX3dyYXBwZXJFbCRzY3JvbGxUbykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuXG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbn0se31dLDYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3VwZGF0ZVNpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3VwZGF0ZVNpemVcIikpO1xuXG52YXIgX3VwZGF0ZVNsaWRlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXBkYXRlU2xpZGVzXCIpKTtcblxudmFyIF91cGRhdGVBdXRvSGVpZ2h0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91cGRhdGVBdXRvSGVpZ2h0XCIpKTtcblxudmFyIF91cGRhdGVTbGlkZXNPZmZzZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3VwZGF0ZVNsaWRlc09mZnNldFwiKSk7XG5cbnZhciBfdXBkYXRlU2xpZGVzUHJvZ3Jlc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3VwZGF0ZVNsaWRlc1Byb2dyZXNzXCIpKTtcblxudmFyIF91cGRhdGVQcm9ncmVzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXBkYXRlUHJvZ3Jlc3NcIikpO1xuXG52YXIgX3VwZGF0ZVNsaWRlc0NsYXNzZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3VwZGF0ZVNsaWRlc0NsYXNzZXNcIikpO1xuXG52YXIgX3VwZGF0ZUFjdGl2ZUluZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91cGRhdGVBY3RpdmVJbmRleFwiKSk7XG5cbnZhciBfdXBkYXRlQ2xpY2tlZFNsaWRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91cGRhdGVDbGlja2VkU2xpZGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIHVwZGF0ZVNpemU6IF91cGRhdGVTaXplLmRlZmF1bHQsXG4gIHVwZGF0ZVNsaWRlczogX3VwZGF0ZVNsaWRlcy5kZWZhdWx0LFxuICB1cGRhdGVBdXRvSGVpZ2h0OiBfdXBkYXRlQXV0b0hlaWdodC5kZWZhdWx0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQ6IF91cGRhdGVTbGlkZXNPZmZzZXQuZGVmYXVsdCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3M6IF91cGRhdGVTbGlkZXNQcm9ncmVzcy5kZWZhdWx0LFxuICB1cGRhdGVQcm9ncmVzczogX3VwZGF0ZVByb2dyZXNzLmRlZmF1bHQsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXM6IF91cGRhdGVTbGlkZXNDbGFzc2VzLmRlZmF1bHQsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4OiBfdXBkYXRlQWN0aXZlSW5kZXguZGVmYXVsdCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlOiBfdXBkYXRlQ2xpY2tlZFNsaWRlLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi91cGRhdGVBY3RpdmVJbmRleFwiOjYyLFwiLi91cGRhdGVBdXRvSGVpZ2h0XCI6NjMsXCIuL3VwZGF0ZUNsaWNrZWRTbGlkZVwiOjY0LFwiLi91cGRhdGVQcm9ncmVzc1wiOjY1LFwiLi91cGRhdGVTaXplXCI6NjYsXCIuL3VwZGF0ZVNsaWRlc1wiOjY3LFwiLi91cGRhdGVTbGlkZXNDbGFzc2VzXCI6NjgsXCIuL3VwZGF0ZVNsaWRlc09mZnNldFwiOjY5LFwiLi91cGRhdGVTbGlkZXNQcm9ncmVzc1wiOjcwfV0sNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1cGRhdGVBY3RpdmVJbmRleDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHByZXZpb3VzUmVhbEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleCxcbiAgICAgIHByZXZpb3VzU25hcEluZGV4ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgdmFyIGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIHZhciBzbmFwSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH0gLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuXG4gICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG5cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9IC8vIEdldCByZWFsIGluZGV4XG5cblxuICB2YXIgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLnNsaWRlcy5lcShhY3RpdmVJbmRleCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSB8fCBhY3RpdmVJbmRleCwgMTApO1xuICAoMCwgX3V0aWxzLmV4dGVuZCkoc3dpcGVyLCB7XG4gICAgc25hcEluZGV4OiBzbmFwSW5kZXgsXG4gICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleDogYWN0aXZlSW5kZXhcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG5cbiAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXBkYXRlQXV0b0hlaWdodDtcblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGFjdGl2ZVNsaWRlcyA9IFtdO1xuICB2YXIgbmV3SGVpZ2h0ID0gMDtcbiAgdmFyIGk7XG5cbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfSAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuXG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc3dpcGVyLnNsaWRlcy5lcShpbmRleClbMF0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleClbMF0pO1xuICB9IC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuXG5cbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9IC8vIFVwZGF0ZSBIZWlnaHRcblxuXG4gIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgbmV3SGVpZ2h0ICsgXCJweFwiKTtcbn1cbn0se31dLDY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXBkYXRlQ2xpY2tlZFNsaWRlO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyIHNsaWRlID0gKDAsIF9kb20uZGVmYXVsdCkoZS50YXJnZXQpLmNsb3Nlc3QoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcylbMF07XG4gIHZhciBzbGlkZUZvdW5kID0gZmFsc2U7XG5cbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuXG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoKDAsIF9kb20uZGVmYXVsdCkoc2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9ICgwLCBfZG9tLmRlZmF1bHQpKHNsaWRlKS5pbmRleCgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG59LHtcIi4uLy4uLy4uL3V0aWxzL2RvbVwiOjg5fV0sNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1cGRhdGVQcm9ncmVzcztcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICB9XG5cbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgdmFyIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzLFxuICAgICAgaXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmcsXG4gICAgICBpc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgdmFyIHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICB2YXIgd2FzRW5kID0gaXNFbmQ7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGlzQmVnaW5uaW5nID0gcHJvZ3Jlc3MgPD0gMDtcbiAgICBpc0VuZCA9IHByb2dyZXNzID49IDE7XG4gIH1cblxuICAoMCwgX3V0aWxzLmV4dGVuZCkoc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nOiBpc0JlZ2lubmluZyxcbiAgICBpc0VuZDogaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5IHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7XG5cbiAgaWYgKGlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gIH1cblxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuXG4gIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdwcm9ncmVzcycsIHByb2dyZXNzKTtcbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXBkYXRlU2l6ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciB3aWR0aDtcbiAgdmFyIGhlaWdodDtcbiAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gJGVsWzBdLmNsaWVudFdpZHRoO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSAkZWxbMF0uY2xpZW50SGVpZ2h0O1xuICB9XG5cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuXG5cbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgKDAsIF91dGlscy5leHRlbmQpKHN3aXBlciwge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodFxuICB9KTtcbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXBkYXRlU2xpZGVzO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgd2luZG93ID0gKDAsIF9zc3JXaW5kb3cuZ2V0V2luZG93KSgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICB3cm9uZ1JUTCA9IHN3aXBlci53cm9uZ1JUTDtcbiAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIHZhciBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgdmFyIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB2YXIgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIHZhciBzbmFwR3JpZCA9IFtdO1xuICB2YXIgc2xpZGVzR3JpZCA9IFtdO1xuICB2YXIgc2xpZGVzU2l6ZXNHcmlkID0gW107XG5cbiAgZnVuY3Rpb24gc2xpZGVzRm9yTWFyZ2luKHNsaWRlRWwsIHNsaWRlSW5kZXgpIHtcbiAgICBpZiAoIXBhcmFtcy5jc3NNb2RlKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIHZhciBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICB2YXIgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoO1xuICB2YXIgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgdmFyIHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICB2YXIgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgaWYgKHR5cGVvZiBzd2lwZXJTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH1cblxuICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuOyAvLyByZXNldCBtYXJnaW5zXG5cbiAgaWYgKHJ0bCkgc2xpZGVzLmNzcyh7XG4gICAgbWFyZ2luTGVmdDogJycsXG4gICAgbWFyZ2luVG9wOiAnJ1xuICB9KTtlbHNlIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpblJpZ2h0OiAnJyxcbiAgICBtYXJnaW5Cb3R0b206ICcnXG4gIH0pO1xuICB2YXIgc2xpZGVzTnVtYmVyRXZlblRvUm93cztcblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSA9PT0gc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXNMZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHBhcmFtcy5zbGlkZXNQZXJWaWV3ICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbik7XG4gICAgfVxuICB9IC8vIENhbGMgc2xpZGVzXG5cblxuICB2YXIgc2xpZGVTaXplO1xuICB2YXIgc2xpZGVzUGVyQ29sdW1uID0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgdmFyIHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gIHZhciBudW1GdWxsQ29sdW1ucyA9IE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgdmFyIHNsaWRlID0gc2xpZGVzLmVxKGkpO1xuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAvLyBTZXQgc2xpZGVzIG9yZGVyXG4gICAgICB2YXIgbmV3U2xpZGVPcmRlckluZGV4ID0gdm9pZCAwO1xuICAgICAgdmFyIGNvbHVtbiA9IHZvaWQgMDtcbiAgICAgIHZhciByb3cgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgICB2YXIgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSk7XG4gICAgICAgIHZhciBzbGlkZUluZGV4SW5Hcm91cCA9IGkgLSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uICogcGFyYW1zLnNsaWRlc1Blckdyb3VwICogZ3JvdXBJbmRleDtcbiAgICAgICAgdmFyIGNvbHVtbnNJbkdyb3VwID0gZ3JvdXBJbmRleCA9PT0gMCA/IHBhcmFtcy5zbGlkZXNQZXJHcm91cCA6IE1hdGgubWluKE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gZ3JvdXBJbmRleCAqIHNsaWRlc1BlckNvbHVtbiAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cCkgLyBzbGlkZXNQZXJDb2x1bW4pLCBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgICByb3cgPSBNYXRoLmZsb29yKHNsaWRlSW5kZXhJbkdyb3VwIC8gY29sdW1uc0luR3JvdXApO1xuICAgICAgICBjb2x1bW4gPSBzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwICsgZ3JvdXBJbmRleCAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgcm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHNsaWRlc1BlckNvbHVtbjtcbiAgICAgICAgc2xpZGUuY3NzKHtcbiAgICAgICAgICAnLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAnLW1vei1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAnLW1zLWZsZXgtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgb3JkZXI6IG5ld1NsaWRlT3JkZXJJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgIHJvdyA9IGkgLSBjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW47XG5cbiAgICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSBzbGlkZXNQZXJDb2x1bW4gLSAxKSB7XG4gICAgICAgICAgcm93ICs9IDE7XG5cbiAgICAgICAgICBpZiAocm93ID49IHNsaWRlc1BlckNvbHVtbikge1xuICAgICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICAgIGNvbHVtbiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTtcbiAgICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHNsaWRlc1BlclJvdztcbiAgICAgIH1cblxuICAgICAgc2xpZGUuY3NzKFwibWFyZ2luLVwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd0b3AnIDogJ2xlZnQnKSwgcm93ICE9PSAwICYmIHBhcmFtcy5zcGFjZUJldHdlZW4gJiYgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIik7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgdmFyIHNsaWRlU3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2xpZGVbMF0sIG51bGwpO1xuICAgICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICB2YXIgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcblxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICAgIHNsaWRlU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlLm91dGVyV2lkdGgodHJ1ZSkgOiBzbGlkZS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgdmFyIHdpZHRoID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpIHx8IDApO1xuICAgICAgICAgIHZhciBwYWRkaW5nTGVmdCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1sZWZ0JykgfHwgMCk7XG4gICAgICAgICAgdmFyIHBhZGRpbmdSaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpIHx8IDApO1xuICAgICAgICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpIHx8IDApO1xuICAgICAgICAgIHZhciBtYXJnaW5SaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JykgfHwgMCk7XG4gICAgICAgICAgdmFyIGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcblxuICAgICAgICAgIGlmIChib3hTaXppbmcgJiYgYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgX3NsaWRlJCA9IHNsaWRlWzBdLFxuICAgICAgICAgICAgICAgIGNsaWVudFdpZHRoID0gX3NsaWRlJC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICBvZmZzZXRXaWR0aCA9IF9zbGlkZSQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgcGFkZGluZ1RvcCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSB8fCAwKTtcbiAgICAgICAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSB8fCAwKTtcbiAgICAgICAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykgfHwgMCk7XG4gICAgICAgICAgdmFyIG1hcmdpbkJvdHRvbSA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpIHx8IDApO1xuXG4gICAgICAgICAgdmFyIF9ib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgICBpZiAoX2JveFNpemluZyAmJiBfYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIG1hcmdpblRvcCArIG1hcmdpbkJvdHRvbTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9zbGlkZSQyID0gc2xpZGVbMF0sXG4gICAgICAgICAgICAgICAgY2xpZW50SGVpZ2h0ID0gX3NsaWRlJDIuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgICAgIG9mZnNldEhlaWdodCA9IF9zbGlkZSQyLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIHBhZGRpbmdUb3AgKyBwYWRkaW5nQm90dG9tICsgbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tICsgKG9mZnNldEhlaWdodCAtIGNsaWVudEhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuXG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSBzbGlkZVNpemUgKyBcInB4XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLmhlaWdodCA9IHNsaWRlU2l6ZSArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuXG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIGluZGV4ICs9IDE7XG4gIH1cblxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIHZhciBuZXdTbGlkZXNHcmlkO1xuXG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSAkd3JhcHBlckVsLmNzcyh7XG4gICAgICB3aWR0aDogc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgIH0pO2Vsc2UgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgaGVpZ2h0OiBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAtIHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtlbHNlICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIGhlaWdodDogc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc25hcEdyaWQubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgICAgIHZhciBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW19pXTtcbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIGlmIChzbmFwR3JpZFtfaV0gPCBzd2lwZXIudmlydHVhbFNpemUgKyBzbmFwR3JpZFswXSkgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cblxuICAgICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIH1cbiAgfSAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuXG5cbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzbmFwR3JpZC5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgICB2YXIgX3NsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbX2kyXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBfc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKF9zbGlkZXNHcmlkSXRlbSk7XG5cbiAgICAgIGlmIChzbmFwR3JpZFtfaTJdIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKF9zbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuXG4gICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG5cbiAgaWYgKHBhcmFtcy5zcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBpZiAocnRsKSBzbGlkZXMuZmlsdGVyKHNsaWRlc0Zvck1hcmdpbikuY3NzKHtcbiAgICAgICAgbWFyZ2luTGVmdDogc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgICB9KTtlbHNlIHNsaWRlcy5maWx0ZXIoc2xpZGVzRm9yTWFyZ2luKS5jc3Moe1xuICAgICAgICBtYXJnaW5SaWdodDogc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgICB9KTtcbiAgICB9IGVsc2Ugc2xpZGVzLmZpbHRlcihzbGlkZXNGb3JNYXJnaW4pLmNzcyh7XG4gICAgICBtYXJnaW5Cb3R0b206IHNwYWNlQmV0d2VlbiArIFwicHhcIlxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICB2YXIgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlU2l6ZVZhbHVlKSB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIHZhciBtYXhTbmFwID0gYWxsU2xpZGVzU2l6ZSAtIHN3aXBlclNpemU7XG4gICAgc25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgIGlmIChzbmFwIDwgMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICByZXR1cm4gc25hcDtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgdmFyIF9hbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGVTaXplVmFsdWUpIHtcbiAgICAgIF9hbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7XG4gICAgfSk7XG4gICAgX2FsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcblxuICAgIGlmIChfYWxsU2xpZGVzU2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgIHZhciBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIF9hbGxTbGlkZXNTaXplKSAvIDI7XG4gICAgICBzbmFwR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwLCBzbmFwSW5kZXgpIHtcbiAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCwgc25hcEluZGV4KSB7XG4gICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAoMCwgX3V0aWxzLmV4dGVuZCkoc3dpcGVyLCB7XG4gICAgc2xpZGVzOiBzbGlkZXMsXG4gICAgc25hcEdyaWQ6IHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQ6IHNsaWRlc0dyaWQsXG4gICAgc2xpZGVzU2l6ZXNHcmlkOiBzbGlkZXNTaXplc0dyaWRcbiAgfSk7XG5cbiAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG59XG59LHtcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI6OTMsXCJzc3Itd2luZG93XCI6NX1dLDY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXBkYXRlU2xpZGVzQ2xhc3NlcztcblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcmVhbEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlTmV4dENsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gIHZhciBhY3RpdmVTbGlkZTtcblxuICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBhY3RpdmVJbmRleCArIFwiXFxcIl1cIik7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuICB9IC8vIEFjdGl2ZSBjbGFzc2VzXG5cblxuICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIi5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICB9IC8vIE5leHQgU2xpZGVcblxuXG4gIHZhciBuZXh0U2xpZGUgPSBhY3RpdmVTbGlkZS5uZXh0QWxsKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wICYmIG5leHRTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZXEoMCk7XG4gICAgbmV4dFNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gIH0gLy8gUHJldiBTbGlkZVxuXG5cbiAgdmFyIHByZXZTbGlkZSA9IGFjdGl2ZVNsaWRlLnByZXZBbGwoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcykuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3AgJiYgcHJldlNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHByZXZTbGlkZSA9IHNsaWRlcy5lcSgtMSk7XG4gICAgcHJldlNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICBpZiAobmV4dFNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIi5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgbmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufVxufSx7fV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1cGRhdGVTbGlkZXNPZmZzZXQ7XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59XG59LHt9XSw3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVwZGF0ZVNsaWRlc1Byb2dyZXNzO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDA7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIHZhciBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7IC8vIFZpc2libGUgU2xpZGVzXG5cbiAgc2xpZGVzLnJlbW92ZUNsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIHZhciBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcblxuICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5IHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgdmFyIHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCk7XG4gICAgICB2YXIgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIHZhciBpc1Zpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxIHx8IHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUgfHwgc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplO1xuXG4gICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gIH1cblxuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICgwLCBfZG9tLmRlZmF1bHQpKHN3aXBlci52aXNpYmxlU2xpZGVzKTtcbn1cbn0se1wiLi4vLi4vLi4vdXRpbHMvZG9tXCI6ODl9XSw3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgQ292ZXJmbG93ID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc3dpcGVyV2lkdGggPSBzd2lwZXIud2lkdGgsXG4gICAgICAgIHN3aXBlckhlaWdodCA9IHN3aXBlci5oZWlnaHQsXG4gICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgIHNsaWRlc1NpemVzR3JpZCA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWQ7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgIHZhciBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgdmFyIHRyYW5zZm9ybSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgdmFyIGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyBzd2lwZXJXaWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgc3dpcGVySGVpZ2h0IC8gMjtcbiAgICB2YXIgcm90YXRlID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnJvdGF0ZSA6IC1wYXJhbXMucm90YXRlO1xuICAgIHZhciB0cmFuc2xhdGUgPSBwYXJhbXMuZGVwdGg7IC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgdmFyIHNsaWRlT2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICB2YXIgb2Zmc2V0TXVsdGlwbGllciA9IChjZW50ZXIgLSBzbGlkZU9mZnNldCAtIHNsaWRlU2l6ZSAvIDIpIC8gc2xpZGVTaXplICogcGFyYW1zLm1vZGlmaWVyO1xuICAgICAgdmFyIHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIHZhciByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7IC8vIHZhciByb3RhdGVaID0gMFxuXG4gICAgICB2YXIgdHJhbnNsYXRlWiA9IC10cmFuc2xhdGUgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcbiAgICAgIHZhciBzdHJldGNoID0gcGFyYW1zLnN0cmV0Y2g7IC8vIEFsbG93IHBlcmNlbnRhZ2UgdG8gbWFrZSBhIHJlbGF0aXZlIHN0cmV0Y2ggZm9yIHJlc3BvbnNpdmUgc2xpZGVyc1xuXG4gICAgICBpZiAodHlwZW9mIHN0cmV0Y2ggPT09ICdzdHJpbmcnICYmIHN0cmV0Y2guaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgICBzdHJldGNoID0gcGFyc2VGbG9hdChwYXJhbXMuc3RyZXRjaCkgLyAxMDAgKiBzbGlkZVNpemU7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2xhdGVZID0gaXNIb3Jpem9udGFsID8gMCA6IHN0cmV0Y2ggKiBvZmZzZXRNdWx0aXBsaWVyO1xuICAgICAgdmFyIHRyYW5zbGF0ZVggPSBpc0hvcml6b250YWwgPyBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB2YXIgc2NhbGUgPSAxIC0gKDEgLSBwYXJhbXMuc2NhbGUpICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7IC8vIEZpeCBmb3IgdWx0cmEgc21hbGwgdmFsdWVzXG5cbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVYKSA8IDAuMDAxKSB0cmFuc2xhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVZKSA8IDAuMDAxKSB0cmFuc2xhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVaKSA8IDAuMDAxKSB0cmFuc2xhdGVaID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVZKSA8IDAuMDAxKSByb3RhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVYKSA8IDAuMDAxKSByb3RhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhzY2FsZSkgPCAwLjAwMSkgc2NhbGUgPSAwO1xuICAgICAgdmFyIHNsaWRlVHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIiArIHRyYW5zbGF0ZVggKyBcInB4LFwiICsgdHJhbnNsYXRlWSArIFwicHgsXCIgKyB0cmFuc2xhdGVaICsgXCJweCkgIHJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCJkZWcpIHNjYWxlKFwiICsgc2NhbGUgKyBcIilcIjtcbiAgICAgICRzbGlkZUVsLnRyYW5zZm9ybShzbGlkZVRyYW5zZm9ybSk7XG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvZmZzZXRNdWx0aXBsaWVyKSkgKyAxO1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICB2YXIgJHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIHZhciAkc2hhZG93QWZ0ZXJFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcblxuICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dCZWZvcmVFbCA9ICgwLCBfZG9tLmRlZmF1bHQpKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QmVmb3JlRWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dBZnRlckVsID0gKDAsIF9kb20uZGVmYXVsdCkoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QWZ0ZXJFbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCkgJHNoYWRvd0JlZm9yZUVsWzBdLnN0eWxlLm9wYWNpdHkgPSBvZmZzZXRNdWx0aXBsaWVyID4gMCA/IG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgICBpZiAoJHNoYWRvd0FmdGVyRWwubGVuZ3RoKSAkc2hhZG93QWZ0ZXJFbFswXS5zdHlsZS5vcGFjaXR5ID0gLW9mZnNldE11bHRpcGxpZXIgPiAwID8gLW9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbikuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICdlZmZlY3QtY292ZXJmbG93JyxcbiAgcGFyYW1zOiB7XG4gICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICByb3RhdGU6IDUwLFxuICAgICAgc3RyZXRjaDogMCxcbiAgICAgIGRlcHRoOiAxMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAoMCwgX3V0aWxzLmJpbmRNb2R1bGVNZXRob2RzKShzd2lwZXIsIHtcbiAgICAgIGNvdmVyZmxvd0VmZmVjdDogX2V4dGVuZHMoe30sIENvdmVyZmxvdylcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImNvdmVyZmxvd1wiKTtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCIzZFwiKTtcbiAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb3ZlcmZsb3dFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb3ZlcmZsb3dFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4uLy4uL3V0aWxzL2RvbVwiOjg5LFwiLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBDdWJlID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBzd2lwZXJXaWR0aCA9IHN3aXBlci53aWR0aCxcbiAgICAgICAgc3dpcGVySGVpZ2h0ID0gc3dpcGVyLmhlaWdodCxcbiAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgc3dpcGVyU2l6ZSA9IHN3aXBlci5zaXplLFxuICAgICAgICBicm93c2VyID0gc3dpcGVyLmJyb3dzZXI7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdDtcbiAgICB2YXIgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICB2YXIgd3JhcHBlclJvdGF0ZSA9IDA7XG4gICAgdmFyICRjdWJlU2hhZG93RWw7XG5cbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG5cbiAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICgwLCBfZG9tLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cblxuICAgICAgICAkY3ViZVNoYWRvd0VsLmNzcyh7XG4gICAgICAgICAgaGVpZ2h0OiBzd2lwZXJXaWR0aCArIFwicHhcIlxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuXG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAoMCwgX2RvbS5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpO1xuICAgICAgICAgICRlbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgdmFyIHNsaWRlSW5kZXggPSBpO1xuXG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludCgkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZUFuZ2xlID0gc2xpZGVJbmRleCAqIDkwO1xuICAgICAgdmFyIHJvdW5kID0gTWF0aC5mbG9vcihzbGlkZUFuZ2xlIC8gMzYwKTtcblxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7XG4gICAgICAgIHJvdW5kID0gTWF0aC5mbG9vcigtc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgdmFyIHR4ID0gMDtcbiAgICAgIHZhciB0eSA9IDA7XG4gICAgICB2YXIgdHogPSAwO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAwO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDEpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHR6ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMikgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIHJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAzICogc3dpcGVyU2l6ZSArIHN3aXBlclNpemUgKiA0ICogcm91bmQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChydGwpIHtcbiAgICAgICAgdHggPSAtdHg7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zZm9ybSA9IFwicm90YXRlWChcIiArIChpc0hvcml6b250YWwgPyAwIDogLXNsaWRlQW5nbGUpICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyAoaXNIb3Jpem9udGFsID8gc2xpZGVBbmdsZSA6IDApICsgXCJkZWcpIHRyYW5zbGF0ZTNkKFwiICsgdHggKyBcInB4LCBcIiArIHR5ICsgXCJweCwgXCIgKyB0eiArIFwicHgpXCI7XG5cbiAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgd3JhcHBlclJvdGF0ZSA9IHNsaWRlSW5kZXggKiA5MCArIHByb2dyZXNzICogOTA7XG4gICAgICAgIGlmIChydGwpIHdyYXBwZXJSb3RhdGUgPSAtc2xpZGVJbmRleCAqIDkwIC0gcHJvZ3Jlc3MgKiA5MDtcbiAgICAgIH1cblxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG5cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIHZhciBzaGFkb3dCZWZvcmUgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgdmFyIHNoYWRvd0FmdGVyID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuXG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlID0gKDAsIF9kb20uZGVmYXVsdCkoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QWZ0ZXIgPSAoMCwgX2RvbS5kZWZhdWx0KShcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIixcbiAgICAgICctbW96LXRyYW5zZm9ybS1vcmlnaW4nOiBcIjUwJSA1MCUgLVwiICsgc3dpcGVyU2l6ZSAvIDIgKyBcInB4XCIsXG4gICAgICAnLW1zLXRyYW5zZm9ybS1vcmlnaW4nOiBcIjUwJSA1MCUgLVwiICsgc3dpcGVyU2l6ZSAvIDIgKyBcInB4XCIsXG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIlxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgKHN3aXBlcldpZHRoIC8gMiArIHBhcmFtcy5zaGFkb3dPZmZzZXQpICsgXCJweCwgXCIgKyAtc3dpcGVyV2lkdGggLyAyICsgXCJweCkgcm90YXRlWCg5MGRlZykgcm90YXRlWigwZGVnKSBzY2FsZShcIiArIHBhcmFtcy5zaGFkb3dTY2FsZSArIFwiKVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwO1xuICAgICAgICB2YXIgbXVsdGlwbGllciA9IDEuNSAtIChNYXRoLnNpbihzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJIC8gMzYwKSAvIDIgKyBNYXRoLmNvcyhzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJIC8gMzYwKSAvIDIpO1xuICAgICAgICB2YXIgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICB2YXIgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjtcbiAgICAgICAgdmFyIG9mZnNldCA9IHBhcmFtcy5zaGFkb3dPZmZzZXQ7XG4gICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKFwic2NhbGUzZChcIiArIHNjYWxlMSArIFwiLCAxLCBcIiArIHNjYWxlMiArIFwiKSB0cmFuc2xhdGUzZCgwcHgsIFwiICsgKHN3aXBlckhlaWdodCAvIDIgKyBvZmZzZXQpICsgXCJweCwgXCIgKyAtc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMiArIFwicHgpIHJvdGF0ZVgoLTkwZGVnKVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgekZhY3RvciA9IGJyb3dzZXIuaXNTYWZhcmkgfHwgYnJvd3Nlci5pc1dlYlZpZXcgPyAtc3dpcGVyU2l6ZSAvIDIgOiAwO1xuICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMHB4LDAsXCIgKyB6RmFjdG9yICsgXCJweCkgcm90YXRlWChcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZSkgKyBcImRlZykgcm90YXRlWShcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDApICsgXCJkZWcpXCIpO1xuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdC5zaGFkb3cgJiYgIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGVsLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICdlZmZlY3QtY3ViZScsXG4gIHBhcmFtczoge1xuICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgIHNoYWRvd09mZnNldDogMjAsXG4gICAgICBzaGFkb3dTY2FsZTogMC45NFxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBjdWJlRWZmZWN0OiBfZXh0ZW5kcyh7fSwgQ3ViZSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJjdWJlXCIpO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpO1xuICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgcmVzaXN0YW5jZVJhdGlvOiAwLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgKDAsIF91dGlscy5leHRlbmQpKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4uLy4uL3V0aWxzL2RvbVwiOjg5LFwiLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgRmFkZSA9IHtcbiAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyICRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgIHZhciBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIHZhciB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIHZhciB0eSA9IDA7XG5cbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGUgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MpLCAwKSA6IDEgKyBNYXRoLm1pbihNYXRoLm1heCgkc2xpZGVFbFswXS5wcm9ncmVzcywgLTEpLCAwKTtcbiAgICAgICRzbGlkZUVsLmNzcyh7XG4gICAgICAgIG9wYWNpdHk6IHNsaWRlT3BhY2l0eVxuICAgICAgfSkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCAwcHgpXCIpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgdmFyIGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICBzbGlkZXMudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyRXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICdlZmZlY3QtZmFkZScsXG4gIHBhcmFtczoge1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICgwLCBfdXRpbHMuYmluZE1vZHVsZU1ldGhvZHMpKHN3aXBlciwge1xuICAgICAgZmFkZUVmZmVjdDogX2V4dGVuZHMoe30sIEZhZGUpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiZmFkZVwiKTtcbiAgICAgIHZhciBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgKDAsIF91dGlscy5leHRlbmQpKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTN9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgRmxpcCA9IHtcbiAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgdmFyIHByb2dyZXNzID0gJHNsaWRlRWxbMF0ucHJvZ3Jlc3M7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikge1xuICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICB2YXIgcm90YXRlID0gLTE4MCAqIHByb2dyZXNzO1xuICAgICAgdmFyIHJvdGF0ZVkgPSByb3RhdGU7XG4gICAgICB2YXIgcm90YXRlWCA9IDA7XG4gICAgICB2YXIgdHggPSAtb2Zmc2V0O1xuICAgICAgdmFyIHR5ID0gMDtcblxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XG4gICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChydGwpIHtcbiAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xuICAgICAgfVxuXG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgdmFyIHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICB2YXIgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG5cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAoMCwgX2RvbS5kZWZhdWx0KShcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCcpICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dBZnRlciA9ICgwLCBfZG9tLmRlZmF1bHQpKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cblxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCAwcHgpIHJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCJkZWcpXCIpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgIHZhciBldmVudFRyaWdnZXJlZCA9IGZhbHNlOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjsgLy8gaWYgKCEkKHRoaXMpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHJldHVybjtcblxuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0ge1xuICBuYW1lOiAnZWZmZWN0LWZsaXAnLFxuICBwYXJhbXM6IHtcbiAgICBmbGlwRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICBsaW1pdFJvdGF0aW9uOiB0cnVlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAoMCwgX3V0aWxzLmJpbmRNb2R1bGVNZXRob2RzKShzd2lwZXIsIHtcbiAgICAgIGZsaXBFZmZlY3Q6IF9leHRlbmRzKHt9LCBGbGlwKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImZsaXBcIik7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiM2RcIik7XG4gICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWVcbiAgICAgIH07XG4gICAgICAoMCwgX3V0aWxzLmV4dGVuZCkoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTN9XSw3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zc3JXaW5kb3cgPSByZXF1aXJlKFwic3NyLXdpbmRvd1wiKTtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgSGFzaE5hdmlnYXRpb24gPSB7XG4gIG9uSGFzaENhbmdlOiBmdW5jdGlvbiBvbkhhc2hDYW5nZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgICBzd2lwZXIuZW1pdCgnaGFzaENoYW5nZScpO1xuICAgIHZhciBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIHZhciBhY3RpdmVTbGlkZUhhc2ggPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJyk7XG5cbiAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICB2YXIgbmV3SW5kZXggPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtaGFzaD1cXFwiXCIgKyBuZXdIYXNoICsgXCJcXFwiXVwiKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH0sXG4gIHNldEhhc2g6IGZ1bmN0aW9uIHNldEhhc2goKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcbiAgICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgICBpZiAoIXN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5yZXBsYWNlU3RhdGUgJiYgd2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgXCIjXCIgKyBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJykgfHwgJycpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2hhc2hTZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgdmFyIGhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggPSBoYXNoIHx8ICcnO1xuICAgICAgc3dpcGVyLmVtaXQoJ2hhc2hTZXQnKTtcbiAgICB9XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRvY3VtZW50ID0gKDAsIF9zc3JXaW5kb3cuZ2V0RG9jdW1lbnQpKCk7XG4gICAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCB8fCBzd2lwZXIucGFyYW1zLmhpc3RvcnkgJiYgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBoYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuXG4gICAgaWYgKGhhc2gpIHtcbiAgICAgIHZhciBzcGVlZCA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgIHZhciBzbGlkZUhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcblxuICAgICAgICBpZiAoc2xpZGVIYXNoID09PSBoYXNoICYmICFzbGlkZS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICgwLCBfZG9tLmRlZmF1bHQpKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2luZG93ID0gKDAsIF9zc3JXaW5kb3cuZ2V0V2luZG93KSgpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgKDAsIF9kb20uZGVmYXVsdCkod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgbmFtZTogJ2hhc2gtbmF2aWdhdGlvbicsXG4gIHBhcmFtczoge1xuICAgIGhhc2hOYXZpZ2F0aW9uOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICB3YXRjaFN0YXRlOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBoYXNoTmF2aWdhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICBpbml0aWFsaXplZDogZmFsc2VcbiAgICAgIH0sIEhhc2hOYXZpZ2F0aW9uKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4uLy4uL3V0aWxzL2RvbVwiOjg5LFwiLi4vLi4vdXRpbHMvdXRpbHNcIjo5MyxcInNzci13aW5kb3dcIjo1fV0sNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc3NyV2luZG93ID0gcmVxdWlyZShcInNzci13aW5kb3dcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBIaXN0b3J5ID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB3aW5kb3cgPSAoMCwgX3NzcldpbmRvdy5nZXRXaW5kb3cpKCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkpIHJldHVybjtcblxuICAgIGlmICghd2luZG93Lmhpc3RvcnkgfHwgIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGhpc3RvcnkgPSBzd2lwZXIuaGlzdG9yeTtcbiAgICBoaXN0b3J5LmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBoaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBpZiAoIWhpc3RvcnkucGF0aHMua2V5ICYmICFoaXN0b3J5LnBhdGhzLnZhbHVlKSByZXR1cm47XG4gICAgaGlzdG9yeS5zY3JvbGxUb1NsaWRlKDAsIGhpc3RvcnkucGF0aHMudmFsdWUsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH0sXG4gIHNldEhpc3RvcnlQb3BTdGF0ZTogZnVuY3Rpb24gc2V0SGlzdG9yeVBvcFN0YXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5oaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBzd2lwZXIuaGlzdG9yeS5zY3JvbGxUb1NsaWRlKHN3aXBlci5wYXJhbXMuc3BlZWQsIHN3aXBlci5oaXN0b3J5LnBhdGhzLnZhbHVlLCBmYWxzZSk7XG4gIH0sXG4gIGdldFBhdGhWYWx1ZXM6IGZ1bmN0aW9uIGdldFBhdGhWYWx1ZXModXJsT3ZlcnJpZGUpIHtcbiAgICB2YXIgd2luZG93ID0gKDAsIF9zc3JXaW5kb3cuZ2V0V2luZG93KSgpO1xuICAgIHZhciBsb2NhdGlvbjtcblxuICAgIGlmICh1cmxPdmVycmlkZSkge1xuICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHVybE92ZXJyaWRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgfVxuXG4gICAgdmFyIHBhdGhBcnJheSA9IGxvY2F0aW9uLnBhdGhuYW1lLnNsaWNlKDEpLnNwbGl0KCcvJykuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XG4gICAgfSk7XG4gICAgdmFyIHRvdGFsID0gcGF0aEFycmF5Lmxlbmd0aDtcbiAgICB2YXIga2V5ID0gcGF0aEFycmF5W3RvdGFsIC0gMl07XG4gICAgdmFyIHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleToga2V5LFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgc2V0SGlzdG9yeTogZnVuY3Rpb24gc2V0SGlzdG9yeShrZXksIGluZGV4KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcbiAgICBpZiAoIXN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHZhciBsb2NhdGlvbjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVybCkge1xuICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgfVxuXG4gICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG4gICAgdmFyIHZhbHVlID0gSGlzdG9yeS5zbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcblxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgdmFsdWUgPSBrZXkgKyBcIi9cIiArIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5zdGF0ZTtcblxuICAgIGlmIChjdXJyZW50U3RhdGUgJiYgY3VycmVudFN0YXRlLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9LCBudWxsLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxuICBzbHVnaWZ5OiBmdW5jdGlvbiBzbHVnaWZ5KHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJy0nKS5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJykucmVwbGFjZSgvLS0rL2csICctJykucmVwbGFjZSgvXi0rLywgJycpLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgfSxcbiAgc2Nyb2xsVG9TbGlkZTogZnVuY3Rpb24gc2Nyb2xsVG9TbGlkZShzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgc2xpZGVIaXN0b3J5ID0gSGlzdG9yeS5zbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcblxuICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIHZhciBpbmRleCA9IHNsaWRlLmluZGV4KCk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgbmFtZTogJ2hpc3RvcnknLFxuICBwYXJhbXM6IHtcbiAgICBoaXN0b3J5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICBrZXk6ICdzbGlkZXMnXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAoMCwgX3V0aWxzLmJpbmRNb2R1bGVNZXRob2RzKShzd2lwZXIsIHtcbiAgICAgIGhpc3Rvcnk6IF9leHRlbmRzKHt9LCBIaXN0b3J5KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGlzdG9yeS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkKSB7XG4gICAgICAgIHN3aXBlci5oaXN0b3J5LnNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuaGlzdG9yeS5pbml0aWFsaXplZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy91dGlsc1wiOjkzLFwic3NyLXdpbmRvd1wiOjV9XSw3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zc3JXaW5kb3cgPSByZXF1aXJlKFwic3NyLXdpbmRvd1wiKTtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgS2V5Ym9hcmQgPSB7XG4gIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcbiAgICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgZSA9IGV2ZW50O1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcblxuICAgIHZhciBrYyA9IGUua2V5Q29kZSB8fCBlLmNoYXJDb2RlO1xuICAgIHZhciBwYWdlVXBEb3duID0gc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5wYWdlVXBEb3duO1xuICAgIHZhciBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xuICAgIHZhciBpc1BhZ2VEb3duID0gcGFnZVVwRG93biAmJiBrYyA9PT0gMzQ7XG4gICAgdmFyIGlzQXJyb3dMZWZ0ID0ga2MgPT09IDM3O1xuICAgIHZhciBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XG4gICAgdmFyIGlzQXJyb3dVcCA9IGtjID09PSAzODtcbiAgICB2YXIgaXNBcnJvd0Rvd24gPSBrYyA9PT0gNDA7IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGlzQXJyb3dMZWZ0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd1VwIHx8IGlzUGFnZVVwKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0IHx8IGlzQXJyb3dVcCB8fCBpc0Fycm93RG93bikpIHtcbiAgICAgIHZhciBpblZpZXcgPSBmYWxzZTsgLy8gQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XG5cbiAgICAgIGlmIChzd2lwZXIuJGVsLnBhcmVudHMoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpLmxlbmd0aCA+IDAgJiYgc3dpcGVyLiRlbC5wYXJlbnRzKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB2YXIgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgdmFyIHN3aXBlck9mZnNldCA9IHN3aXBlci4kZWwub2Zmc2V0KCk7XG4gICAgICBpZiAocnRsKSBzd2lwZXJPZmZzZXQubGVmdCAtPSBzd2lwZXIuJGVsWzBdLnNjcm9sbExlZnQ7XG4gICAgICB2YXIgc3dpcGVyQ29vcmQgPSBbW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTtcblxuICAgICAgICBpZiAocG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSB3aW5kb3dXaWR0aCAmJiBwb2ludFsxXSA+PSAwICYmIHBvaW50WzFdIDw9IHdpbmRvd0hlaWdodCkge1xuICAgICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFpblZpZXcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0KSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwgfHwgKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiBydGwpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BhZ2VEb3duIHx8IGlzQXJyb3dEb3duKSBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2tleVByZXNzJywga2MpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sXG4gIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICgwLCBfZG9tLmRlZmF1bHQpKGRvY3VtZW50KS5vbigna2V5ZG93bicsIHN3aXBlci5rZXlib2FyZC5oYW5kbGUpO1xuICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gdHJ1ZTtcbiAgfSxcbiAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgKDAsIF9kb20uZGVmYXVsdCkoZG9jdW1lbnQpLm9mZigna2V5ZG93bicsIHN3aXBlci5rZXlib2FyZC5oYW5kbGUpO1xuICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gZmFsc2U7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICdrZXlib2FyZCcsXG4gIHBhcmFtczoge1xuICAgIGtleWJvYXJkOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxuICAgICAgcGFnZVVwRG93bjogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBrZXlib2FyZDogX2V4dGVuZHMoe1xuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfSwgS2V5Ym9hcmQpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZGlzYWJsZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTMsXCJzc3Itd2luZG93XCI6NX1dLDc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBMYXp5ID0ge1xuICBsb2FkSW5TbGlkZTogZnVuY3Rpb24gbG9hZEluU2xpZGUoaW5kZXgsIGxvYWRJbkR1cGxpY2F0ZSkge1xuICAgIGlmIChsb2FkSW5EdXBsaWNhdGUgPT09IHZvaWQgMCkge1xuICAgICAgbG9hZEluRHVwbGljYXRlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5sYXp5O1xuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIHZhciAkc2xpZGVFbCA9IGlzVmlydHVhbCA/IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaW5kZXggKyBcIlxcXCJdXCIpIDogc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG4gICAgdmFyICRpbWFnZXMgPSAkc2xpZGVFbC5maW5kKFwiLlwiICsgcGFyYW1zLmVsZW1lbnRDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMubG9hZGVkQ2xhc3MgKyBcIik6bm90KC5cIiArIHBhcmFtcy5sb2FkaW5nQ2xhc3MgKyBcIilcIik7XG5cbiAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmVsZW1lbnRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpKSB7XG4gICAgICAkaW1hZ2VzLnB1c2goJHNsaWRlRWxbMF0pO1xuICAgIH1cblxuICAgIGlmICgkaW1hZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICRpbWFnZXMuZWFjaChmdW5jdGlvbiAoaW1hZ2VFbCkge1xuICAgICAgdmFyICRpbWFnZUVsID0gKDAsIF9kb20uZGVmYXVsdCkoaW1hZ2VFbCk7XG4gICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcbiAgICAgIHZhciBiYWNrZ3JvdW5kID0gJGltYWdlRWwuYXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICB2YXIgc3JjID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgIHZhciBzcmNzZXQgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgdmFyIHNpemVzID0gJGltYWdlRWwuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgdmFyICRwaWN0dXJlRWwgPSAkaW1hZ2VFbC5wYXJlbnQoJ3BpY3R1cmUnKTtcbiAgICAgIHN3aXBlci5sb2FkSW1hZ2UoJGltYWdlRWxbMF0sIHNyYyB8fCBiYWNrZ3JvdW5kLCBzcmNzZXQsIHNpemVzLCBmYWxzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyICYmICFzd2lwZXIucGFyYW1zIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICBpZiAoYmFja2dyb3VuZCkge1xuICAgICAgICAgICRpbWFnZUVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIFwidXJsKFxcXCJcIiArIGJhY2tncm91bmQgKyBcIlxcXCIpXCIpO1xuICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyY3NldCcsIHNyY3NldCk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc2l6ZXMnLCBzaXplcyk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCRwaWN0dXJlRWwubGVuZ3RoKSB7XG4gICAgICAgICAgICAkcGljdHVyZUVsLmNoaWxkcmVuKCdzb3VyY2UnKS5lYWNoKGZ1bmN0aW9uIChzb3VyY2VFbCkge1xuICAgICAgICAgICAgICB2YXIgJHNvdXJjZSA9ICgwLCBfZG9tLmRlZmF1bHQpKHNvdXJjZUVsKTtcblxuICAgICAgICAgICAgICBpZiAoJHNvdXJjZS5hdHRyKCdkYXRhLXNyY3NldCcpKSB7XG4gICAgICAgICAgICAgICAgJHNvdXJjZS5hdHRyKCdzcmNzZXQnLCAkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpO1xuICAgICAgICAgICAgICAgICRzb3VyY2UucmVtb3ZlQXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3JjJywgc3JjKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKS5yZW1vdmVDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcbiAgICAgICAgJHNsaWRlRWwuZmluZChcIi5cIiArIHBhcmFtcy5wcmVsb2FkZXJDbGFzcykucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgICAgICB2YXIgc2xpZGVPcmlnaW5hbEluZGV4ID0gJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcblxuICAgICAgICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICB2YXIgb3JpZ2luYWxTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlT3JpZ2luYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKG9yaWdpbmFsU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZHVwbGljYXRlZFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZU9yaWdpbmFsSW5kZXggKyBcIlxcXCJdXCIpO1xuICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoZHVwbGljYXRlZFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIuZW1pdCgnbGF6eUltYWdlUmVhZHknLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VMb2FkJywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcbiAgICB9KTtcbiAgfSxcbiAgbG9hZDogZnVuY3Rpb24gbG9hZCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzd2lwZXJQYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyUGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyUGFyYW1zLmxhenk7XG4gICAgdmFyIHNsaWRlc1BlclZpZXcgPSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlRXhpc3QoaW5kZXgpIHtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgaWYgKCR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXJQYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGluZGV4ICsgXCJcXFwiXVwiKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzbGlkZXNbaW5kZXhdKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXR1cm4gKDAsIF9kb20uZGVmYXVsdCkoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgwLCBfZG9tLmRlZmF1bHQpKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpIHN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCA9IHRydWU7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXJQYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaXNWaXJ0dWFsID8gKDAsIF9kb20uZGVmYXVsdCkoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA6ICgwLCBfZG9tLmRlZmF1bHQpKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgIGZvciAodmFyIGkgPSBhY3RpdmVJbmRleDsgaSA8IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoYWN0aXZlSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMubG9hZFByZXZOZXh0KSB7XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyA+IDEgfHwgcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCAmJiBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ID4gMSkge1xuICAgICAgICB2YXIgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDtcbiAgICAgICAgdmFyIHNwdiA9IHNsaWRlc1BlclZpZXc7XG4gICAgICAgIHZhciBtYXhJbmRleCA9IE1hdGgubWluKGFjdGl2ZUluZGV4ICsgc3B2ICsgTWF0aC5tYXgoYW1vdW50LCBzcHYpLCBzbGlkZXMubGVuZ3RoKTtcbiAgICAgICAgdmFyIG1pbkluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBNYXRoLm1heChzcHYsIGFtb3VudCksIDApOyAvLyBOZXh0IFNsaWRlc1xuXG4gICAgICAgIGZvciAodmFyIF9pID0gYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBfaSA8IG1heEluZGV4OyBfaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoX2kpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShfaSk7XG4gICAgICAgIH0gLy8gUHJldiBTbGlkZXNcblxuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IG1pbkluZGV4OyBfaTIgPCBhY3RpdmVJbmRleDsgX2kyICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVFeGlzdChfaTIpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShfaTIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV4dFNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlclBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChuZXh0U2xpZGUpKTtcbiAgICAgICAgdmFyIHByZXZTbGlkZSA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXJQYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICBpZiAocHJldlNsaWRlLmxlbmd0aCA+IDApIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKHNsaWRlSW5kZXgocHJldlNsaWRlKSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjaGVja0luVmlld09uTG9hZDogZnVuY3Rpb24gY2hlY2tJblZpZXdPbkxvYWQoKSB7XG4gICAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgdmFyICRzY3JvbGxFbGVtZW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5LnNjcm9sbGluZ0VsZW1lbnQgPyAoMCwgX2RvbS5kZWZhdWx0KShzd2lwZXIucGFyYW1zLmxhenkuc2Nyb2xsaW5nRWxlbWVudCkgOiAoMCwgX2RvbS5kZWZhdWx0KSh3aW5kb3cpO1xuICAgIHZhciBpc1dpbmRvdyA9ICRzY3JvbGxFbGVtZW50WzBdID09PSB3aW5kb3c7XG4gICAgdmFyIHNjcm9sbEVsZW1lbnRXaWR0aCA9IGlzV2luZG93ID8gd2luZG93LmlubmVyV2lkdGggOiAkc2Nyb2xsRWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICB2YXIgc2Nyb2xsRWxlbWVudEhlaWdodCA9IGlzV2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogJHNjcm9sbEVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciBzd2lwZXJPZmZzZXQgPSBzd2lwZXIuJGVsLm9mZnNldCgpO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgIHZhciBpblZpZXcgPSBmYWxzZTtcbiAgICBpZiAocnRsKSBzd2lwZXJPZmZzZXQubGVmdCAtPSBzd2lwZXIuJGVsWzBdLnNjcm9sbExlZnQ7XG4gICAgdmFyIHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdLCBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXIud2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTtcblxuICAgICAgaWYgKHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gc2Nyb2xsRWxlbWVudFdpZHRoICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gc2Nyb2xsRWxlbWVudEhlaWdodCkge1xuICAgICAgICBpZiAocG9pbnRbMF0gPT09IDAgJiYgcG9pbnRbMV0gPT09IDApIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgICAgaW5WaWV3ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5WaWV3KSB7XG4gICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAkc2Nyb2xsRWxlbWVudC5vZmYoJ3Njcm9sbCcsIHN3aXBlci5sYXp5LmNoZWNrSW5WaWV3T25Mb2FkKTtcbiAgICB9IGVsc2UgaWYgKCFzd2lwZXIubGF6eS5zY3JvbGxIYW5kbGVyQXR0YWNoZWQpIHtcbiAgICAgIHN3aXBlci5sYXp5LnNjcm9sbEhhbmRsZXJBdHRhY2hlZCA9IHRydWU7XG4gICAgICAkc2Nyb2xsRWxlbWVudC5vbignc2Nyb2xsJywgc3dpcGVyLmxhenkuY2hlY2tJblZpZXdPbkxvYWQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgbmFtZTogJ2xhenknLFxuICBwYXJhbXM6IHtcbiAgICBsYXp5OiB7XG4gICAgICBjaGVja0luVmlldzogZmFsc2UsXG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dDogZmFsc2UsXG4gICAgICBsb2FkUHJldk5leHRBbW91bnQ6IDEsXG4gICAgICBsb2FkT25UcmFuc2l0aW9uU3RhcnQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsaW5nRWxlbWVudDogJycsXG4gICAgICBlbGVtZW50Q2xhc3M6ICdzd2lwZXItbGF6eScsXG4gICAgICBsb2FkaW5nQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkaW5nJyxcbiAgICAgIGxvYWRlZENsYXNzOiAnc3dpcGVyLWxhenktbG9hZGVkJyxcbiAgICAgIHByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBsYXp5OiBfZXh0ZW5kcyh7XG4gICAgICAgIGluaXRpYWxJbWFnZUxvYWRlZDogZmFsc2VcbiAgICAgIH0sIExhenkpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPT09IDApIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5jaGVja0luVmlldykge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmNoZWNrSW5WaWV3T25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzY3JvbGw6IGZ1bmN0aW9uIHNjcm9sbChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmICFzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNjcm9sbGJhckRyYWdNb3ZlOiBmdW5jdGlvbiBzY3JvbGxiYXJEcmFnTW92ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCB8fCAhc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCAmJiAhc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0KSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTMsXCJzc3Itd2luZG93XCI6NX1dLDc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoKSB7XG4gIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuICB2YXIgZXZlbnROYW1lID0gJ29ud2hlZWwnO1xuICB2YXIgaXNTdXBwb3J0ZWQgPSAoZXZlbnROYW1lIGluIGRvY3VtZW50KTtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG52YXIgTW91c2V3aGVlbCA9IHtcbiAgbGFzdFNjcm9sbFRpbWU6ICgwLCBfdXRpbHMubm93KSgpLFxuICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgZXZlbnQ6IGZ1bmN0aW9uIGV2ZW50KCkge1xuICAgIHZhciB3aW5kb3cgPSAoMCwgX3NzcldpbmRvdy5nZXRXaW5kb3cpKCk7XG4gICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2ZpcmVmb3gnKSA+IC0xKSByZXR1cm4gJ0RPTU1vdXNlU2Nyb2xsJztcbiAgICByZXR1cm4gaXNFdmVudFN1cHBvcnRlZCgpID8gJ3doZWVsJyA6ICdtb3VzZXdoZWVsJztcbiAgfSxcbiAgbm9ybWFsaXplOiBmdW5jdGlvbiBub3JtYWxpemUoZSkge1xuICAgIC8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbiAgICB2YXIgUElYRUxfU1RFUCA9IDEwO1xuICAgIHZhciBMSU5FX0hFSUdIVCA9IDQwO1xuICAgIHZhciBQQUdFX0hFSUdIVCA9IDgwMDtcbiAgICB2YXIgc1ggPSAwO1xuICAgIHZhciBzWSA9IDA7IC8vIHNwaW5YLCBzcGluWVxuXG4gICAgdmFyIHBYID0gMDtcbiAgICB2YXIgcFkgPSAwOyAvLyBwaXhlbFgsIHBpeGVsWVxuICAgIC8vIExlZ2FjeVxuXG4gICAgaWYgKCdkZXRhaWwnIGluIGUpIHtcbiAgICAgIHNZID0gZS5kZXRhaWw7XG4gICAgfVxuXG4gICAgaWYgKCd3aGVlbERlbHRhJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGEgLyAxMjA7XG4gICAgfVxuXG4gICAgaWYgKCd3aGVlbERlbHRhWScgaW4gZSkge1xuICAgICAgc1kgPSAtZS53aGVlbERlbHRhWSAvIDEyMDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBlKSB7XG4gICAgICBzWCA9IC1lLndoZWVsRGVsdGFYIC8gMTIwO1xuICAgIH0gLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuXG5cbiAgICBpZiAoJ2F4aXMnIGluIGUgJiYgZS5heGlzID09PSBlLkhPUklaT05UQUxfQVhJUykge1xuICAgICAgc1ggPSBzWTtcbiAgICAgIHNZID0gMDtcbiAgICB9XG5cbiAgICBwWCA9IHNYICogUElYRUxfU1RFUDtcbiAgICBwWSA9IHNZICogUElYRUxfU1RFUDtcblxuICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7XG4gICAgICBwWSA9IGUuZGVsdGFZO1xuICAgIH1cblxuICAgIGlmICgnZGVsdGFYJyBpbiBlKSB7XG4gICAgICBwWCA9IGUuZGVsdGFYO1xuICAgIH1cblxuICAgIGlmIChlLnNoaWZ0S2V5ICYmICFwWCkge1xuICAgICAgLy8gaWYgdXNlciBzY3JvbGxzIHdpdGggc2hpZnQgaGUgd2FudHMgaG9yaXpvbnRhbCBzY3JvbGxcbiAgICAgIHBYID0gcFk7XG4gICAgICBwWSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKChwWCB8fCBwWSkgJiYgZS5kZWx0YU1vZGUpIHtcbiAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkge1xuICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgICAgfVxuICAgIH0gLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcblxuXG4gICAgaWYgKHBYICYmICFzWCkge1xuICAgICAgc1ggPSBwWCA8IDEgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgaWYgKHBZICYmICFzWSkge1xuICAgICAgc1kgPSBwWSA8IDEgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNwaW5YOiBzWCxcbiAgICAgIHNwaW5ZOiBzWSxcbiAgICAgIHBpeGVsWDogcFgsXG4gICAgICBwaXhlbFk6IHBZXG4gICAgfTtcbiAgfSxcbiAgaGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcigpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gdHJ1ZTtcbiAgfSxcbiAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gZmFsc2U7XG4gIH0sXG4gIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgdmFyIGUgPSBldmVudDtcbiAgICB2YXIgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gKDAsIF9kb20uZGVmYXVsdCkoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIubW91c2VFbnRlcmVkICYmICF0YXJnZXRbMF0uY29udGFpbnMoZS50YXJnZXQpICYmICFwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHJldHVybiB0cnVlO1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcblxuICAgIHZhciBkZWx0YSA9IDA7XG4gICAgdmFyIHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgdmFyIGRhdGEgPSBNb3VzZXdoZWVsLm5vcm1hbGl6ZShlKTtcblxuICAgIGlmIChwYXJhbXMuZm9yY2VUb0F4aXMpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgZGVsdGEgPSAtZGF0YS5waXhlbFggKiBydGxGYWN0b3I7ZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFkpID4gTWF0aC5hYnMoZGF0YS5waXhlbFgpKSBkZWx0YSA9IC1kYXRhLnBpeGVsWTtlbHNlIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWx0YSA9IE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvciA6IC1kYXRhLnBpeGVsWTtcbiAgICB9XG5cbiAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0cnVlO1xuICAgIGlmIChwYXJhbXMuaW52ZXJ0KSBkZWx0YSA9IC1kZWx0YTsgLy8gR2V0IHRoZSBzY3JvbGwgcG9zaXRpb25zXG5cbiAgICB2YXIgcG9zaXRpb25zID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHk7XG4gICAgaWYgKHBvc2l0aW9ucyA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHBvc2l0aW9ucyA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBpZiAocG9zaXRpb25zIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb25zID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpOyAvLyBXaGVuIGxvb3AgaXMgdHJ1ZTpcbiAgICAvLyAgICAgdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgIC8vIFdoZW4gbG9vcCBpcyBmYWxzZTpcbiAgICAvLyAgICAgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbnMgaXMgbm90IG9uIGVkZ2UsXG4gICAgLy8gICAgIHRoZW4gdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgIC8vICAgICBpZiB0aGUgc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zLFxuICAgIC8vICAgICB0aGVuIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgZmFsc2UuXG5cbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gc3dpcGVyLnBhcmFtcy5sb29wID8gdHJ1ZSA6ICEocG9zaXRpb25zID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb25zID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpO1xuICAgIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyICYmIHN3aXBlci5wYXJhbXMubmVzdGVkKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGluIGEgdmFyaWFibGUgd2hpY2ggc3RvcmVzIHRoZSByZWxldmFudCBkYXRhXG4gICAgICB2YXIgbmV3RXZlbnQgPSB7XG4gICAgICAgIHRpbWU6ICgwLCBfdXRpbHMubm93KSgpLFxuICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSksXG4gICAgICAgIHJhdzogZXZlbnRcbiAgICAgIH07IC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuXG4gICAgICB2YXIgcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcblxuICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNoaWZ0KCk7IC8vIG9ubHkgc3RvcmUgdGhlIGxhc3QgTiBldmVudHNcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA/IHJlY2VudFdoZWVsRXZlbnRzW3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgICAgcmVjZW50V2hlZWxFdmVudHMucHVzaChuZXdFdmVudCk7IC8vIElmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmV2aW91cyByZWNvcmRlZCBldmVudDpcbiAgICAgIC8vICAgSWYgZGlyZWN0aW9uIGhhcyBjaGFuZ2VkIG9yXG4gICAgICAvLyAgIGlmIHRoZSBzY3JvbGwgaXMgcXVpY2tlciB0aGFuIHRoZSBwcmV2aW91cyBvbmU6XG4gICAgICAvLyAgICAgQW5pbWF0ZSB0aGUgc2xpZGVyLlxuICAgICAgLy8gRWxzZSAodGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGUgd2hlZWwgaXMgbW92ZWQpOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cblxuICAgICAgaWYgKHByZXZFdmVudCkge1xuICAgICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uICE9PSBwcmV2RXZlbnQuZGlyZWN0aW9uIHx8IG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LnRpbWUgPiBwcmV2RXZlbnQudGltZSArIDE1MCkge1xuICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmFuaW1hdGVTbGlkZXIobmV3RXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgIH0gLy8gSWYgaXQncyB0aW1lIHRvIHJlbGVhc2UgdGhlIHNjcm9sbDpcbiAgICAgIC8vICAgUmV0dXJuIG5vdyBzbyB5b3UgZG9uJ3QgaGl0IHRoZSBwcmV2ZW50RGVmYXVsdC5cblxuXG4gICAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwucmVsZWFzZVNjcm9sbChuZXdFdmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZyZWVtb2RlIG9yIHNjcm9sbENvbnRhaW5lcjpcbiAgICAgIC8vIElmIHdlIHJlY2VudGx5IHNuYXBwZWQgYWZ0ZXIgYSBtb21lbnR1bSBzY3JvbGwsIHRoZW4gaWdub3JlIHdoZWVsIGV2ZW50c1xuICAgICAgLy8gdG8gZ2l2ZSB0aW1lIGZvciB0aGUgZGVjZWxlcmF0aW9uIHRvIGZpbmlzaC4gU3RvcCBpZ25vcmluZyBhZnRlciA1MDAgbXNlY3NcbiAgICAgIC8vIG9yIGlmIGl0J3MgYSBuZXcgc2Nyb2xsIChsYXJnZXIgZGVsdGEgb3IgaW52ZXJzZSBzaWduIGFzIGxhc3QgZXZlbnQgYmVmb3JlXG4gICAgICAvLyBhbiBlbmQtb2YtbW9tZW50dW0gc25hcCkuXG4gICAgICB2YXIgX25ld0V2ZW50ID0ge1xuICAgICAgICB0aW1lOiAoMCwgX3V0aWxzLm5vdykoKSxcbiAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSxcbiAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24oZGVsdGEpXG4gICAgICB9O1xuICAgICAgdmFyIGxhc3RFdmVudEJlZm9yZVNuYXAgPSBzd2lwZXIubW91c2V3aGVlbC5sYXN0RXZlbnRCZWZvcmVTbmFwO1xuICAgICAgdmFyIGlnbm9yZVdoZWVsRXZlbnRzID0gbGFzdEV2ZW50QmVmb3JlU25hcCAmJiBfbmV3RXZlbnQudGltZSA8IGxhc3RFdmVudEJlZm9yZVNuYXAudGltZSArIDUwMCAmJiBfbmV3RXZlbnQuZGVsdGEgPD0gbGFzdEV2ZW50QmVmb3JlU25hcC5kZWx0YSAmJiBfbmV3RXZlbnQuZGlyZWN0aW9uID09PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRpcmVjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykge1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5sYXN0RXZlbnRCZWZvcmVTbmFwID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHk7XG4gICAgICAgIHZhciB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgIHZhciB3YXNFbmQgPSBzd2lwZXIuaXNFbmQ7XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICBpZiAocG9zaXRpb24gPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICAgICAgaWYgKCF3YXNCZWdpbm5pbmcgJiYgc3dpcGVyLmlzQmVnaW5uaW5nIHx8ICF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgLy8gV2hlbiB3aGVlbCBzY3JvbGxpbmcgc3RhcnRzIHdpdGggc3RpY2t5IChha2Egc25hcCkgZW5hYmxlZCwgdGhlbiBkZXRlY3RcbiAgICAgICAgICAvLyB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGJ5IHN0b3JpbmcgcmVjZW50IChOPTE1Pykgd2hlZWwgZXZlbnRzLlxuICAgICAgICAgIC8vIDEuIGRvIGFsbCBOIGV2ZW50cyBoYXZlIGRlY3JlYXNpbmcgb3Igc2FtZSAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhP1xuICAgICAgICAgIC8vIDIuIGRpZCBhbGwgTiBldmVudHMgYXJyaXZlIGluIHRoZSBsYXN0IE0gKE09NTAwPykgbXNlY3M/XG4gICAgICAgICAgLy8gMy4gZG9lcyB0aGUgZWFybGllc3QgZXZlbnQgaGF2ZSBhbiAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhIHRoYXQnc1xuICAgICAgICAgIC8vICAgIGF0IGxlYXN0IFAgKFA9MT8pIGxhcmdlciB0aGFuIHRoZSBtb3N0IHJlY2VudCBldmVudCdzIGRlbHRhP1xuICAgICAgICAgIC8vIDQuIGRvZXMgdGhlIGxhdGVzdCBldmVudCBoYXZlIGEgZGVsdGEgdGhhdCdzIHNtYWxsZXIgdGhhbiBRIChRPTY/KSBwaXhlbHM/XG4gICAgICAgICAgLy8gSWYgMS00IGFyZSBcInllc1wiIHRoZW4gd2UncmUgbmVhciB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGRlY2VsZXJhdGlvbi5cbiAgICAgICAgICAvLyBTbmFwIGltbWVkaWF0ZWx5IGFuZCBpZ25vcmUgcmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbC5cbiAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBmb3IgXCJyZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsXCIgZGV0ZXJtaW5hdGlvbi5cbiAgICAgICAgICAvLyBJZiAxLTQgYXJlbid0IHNhdGlzZmllZCwgdGhlbiB3YWl0IHRvIHNuYXAgdW50aWwgNTAwbXMgYWZ0ZXIgdGhlIGxhc3QgZXZlbnQuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQpO1xuICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIF9yZWNlbnRXaGVlbEV2ZW50cyA9IHN3aXBlci5tb3VzZXdoZWVsLnJlY2VudFdoZWVsRXZlbnRzO1xuXG4gICAgICAgICAgaWYgKF9yZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMTUpIHtcbiAgICAgICAgICAgIF9yZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3ByZXZFdmVudCA9IF9yZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyBfcmVjZW50V2hlZWxFdmVudHNbX3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgdmFyIGZpcnN0RXZlbnQgPSBfcmVjZW50V2hlZWxFdmVudHNbMF07XG5cbiAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMucHVzaChfbmV3RXZlbnQpO1xuXG4gICAgICAgICAgaWYgKF9wcmV2RXZlbnQgJiYgKF9uZXdFdmVudC5kZWx0YSA+IF9wcmV2RXZlbnQuZGVsdGEgfHwgX25ld0V2ZW50LmRpcmVjdGlvbiAhPT0gX3ByZXZFdmVudC5kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAvLyBJbmNyZWFzaW5nIG9yIHJldmVyc2Utc2lnbiBkZWx0YSBtZWFucyB0aGUgdXNlciBzdGFydGVkIHNjcm9sbGluZyBhZ2Fpbi4gQ2xlYXIgdGhlIHdoZWVsIGV2ZW50IGxvZy5cbiAgICAgICAgICAgIF9yZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1ICYmIF9uZXdFdmVudC50aW1lIC0gZmlyc3RFdmVudC50aW1lIDwgNTAwICYmIGZpcnN0RXZlbnQuZGVsdGEgLSBfbmV3RXZlbnQuZGVsdGEgPj0gMSAmJiBfbmV3RXZlbnQuZGVsdGEgPD0gNikge1xuICAgICAgICAgICAgLy8gV2UncmUgYXQgdGhlIGVuZCBvZiB0aGUgZGVjZWxlcmF0aW9uIG9mIGEgbW9tZW50dW0gc2Nyb2xsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgICAgICAgICAgIC8vIHRvIHdhaXQgZm9yIG1vcmUgZXZlbnRzLiBTbmFwIEFTQVAgb24gdGhlIG5leHQgdGljay5cbiAgICAgICAgICAgIC8vIEFsc28sIGJlY2F1c2UgdGhlcmUncyBzb21lIHJlbWFpbmluZyBtb21lbnR1bSB3ZSdsbCBiaWFzIHRoZSBzbmFwIGluIHRoZVxuICAgICAgICAgICAgLy8gZGlyZWN0aW9uIG9mIHRoZSBvbmdvaW5nIHNjcm9sbCBiZWNhdXNlIGl0J3MgYmV0dGVyIFVYIGZvciB0aGUgc2Nyb2xsIHRvIHNuYXBcbiAgICAgICAgICAgIC8vIGluIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB0aGUgc2Nyb2xsIGluc3RlYWQgb2YgcmV2ZXJzaW5nIHRvIHNuYXAuICBUaGVyZWZvcmUsXG4gICAgICAgICAgICAvLyBpZiBpdCdzIGFscmVhZHkgc2Nyb2xsZWQgbW9yZSB0aGFuIDIwJSBpbiB0aGUgY3VycmVudCBkaXJlY3Rpb24sIGtlZXAgZ29pbmcuXG4gICAgICAgICAgICB2YXIgc25hcFRvVGhyZXNob2xkID0gZGVsdGEgPiAwID8gMC44IDogMC4yO1xuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IF9uZXdFdmVudDtcblxuICAgICAgICAgICAgX3JlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcblxuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCA9ICgwLCBfdXRpbHMubmV4dFRpY2spKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHVuZGVmaW5lZCwgc25hcFRvVGhyZXNob2xkKTtcbiAgICAgICAgICAgIH0sIDApOyAvLyBubyBkZWxheTsgbW92ZSBvbiBuZXh0IHRpY2tcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGdldCBoZXJlLCB0aGVuIHdlIGhhdmVuJ3QgZGV0ZWN0ZWQgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc29cbiAgICAgICAgICAgIC8vIHdlJ2xsIGNvbnNpZGVyIGEgc2Nyb2xsIFwiY29tcGxldGVcIiB3aGVuIHRoZXJlIGhhdmVuJ3QgYmVlbiBhbnkgd2hlZWwgZXZlbnRzXG4gICAgICAgICAgICAvLyBmb3IgNTAwbXMuXG4gICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gKDAsIF91dGlscy5uZXh0VGljaykoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgc25hcFRvVGhyZXNob2xkID0gMC41O1xuICAgICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5sYXN0RXZlbnRCZWZvcmVTbmFwID0gX25ld0V2ZW50O1xuXG4gICAgICAgICAgICAgIF9yZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG5cbiAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHVuZGVmaW5lZCwgc25hcFRvVGhyZXNob2xkKTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIEVtaXQgZXZlbnRcblxuXG4gICAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBlKTsgLy8gU3RvcCBhdXRvcGxheVxuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbikgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTsgLy8gUmV0dXJuIHBhZ2Ugc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zXG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb24gPT09IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGFuaW1hdGVTbGlkZXI6IGZ1bmN0aW9uIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2luZG93ID0gKDAsIF9zc3JXaW5kb3cuZ2V0V2luZG93KSgpO1xuXG4gICAgaWYgKHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEgJiYgbmV3RXZlbnQuZGVsdGEgPCB0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZERlbHRhKSB7XG4gICAgICAvLyBQcmV2ZW50IGlmIGRlbHRhIG9mIHdoZWVsIHNjcm9sbCBkZWx0YSBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgKDAsIF91dGlscy5ub3cpKCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkge1xuICAgICAgLy8gUHJldmVudCBpZiB0aW1lIGJldHdlZW4gc2Nyb2xscyBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gSWYgdGhlIG1vdmVtZW50IGlzIE5PVCBiaWcgZW5vdWdoIGFuZFxuICAgIC8vIGlmIHRoZSBsYXN0IHRpbWUgdGhlIHVzZXIgc2Nyb2xsZWQgd2FzIHRvbyBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgKGF2b2lkIGNvbnRpbnVvdXNseSB0cmlnZ2VyaW5nIHRoZSBzbGlkZXIpOlxuICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS5cblxuXG4gICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgKDAsIF91dGlscy5ub3cpKCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIElmIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGVuZDpcbiAgICAvLyAgIElmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgbGF0ZXN0IHNsaWRlIG9yXG4gICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAvLyAgICAgR28gdG8gbmV4dCBzbGlkZSBhbmRcbiAgICAvLyAgICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICAvLyBFbHNlICh0aGUgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgYmVnaW5uaW5nKSBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGZpcnN0IHNsaWRlIG9yXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgR28gdG8gcHJldiBzbGlkZSBhbmRcbiAgICAvLyAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG5cblxuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIG5ld0V2ZW50LnJhdyk7XG4gICAgfSAvLyBJZiB5b3UgZ290IGhlcmUgaXMgYmVjYXVzZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkIHNvIHN0b3JlIHRoZSBjdXJyZW50IHRpbWVcblxuXG4gICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7IC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgcmVsZWFzZVNjcm9sbDogZnVuY3Rpb24gcmVsZWFzZVNjcm9sbChuZXdFdmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICgwLCBfZG9tLmRlZmF1bHQpKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cblxuICAgIHRhcmdldC5vbignbW91c2VlbnRlcicsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIpO1xuICAgIHRhcmdldC5vbignbW91c2VsZWF2ZScsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlTGVhdmUpO1xuICAgIHRhcmdldC5vbihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgZXZlbnQgPSBNb3VzZXdoZWVsLmV2ZW50KCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWV2ZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICgwLCBfZG9tLmRlZmF1bHQpKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cblxuICAgIHRhcmdldC5vZmYoZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0ge1xuICBuYW1lOiAnbW91c2V3aGVlbCcsXG4gIHBhcmFtczoge1xuICAgIG1vdXNld2hlZWw6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAgICAgaW52ZXJ0OiBmYWxzZSxcbiAgICAgIGZvcmNlVG9BeGlzOiBmYWxzZSxcbiAgICAgIHNlbnNpdGl2aXR5OiAxLFxuICAgICAgZXZlbnRzVGFyZ2V0OiAnY29udGFpbmVyJyxcbiAgICAgIHRocmVzaG9sZERlbHRhOiBudWxsLFxuICAgICAgdGhyZXNob2xkVGltZTogbnVsbFxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBtb3VzZXdoZWVsOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBsYXN0U2Nyb2xsVGltZTogKDAsIF91dGlscy5ub3cpKCksXG4gICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXA6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVjZW50V2hlZWxFdmVudHM6IFtdLFxuICAgICAgICBlbmFibGU6IE1vdXNld2hlZWwuZW5hYmxlLFxuICAgICAgICBkaXNhYmxlOiBNb3VzZXdoZWVsLmRpc2FibGUsXG4gICAgICAgIGhhbmRsZTogTW91c2V3aGVlbC5oYW5kbGUsXG4gICAgICAgIGhhbmRsZU1vdXNlRW50ZXI6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgaGFuZGxlTW91c2VMZWF2ZTogTW91c2V3aGVlbC5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBhbmltYXRlU2xpZGVyOiBNb3VzZXdoZWVsLmFuaW1hdGVTbGlkZXIsXG4gICAgICAgIHJlbGVhc2VTY3JvbGw6IE1vdXNld2hlZWwucmVsZWFzZVNjcm9sbFxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCkgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmRpc2FibGUoKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi4vLi4vdXRpbHMvZG9tXCI6ODksXCIuLi8uLi91dGlscy91dGlsc1wiOjkzLFwic3NyLXdpbmRvd1wiOjV9XSw4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgTmF2aWdhdGlvbiA9IHtcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24gPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kbmV4dEVsLFxuICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uLiRwcmV2RWw7XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH1cblxuICAgICAgJHByZXZFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICAkbmV4dEVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9LFxuICBvblByZXZDbGljazogZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gIH0sXG4gIG9uTmV4dENsaWNrOiBmdW5jdGlvbiBvbk5leHRDbGljayhlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjtcbiAgICB2YXIgJG5leHRFbDtcbiAgICB2YXIgJHByZXZFbDtcblxuICAgIGlmIChwYXJhbXMubmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gKDAsIF9kb20uZGVmYXVsdCkocGFyYW1zLm5leHRFbCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMubmV4dEVsID09PSAnc3RyaW5nJyAmJiAkbmV4dEVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkbmV4dEVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMucHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gKDAsIF9kb20uZGVmYXVsdCkocGFyYW1zLnByZXZFbCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJyAmJiAkcHJldkVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkcHJldkVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgJG5leHRFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkcHJldkVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICB9XG5cbiAgICAoMCwgX3V0aWxzLmV4dGVuZCkoc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgICRuZXh0RWw6ICRuZXh0RWwsXG4gICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICRwcmV2RWw6ICRwcmV2RWwsXG4gICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXVxuICAgIH0pO1xuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24yID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICRuZXh0RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24yLiRuZXh0RWwsXG4gICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24yLiRwcmV2RWw7XG5cbiAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgJG5leHRFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICRwcmV2RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICAgICRwcmV2RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgbmFtZTogJ25hdmlnYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGwsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJyxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICgwLCBfdXRpbHMuYmluZE1vZHVsZU1ldGhvZHMpKHN3aXBlciwge1xuICAgICAgbmF2aWdhdGlvbjogX2V4dGVuZHMoe30sIE5hdmlnYXRpb24pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgdG9FZGdlOiBmdW5jdGlvbiB0b0VkZ2Uoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIGZyb21FZGdlOiBmdW5jdGlvbiBmcm9tRWRnZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhzd2lwZXIsIGUpIHtcbiAgICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24zID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjMuJG5leHRFbCxcbiAgICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uMy4kcHJldkVsO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmICEoMCwgX2RvbS5kZWZhdWx0KShlLnRhcmdldCkuaXMoJHByZXZFbCkgJiYgISgwLCBfZG9tLmRlZmF1bHQpKGUudGFyZ2V0KS5pcygkbmV4dEVsKSkge1xuICAgICAgICB2YXIgaXNIaWRkZW47XG5cbiAgICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgICBpc0hpZGRlbiA9ICRuZXh0RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSAkcHJldkVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvblNob3cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi4vLi4vdXRpbHMvZG9tXCI6ODksXCIuLi8uLi91dGlscy91dGlsc1wiOjkzfV0sODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdXRpbHMvZG9tXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIFBhZ2luYXRpb24gPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7IC8vIEN1cnJlbnQvVG90YWxcblxuICAgIHZhciBjdXJyZW50O1xuICAgIHZhciB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgY3VycmVudCA9IE1hdGguY2VpbCgoc3dpcGVyLmFjdGl2ZUluZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIHtcbiAgICAgICAgY3VycmVudCAtPSBzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIGN1cnJlbnQgLT0gdG90YWw7XG4gICAgICBpZiAoY3VycmVudCA8IDAgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAhPT0gJ2J1bGxldHMnKSBjdXJyZW50ID0gdG90YWwgKyBjdXJyZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH0gLy8gVHlwZXNcblxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIHZhciBmaXJzdEluZGV4O1xuICAgICAgdmFyIGxhc3RJbmRleDtcbiAgICAgIHZhciBtaWRJbmRleDtcblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplID0gYnVsbGV0cy5lcSgwKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgJGVsLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpICsgXCJweFwiKTtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID4gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4IDwgMCkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdEluZGV4ID0gY3VycmVudCAtIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleDtcbiAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgfVxuXG4gICAgICBidWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuXG4gICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5lYWNoKGZ1bmN0aW9uIChidWxsZXQpIHtcbiAgICAgICAgICB2YXIgJGJ1bGxldCA9ICgwLCBfZG9tLmRlZmF1bHQpKGJ1bGxldCk7XG4gICAgICAgICAgdmFyIGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuXG4gICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIikucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldC5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dFwiKS5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgJGJ1bGxldCA9IGJ1bGxldHMuZXEoY3VycmVudCk7XG4gICAgICAgIHZhciBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcbiAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICB2YXIgJGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShmaXJzdEluZGV4KTtcbiAgICAgICAgICB2YXIgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgYnVsbGV0cy5lcShpKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBidWxsZXRzLmxlbmd0aCAtIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgYnVsbGV0cy5lcShidWxsZXRzLmxlbmd0aCAtIF9pKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnVsbGV0cy5lcShidWxsZXRzLmxlbmd0aCAtIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJGZpcnN0RGlzcGxheWVkQnVsbGV0LnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIik7XG4gICAgICAgICAgICAgICRsYXN0RGlzcGxheWVkQnVsbGV0Lm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXQubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICB2YXIgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICB2YXIgYnVsbGV0c09mZnNldCA9IChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGggLSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplKSAvIDIgLSBtaWRJbmRleCAqIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemU7XG4gICAgICAgIHZhciBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBidWxsZXRzT2Zmc2V0ICsgXCJweFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICRlbC5maW5kKFwiLlwiICsgcGFyYW1zLmN1cnJlbnRDbGFzcykudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAkZWwuZmluZChcIi5cIiArIHBhcmFtcy50b3RhbENsYXNzKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICB2YXIgcHJvZ3Jlc3NiYXJEaXJlY3Rpb247XG5cbiAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgIHZhciBzY2FsZVggPSAxO1xuICAgICAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICB9XG5cbiAgICAgICRlbC5maW5kKFwiLlwiICsgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKFwiICsgc2NhbGVYICsgXCIpIHNjYWxlWShcIiArIHNjYWxlWSArIFwiKVwiKS50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgJGVsLmh0bWwocGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCkpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCAkZWxbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsICRlbFswXSk7XG4gICAgfVxuXG4gICAgJGVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICB2YXIgcGFnaW5hdGlvbkhUTUwgPSAnJztcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICB2YXIgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IFwiPFwiICsgcGFyYW1zLmJ1bGxldEVsZW1lbnQgKyBcIiBjbGFzcz1cXFwiXCIgKyBwYXJhbXMuYnVsbGV0Q2xhc3MgKyBcIlxcXCI+PC9cIiArIHBhcmFtcy5idWxsZXRFbGVtZW50ICsgXCI+XCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9ICRlbC5maW5kKFwiLlwiICsgcGFyYW1zLmJ1bGxldENsYXNzLnJlcGxhY2UoLyAvZywgJy4nKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLmN1cnJlbnRDbGFzcyArIFwiXFxcIj48L3NwYW4+XCIgKyAnIC8gJyArIChcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHBhcmFtcy50b3RhbENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIik7XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIjtcbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3dpcGVyLnBhZ2luYXRpb24uJGVsWzBdKTtcbiAgICB9XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIHZhciAkZWwgPSAoMCwgX2RvbS5kZWZhdWx0KShwYXJhbXMuZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSkge1xuICAgICAgJGVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jbGlja2FibGVDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLmFkZENsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoXCJcIiArIHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUgKyBcIi1keW5hbWljXCIpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwub24oJ2NsaWNrJywgXCIuXCIgKyBwYXJhbXMuYnVsbGV0Q2xhc3MucmVwbGFjZSgvIC9nLCAnLicpLCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgaW5kZXggPSAoMCwgX2RvbS5kZWZhdWx0KSh0aGlzKS5pbmRleCgpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgKDAsIF91dGlscy5leHRlbmQpKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAkZWw6ICRlbCxcbiAgICAgIGVsOiAkZWxbMF1cbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vZmYoJ2NsaWNrJywgXCIuXCIgKyBwYXJhbXMuYnVsbGV0Q2xhc3MucmVwbGFjZSgvIC9nLCAnLicpKTtcbiAgICB9XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICdwYWdpbmF0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBmdW5jdGlvbiBmb3JtYXRGcmFjdGlvbkN1cnJlbnQobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9LFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZnVuY3Rpb24gZm9ybWF0RnJhY3Rpb25Ub3RhbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgIH0sXG4gICAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCcsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnLFxuICAgICAgbW9kaWZpZXJDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLScsXG4gICAgICAvLyBORVdcbiAgICAgIGN1cnJlbnRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWN1cnJlbnQnLFxuICAgICAgdG90YWxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXRvdGFsJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbCcsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZScsXG4gICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsXG4gICAgICAvLyBORVdcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWxvY2snXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAoMCwgX3V0aWxzLmJpbmRNb2R1bGVNZXRob2RzKShzd2lwZXIsIHtcbiAgICAgIHBhZ2luYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4OiAwXG4gICAgICB9LCBQYWdpbmF0aW9uKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5pbml0KCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgYWN0aXZlSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIGFjdGl2ZUluZGV4Q2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc25hcEluZGV4Q2hhbmdlOiBmdW5jdGlvbiBzbmFwSW5kZXhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlc0xlbmd0aENoYW5nZTogZnVuY3Rpb24gc2xpZGVzTGVuZ3RoQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwR3JpZExlbmd0aENoYW5nZTogZnVuY3Rpb24gc25hcEdyaWRMZW5ndGhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA+IDAgJiYgISgwLCBfZG9tLmRlZmF1bHQpKGUudGFyZ2V0KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7XG4gICAgICAgIHZhciBpc0hpZGRlbiA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuXG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uU2hvdycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4uLy4uL3V0aWxzL2RvbVwiOjg5LFwiLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBQYXJhbGxheCA9IHtcbiAgc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgdmFyICRlbCA9ICgwLCBfZG9tLmRlZmF1bHQpKGVsKTtcbiAgICB2YXIgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuICAgIHZhciBwID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xuICAgIHZhciB4ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXgnKTtcbiAgICB2YXIgeSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC15Jyk7XG4gICAgdmFyIHNjYWxlID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlJyk7XG4gICAgdmFyIG9wYWNpdHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eScpO1xuXG4gICAgaWYgKHggfHwgeSkge1xuICAgICAgeCA9IHggfHwgJzAnO1xuICAgICAgeSA9IHkgfHwgJzAnO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4ID0gcDtcbiAgICAgIHkgPSAnMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBwO1xuICAgICAgeCA9ICcwJztcbiAgICB9XG5cbiAgICBpZiAoeC5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeCA9IHBhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yICsgXCIlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgaWYgKHkuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHkgPSBwYXJzZUludCh5LCAxMCkgKiBwcm9ncmVzcyArIFwiJVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0geSAqIHByb2dyZXNzICsgXCJweFwiO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgdmFyIGN1cnJlbnRPcGFjaXR5ID0gb3BhY2l0eSAtIChvcGFjaXR5IC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2NhbGUgPT09ICd1bmRlZmluZWQnIHx8IHNjYWxlID09PSBudWxsKSB7XG4gICAgICAkZWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCAwcHgpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICRlbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIDBweCkgc2NhbGUoXCIgKyBjdXJyZW50U2NhbGUgKyBcIilcIik7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3MsXG4gICAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgICRlbC5jaGlsZHJlbignW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcyk7XG4gICAgfSk7XG4gICAgc2xpZGVzLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwsIHNsaWRlSW5kZXgpIHtcbiAgICAgIHZhciBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgIHNsaWRlUHJvZ3Jlc3MgKz0gTWF0aC5jZWlsKHNsaWRlSW5kZXggLyAyKSAtIHByb2dyZXNzICogKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgICgwLCBfZG9tLmRlZmF1bHQpKHNsaWRlRWwpLmZpbmQoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKS5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBzbGlkZVByb2dyZXNzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgaWYgKGR1cmF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIGR1cmF0aW9uID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gICAgfVxuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgJGVsLmZpbmQoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKS5lYWNoKGZ1bmN0aW9uIChwYXJhbGxheEVsKSB7XG4gICAgICB2YXIgJHBhcmFsbGF4RWwgPSAoMCwgX2RvbS5kZWZhdWx0KShwYXJhbGxheEVsKTtcbiAgICAgIHZhciBwYXJhbGxheER1cmF0aW9uID0gcGFyc2VJbnQoJHBhcmFsbGF4RWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtZHVyYXRpb24nKSwgMTApIHx8IGR1cmF0aW9uO1xuICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgICRwYXJhbGxheEVsLnRyYW5zaXRpb24ocGFyYWxsYXhEdXJhdGlvbik7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICdwYXJhbGxheCcsXG4gIHBhcmFtczoge1xuICAgIHBhcmFsbGF4OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBwYXJhbGxheDogX2V4dGVuZHMoe30sIFBhcmFsbGF4KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTN9XSw4MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zc3JXaW5kb3cgPSByZXF1aXJlKFwic3NyLXdpbmRvd1wiKTtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgU2Nyb2xsYmFyID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAgIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzO1xuICAgIHZhciBkcmFnU2l6ZSA9IHNjcm9sbGJhci5kcmFnU2l6ZSxcbiAgICAgICAgdHJhY2tTaXplID0gc2Nyb2xsYmFyLnRyYWNrU2l6ZSxcbiAgICAgICAgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsLFxuICAgICAgICAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICB2YXIgbmV3U2l6ZSA9IGRyYWdTaXplO1xuICAgIHZhciBuZXdQb3MgPSAodHJhY2tTaXplIC0gZHJhZ1NpemUpICogcHJvZ3Jlc3M7XG5cbiAgICBpZiAocnRsKSB7XG4gICAgICBuZXdQb3MgPSAtbmV3UG9zO1xuXG4gICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgbmV3UG9zID0gMDtcbiAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRkcmFnRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyBuZXdQb3MgKyBcInB4LCAwLCAwKVwiKTtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBuZXdTaXplICsgXCJweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZHJhZ0VsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyBuZXdQb3MgKyBcInB4LCAwKVwiKTtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gbmV3U2l6ZSArIFwicHhcIjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQpO1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgJGVsLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLiRkcmFnRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0sXG4gIHVwZGF0ZVNpemU6IGZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgIHZhciAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWwsXG4gICAgICAgICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgdmFyIHRyYWNrU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRlbFswXS5vZmZzZXRXaWR0aCA6ICRlbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIGRpdmlkZXIgPSBzd2lwZXIuc2l6ZSAvIHN3aXBlci52aXJ0dWFsU2l6ZTtcbiAgICB2YXIgbW92ZURpdmlkZXIgPSBkaXZpZGVyICogKHRyYWNrU2l6ZSAvIHN3aXBlci5zaXplKTtcbiAgICB2YXIgZHJhZ1NpemU7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IGRyYWdTaXplICsgXCJweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IGRyYWdTaXplICsgXCJweFwiO1xuICAgIH1cblxuICAgIGlmIChkaXZpZGVyID49IDEpIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5oaWRlKSB7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgfVxuXG4gICAgKDAsIF91dGlscy5leHRlbmQpKHNjcm9sbGJhciwge1xuICAgICAgdHJhY2tTaXplOiB0cmFja1NpemUsXG4gICAgICBkaXZpZGVyOiBkaXZpZGVyLFxuICAgICAgbW92ZURpdmlkZXI6IG1vdmVEaXZpZGVyLFxuICAgICAgZHJhZ1NpemU6IGRyYWdTaXplXG4gICAgfSk7XG4gICAgc2Nyb2xsYmFyLiRlbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gIH0sXG4gIGdldFBvaW50ZXJQb3NpdGlvbjogZnVuY3Rpb24gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTtcbiAgfSxcbiAgc2V0RHJhZ1Bvc2l0aW9uOiBmdW5jdGlvbiBzZXREcmFnUG9zaXRpb24oZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsLFxuICAgICAgICBkcmFnU2l6ZSA9IHNjcm9sbGJhci5kcmFnU2l6ZSxcbiAgICAgICAgdHJhY2tTaXplID0gc2Nyb2xsYmFyLnRyYWNrU2l6ZSxcbiAgICAgICAgZHJhZ1N0YXJ0UG9zID0gc2Nyb2xsYmFyLmRyYWdTdGFydFBvcztcbiAgICB2YXIgcG9zaXRpb25SYXRpbztcbiAgICBwb3NpdGlvblJhdGlvID0gKHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSAkZWwub2Zmc2V0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApO1xuXG4gICAgaWYgKHJ0bCkge1xuICAgICAgcG9zaXRpb25SYXRpbyA9IDEgLSBwb3NpdGlvblJhdGlvO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogcG9zaXRpb25SYXRpbztcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocG9zaXRpb24pO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH0sXG4gIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBvbkRyYWdTdGFydChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWwsXG4gICAgICAgICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnU3RhcnRQb3MgPSBlLnRhcmdldCA9PT0gJGRyYWdFbFswXSB8fCBlLnRhcmdldCA9PT0gJGRyYWdFbCA/IHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gOiBudWxsO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigxMDApO1xuICAgICRkcmFnRWwudHJhbnNpdGlvbigxMDApO1xuICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICRlbC50cmFuc2l0aW9uKDApO1xuXG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJ25vbmUnKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ1N0YXJ0JywgZSk7XG4gIH0sXG4gIG9uRHJhZ01vdmU6IGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWwsXG4gICAgICAgICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcbiAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdNb3ZlJywgZSk7XG4gIH0sXG4gIG9uRHJhZ0VuZDogZnVuY3Rpb24gb25EcmFnRW5kKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQgPSBmYWxzZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICcnKTtcbiAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbignJyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0ID0gKDAsIF91dGlscy5uZXh0VGljaykoZnVuY3Rpb24gKCkge1xuICAgICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ0VuZCcsIGUpO1xuXG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICB9XG4gIH0sXG4gIGVuYWJsZURyYWdnYWJsZTogZnVuY3Rpb24gZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgdG91Y2hFdmVudHNUb3VjaCA9IHN3aXBlci50b3VjaEV2ZW50c1RvdWNoLFxuICAgICAgICB0b3VjaEV2ZW50c0Rlc2t0b3AgPSBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wLFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgdmFyIHRhcmdldCA9ICRlbFswXTtcbiAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuXG4gICAgaWYgKCFzdXBwb3J0LnRvdWNoKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3Auc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AuZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG4gIGRpc2FibGVEcmFnZ2FibGU6IGZ1bmN0aW9uIGRpc2FibGVEcmFnZ2FibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHZhciBkb2N1bWVudCA9ICgwLCBfc3NyV2luZG93LmdldERvY3VtZW50KSgpO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICB0b3VjaEV2ZW50c1RvdWNoID0gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCA9IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AsXG4gICAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICB2YXIgdGFyZ2V0ID0gJGVsWzBdO1xuICAgIHZhciBhY3RpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG5cbiAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICRzd2lwZXJFbCA9IHN3aXBlci4kZWw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIHZhciAkZWwgPSAoMCwgX2RvbS5kZWZhdWx0KShwYXJhbXMuZWwpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEgJiYgJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICRlbCA9ICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgdmFyICRkcmFnRWwgPSAkZWwuZmluZChcIi5cIiArIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyk7XG5cbiAgICBpZiAoJGRyYWdFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICRkcmFnRWwgPSAoMCwgX2RvbS5kZWZhdWx0KShcIjxkaXYgY2xhc3M9XFxcIlwiICsgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICRlbC5hcHBlbmQoJGRyYWdFbCk7XG4gICAgfVxuXG4gICAgKDAsIF91dGlscy5leHRlbmQpKHNjcm9sbGJhciwge1xuICAgICAgJGVsOiAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgICAgJGRyYWdFbDogJGRyYWdFbCxcbiAgICAgIGRyYWdFbDogJGRyYWdFbFswXVxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgIHNjcm9sbGJhci5lbmFibGVEcmFnZ2FibGUoKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlKCk7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICdzY3JvbGxiYXInLFxuICBwYXJhbXM6IHtcbiAgICBzY3JvbGxiYXI6IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgZHJhZ1NpemU6ICdhdXRvJyxcbiAgICAgIGhpZGU6IGZhbHNlLFxuICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgIHNuYXBPblJlbGVhc2U6IHRydWUsXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWxvY2snLFxuICAgICAgZHJhZ0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1kcmFnJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5iaW5kTW9kdWxlTWV0aG9kcykoc3dpcGVyLCB7XG4gICAgICBzY3JvbGxiYXI6IF9leHRlbmRzKHtcbiAgICAgICAgaXNUb3VjaGVkOiBmYWxzZSxcbiAgICAgICAgdGltZW91dDogbnVsbCxcbiAgICAgICAgZHJhZ1RpbWVvdXQ6IG51bGxcbiAgICAgIH0sIFNjcm9sbGJhcilcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5pbml0KCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTMsXCJzc3Itd2luZG93XCI6NX1dLDg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG52YXIgX2RvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3V0aWxzL2RvbVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBUaHVtYnMgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHRodW1ic1BhcmFtcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzO1xuICAgIGlmIChzd2lwZXIudGh1bWJzLmluaXRpYWxpemVkKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLnRodW1icy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdmFyIFN3aXBlckNsYXNzID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgaWYgKHRodW1ic1BhcmFtcy5zd2lwZXIgaW5zdGFuY2VvZiBTd2lwZXJDbGFzcykge1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSB0aHVtYnNQYXJhbXMuc3dpcGVyO1xuICAgICAgKDAsIF91dGlscy5leHRlbmQpKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5pc09iamVjdCkodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gbmV3IFN3aXBlckNsYXNzKCgwLCBfdXRpbHMuZXh0ZW5kKSh7fSwgdGh1bWJzUGFyYW1zLnN3aXBlciwge1xuICAgICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlckNyZWF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLiRlbC5hZGRDbGFzcyhzd2lwZXIucGFyYW1zLnRodW1icy50aHVtYnNDb250YWluZXJDbGFzcyk7XG4gICAgc3dpcGVyLnRodW1icy5zd2lwZXIub24oJ3RhcCcsIHN3aXBlci50aHVtYnMub25UaHVtYkNsaWNrKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb25UaHVtYkNsaWNrOiBmdW5jdGlvbiBvblRodW1iQ2xpY2soKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgdmFyIGNsaWNrZWRJbmRleCA9IHRodW1ic1N3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgdmFyIGNsaWNrZWRTbGlkZSA9IHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGU7XG4gICAgaWYgKGNsaWNrZWRTbGlkZSAmJiAoMCwgX2RvbS5kZWZhdWx0KShjbGlja2VkU2xpZGUpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47XG4gICAgdmFyIHNsaWRlVG9JbmRleDtcblxuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHBhcnNlSW50KCgwLCBfZG9tLmRlZmF1bHQpKHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVUb0luZGV4ID0gY2xpY2tlZEluZGV4O1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkucHJldkFsbChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZVRvSW5kZXggKyBcIlxcXCJdXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLm5leHRBbGwoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVUb0luZGV4ICsgXCJcXFwiXVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBwcmV2SW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7ZWxzZSBpZiAodHlwZW9mIG5leHRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDtlbHNlIGlmIChuZXh0SW5kZXggLSBjdXJyZW50SW5kZXggPCBjdXJyZW50SW5kZXggLSBwcmV2SW5kZXgpIHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDtlbHNlIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDtcbiAgICB9XG5cbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgdmFyIHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIHZhciBhdXRvU2Nyb2xsT2Zmc2V0ID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuYXV0b1Njcm9sbE9mZnNldDtcbiAgICB2YXIgdXNlT2Zmc2V0ID0gYXV0b1Njcm9sbE9mZnNldCAmJiAhdGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wO1xuXG4gICAgaWYgKHN3aXBlci5yZWFsSW5kZXggIT09IHRodW1ic1N3aXBlci5yZWFsSW5kZXggfHwgdXNlT2Zmc2V0KSB7XG4gICAgICB2YXIgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIG5ld1RodW1ic0luZGV4O1xuICAgICAgdmFyIGRpcmVjdGlvbjtcblxuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLmhhc0NsYXNzKHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgICAgIHRodW1ic1N3aXBlci5fY2xpZW50TGVmdCA9IHRodW1ic1N3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgICAgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICB9IC8vIEZpbmQgYWN0dWFsIHRodW1icyBpbmRleCB0byBzbGlkZSB0b1xuXG5cbiAgICAgICAgdmFyIHByZXZUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5wcmV2QWxsKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHN3aXBlci5yZWFsSW5kZXggKyBcIlxcXCJdXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICAgIHZhciBuZXh0VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRUaHVtYnNJbmRleCkubmV4dEFsbChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzd2lwZXIucmVhbEluZGV4ICsgXCJcXFwiXVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICBpZiAodHlwZW9mIHByZXZUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4O2Vsc2UgaWYgKHR5cGVvZiBuZXh0VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSBuZXdUaHVtYnNJbmRleCA9IHByZXZUaHVtYnNJbmRleDtlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgbmV3VGh1bWJzSW5kZXggPSBjdXJyZW50VGh1bWJzSW5kZXg7ZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4IDwgY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KSBuZXdUaHVtYnNJbmRleCA9IG5leHRUaHVtYnNJbmRleDtlbHNlIG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4O1xuICAgICAgICBkaXJlY3Rpb24gPSBzd2lwZXIuYWN0aXZlSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgZGlyZWN0aW9uID0gbmV3VGh1bWJzSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH1cblxuICAgICAgaWYgKHVzZU9mZnNldCkge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YobmV3VGh1bWJzSW5kZXgpIDwgMCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0gLy8gQWN0aXZhdGUgdGh1bWJzXG5cblxuICAgIHZhciB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICB2YXIgdGh1bWJBY3RpdmVDbGFzcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy50aHVtYnMubXVsdGlwbGVBY3RpdmVUaHVtYnMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIH1cblxuICAgIHRodW1ic1RvQWN0aXZhdGUgPSBNYXRoLmZsb29yKHRodW1ic1RvQWN0aXZhdGUpO1xuICAgIHRodW1ic1N3aXBlci5zbGlkZXMucmVtb3ZlQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG5cbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wIHx8IHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbCAmJiB0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHN3aXBlci5yZWFsSW5kZXggKyBpKSArIFwiXFxcIl1cIikuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aHVtYnNUb0FjdGl2YXRlOyBfaSArPSAxKSB7XG4gICAgICAgIHRodW1ic1N3aXBlci5zbGlkZXMuZXEoc3dpcGVyLnJlYWxJbmRleCArIF9pKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICd0aHVtYnMnLFxuICBwYXJhbXM6IHtcbiAgICB0aHVtYnM6IHtcbiAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgIG11bHRpcGxlQWN0aXZlVGh1bWJzOiB0cnVlLFxuICAgICAgYXV0b1Njcm9sbE9mZnNldDogMCxcbiAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS10aHVtYi1hY3RpdmUnLFxuICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLXRodW1icydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICgwLCBfdXRpbHMuYmluZE1vZHVsZU1ldGhvZHMpKHN3aXBlciwge1xuICAgICAgdGh1bWJzOiBfZXh0ZW5kcyh7XG4gICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlXG4gICAgICB9LCBUaHVtYnMpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIHZhciB0aHVtYnMgPSBzd2lwZXIucGFyYW1zLnRodW1icztcbiAgICAgIGlmICghdGh1bWJzIHx8ICF0aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLmluaXQoKTtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKHRydWUpO1xuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KHN3aXBlcikge1xuICAgICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCAmJiB0aHVtYnNTd2lwZXIpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi4vLi4vdXRpbHMvZG9tXCI6ODksXCIuLi8uLi91dGlscy91dGlsc1wiOjkzfV0sODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdXRpbHMvZG9tXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIFZpcnR1YWwgPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGZvcmNlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIF9zd2lwZXIkcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IF9zd2lwZXIkcGFyYW1zLnNsaWRlc1BlclZpZXcsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwID0gX3N3aXBlciRwYXJhbXMuc2xpZGVzUGVyR3JvdXAsXG4gICAgICAgIGNlbnRlcmVkU2xpZGVzID0gX3N3aXBlciRwYXJhbXMuY2VudGVyZWRTbGlkZXM7XG4gICAgdmFyIF9zd2lwZXIkcGFyYW1zJHZpcnR1YSA9IHN3aXBlci5wYXJhbXMudmlydHVhbCxcbiAgICAgICAgYWRkU2xpZGVzQmVmb3JlID0gX3N3aXBlciRwYXJhbXMkdmlydHVhLmFkZFNsaWRlc0JlZm9yZSxcbiAgICAgICAgYWRkU2xpZGVzQWZ0ZXIgPSBfc3dpcGVyJHBhcmFtcyR2aXJ0dWEuYWRkU2xpZGVzQWZ0ZXI7XG4gICAgdmFyIF9zd2lwZXIkdmlydHVhbCA9IHN3aXBlci52aXJ0dWFsLFxuICAgICAgICBwcmV2aW91c0Zyb20gPSBfc3dpcGVyJHZpcnR1YWwuZnJvbSxcbiAgICAgICAgcHJldmlvdXNUbyA9IF9zd2lwZXIkdmlydHVhbC50byxcbiAgICAgICAgc2xpZGVzID0gX3N3aXBlciR2aXJ0dWFsLnNsaWRlcyxcbiAgICAgICAgcHJldmlvdXNTbGlkZXNHcmlkID0gX3N3aXBlciR2aXJ0dWFsLnNsaWRlc0dyaWQsXG4gICAgICAgIHJlbmRlclNsaWRlID0gX3N3aXBlciR2aXJ0dWFsLnJlbmRlclNsaWRlLFxuICAgICAgICBwcmV2aW91c09mZnNldCA9IF9zd2lwZXIkdmlydHVhbC5vZmZzZXQ7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgdmFyIG9mZnNldFByb3A7XG4gICAgaWYgKHN3aXBlci5ydGxUcmFuc2xhdGUpIG9mZnNldFByb3AgPSAncmlnaHQnO2Vsc2Ugb2Zmc2V0UHJvcCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBzbGlkZXNBZnRlcjtcbiAgICB2YXIgc2xpZGVzQmVmb3JlO1xuXG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZXNBZnRlciA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gc2xpZGVzUGVyVmlldyArIChzbGlkZXNQZXJHcm91cCAtIDEpICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICBzbGlkZXNCZWZvcmUgPSBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9XG5cbiAgICB2YXIgZnJvbSA9IE1hdGgubWF4KChhY3RpdmVJbmRleCB8fCAwKSAtIHNsaWRlc0JlZm9yZSwgMCk7XG4gICAgdmFyIHRvID0gTWF0aC5taW4oKGFjdGl2ZUluZGV4IHx8IDApICsgc2xpZGVzQWZ0ZXIsIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgb2Zmc2V0ID0gKHN3aXBlci5zbGlkZXNHcmlkW2Zyb21dIHx8IDApIC0gKHN3aXBlci5zbGlkZXNHcmlkWzBdIHx8IDApO1xuICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIudmlydHVhbCwge1xuICAgICAgZnJvbTogZnJvbSxcbiAgICAgIHRvOiB0byxcbiAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgc2xpZGVzR3JpZDogc3dpcGVyLnNsaWRlc0dyaWRcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uUmVuZGVyZWQoKSB7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICAgIGlmIChzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZpb3VzRnJvbSA9PT0gZnJvbSAmJiBwcmV2aW91c1RvID09PSB0byAmJiAhZm9yY2UpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzR3JpZCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkICYmIG9mZnNldCAhPT0gcHJldmlvdXNPZmZzZXQpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlcy5jc3Mob2Zmc2V0UHJvcCwgb2Zmc2V0ICsgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbCkge1xuICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICB0bzogdG8sXG4gICAgICAgIHNsaWRlczogZnVuY3Rpb24gZ2V0U2xpZGVzKCkge1xuICAgICAgICAgIHZhciBzbGlkZXNUb1JlbmRlciA9IFtdO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gMSkge1xuICAgICAgICAgICAgc2xpZGVzVG9SZW5kZXIucHVzaChzbGlkZXNbaV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzbGlkZXNUb1JlbmRlcjtcbiAgICAgICAgfSgpXG4gICAgICB9KTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbFVwZGF0ZSkge1xuICAgICAgICBvblJlbmRlcmVkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJlcGVuZEluZGV4ZXMgPSBbXTtcbiAgICB2YXIgYXBwZW5kSW5kZXhlcyA9IFtdO1xuXG4gICAgaWYgKGZvcmNlKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IHByZXZpb3VzRnJvbTsgaSA8PSBwcmV2aW91c1RvOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGkgPCBmcm9tIHx8IGkgPiB0bykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpICsgXCJcXFwiXVwiKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBzbGlkZXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgICBpZiAoX2kgPj0gZnJvbSAmJiBfaSA8PSB0bykge1xuICAgICAgICBpZiAodHlwZW9mIHByZXZpb3VzVG8gPT09ICd1bmRlZmluZWQnIHx8IGZvcmNlKSB7XG4gICAgICAgICAgYXBwZW5kSW5kZXhlcy5wdXNoKF9pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoX2kgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goX2kpO1xuICAgICAgICAgIGlmIChfaSA8IHByZXZpb3VzRnJvbSkgcHJlcGVuZEluZGV4ZXMucHVzaChfaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBlbmRJbmRleGVzLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5hcHBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICB9KTtcbiAgICBwcmVwZW5kSW5kZXhlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYiAtIGE7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLnByZXBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbignLnN3aXBlci1zbGlkZScpLmNzcyhvZmZzZXRQcm9wLCBvZmZzZXQgKyBcInB4XCIpO1xuICAgIG9uUmVuZGVyZWQoKTtcbiAgfSxcbiAgcmVuZGVyU2xpZGU6IGZ1bmN0aW9uIHJlbmRlclNsaWRlKHNsaWRlLCBpbmRleCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG5cbiAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkge1xuICAgICAgcmV0dXJuIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XTtcbiAgICB9XG5cbiAgICB2YXIgJHNsaWRlRWwgPSBwYXJhbXMucmVuZGVyU2xpZGUgPyAoMCwgX2RvbS5kZWZhdWx0KShwYXJhbXMucmVuZGVyU2xpZGUuY2FsbChzd2lwZXIsIHNsaWRlLCBpbmRleCkpIDogKDAsIF9kb20uZGVmYXVsdCkoXCI8ZGl2IGNsYXNzPVxcXCJcIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiXFxcIiBkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIj5cIiArIHNsaWRlICsgXCI8L2Rpdj5cIik7XG4gICAgaWYgKCEkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSAkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICBpZiAocGFyYW1zLmNhY2hlKSBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0gPSAkc2xpZGVFbDtcbiAgICByZXR1cm4gJHNsaWRlRWw7XG4gIH0sXG4gIGFwcGVuZFNsaWRlOiBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlcyk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICB9LFxuICBwcmVwZW5kU2xpZGU6IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICAgIHZhciBudW1iZXJPZk5ld1NsaWRlcyA9IDE7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXMpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgIG51bWJlck9mTmV3U2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICB2YXIgY2FjaGUgPSBzd2lwZXIudmlydHVhbC5jYWNoZTtcbiAgICAgIHZhciBuZXdDYWNoZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoY2FjaGUpLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlZEluZGV4KSB7XG4gICAgICAgIHZhciAkY2FjaGVkRWwgPSBjYWNoZVtjYWNoZWRJbmRleF07XG4gICAgICAgIHZhciBjYWNoZWRFbEluZGV4ID0gJGNhY2hlZEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG5cbiAgICAgICAgaWYgKGNhY2hlZEVsSW5kZXgpIHtcbiAgICAgICAgICAkY2FjaGVkRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBwYXJzZUludChjYWNoZWRFbEluZGV4LCAxMCkgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSAkY2FjaGVkRWw7XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlID0gbmV3Q2FjaGU7XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlU2xpZGU6IGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICd1bmRlZmluZWQnIHx8IHNsaWRlc0luZGV4ZXMgPT09IG51bGwpIHJldHVybjtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXNJbmRleGVzKSkge1xuICAgICAgZm9yICh2YXIgaSA9IHNsaWRlc0luZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnNwbGljZShzbGlkZXNJbmRleGVzW2ldLCAxKTtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNdO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxO1xuICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlQWxsU2xpZGVzOiBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbygwLCAwKTtcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgbmFtZTogJ3ZpcnR1YWwnLFxuICBwYXJhbXM6IHtcbiAgICB2aXJ0dWFsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgIHJlbmRlclNsaWRlOiBudWxsLFxuICAgICAgcmVuZGVyRXh0ZXJuYWw6IG51bGwsXG4gICAgICByZW5kZXJFeHRlcm5hbFVwZGF0ZTogdHJ1ZSxcbiAgICAgIGFkZFNsaWRlc0JlZm9yZTogMCxcbiAgICAgIGFkZFNsaWRlc0FmdGVyOiAwXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAoMCwgX3V0aWxzLmJpbmRNb2R1bGVNZXRob2RzKShzd2lwZXIsIHtcbiAgICAgIHZpcnR1YWw6IF9leHRlbmRzKHt9LCBWaXJ0dWFsLCB7XG4gICAgICAgIHNsaWRlczogc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnNsaWRlcyxcbiAgICAgICAgY2FjaGU6IHt9XG4gICAgICB9KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwidmlydHVhbFwiKTtcbiAgICAgIHZhciBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWVcbiAgICAgIH07XG4gICAgICAoMCwgX3V0aWxzLmV4dGVuZCkoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICgwLCBfdXRpbHMuZXh0ZW5kKShzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG5cbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy9kb21cIjo4OSxcIi4uLy4uL3V0aWxzL3V0aWxzXCI6OTN9XSw4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi91dGlscy9kb21cIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgWm9vbSA9IHtcbiAgLy8gQ2FsYyBTY2FsZSBGcm9tIE11bHRpLXRvdWNoZXNcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlczogZnVuY3Rpb24gZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKSB7XG4gICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm4gMTtcbiAgICB2YXIgeDEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgdmFyIHkxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgIHZhciB4MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWDtcbiAgICB2YXIgeTIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVk7XG4gICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KHgyIC0geDEsIDIpICsgTWF0aC5wb3coeTIgLSB5MSwgMikpO1xuICAgIHJldHVybiBkaXN0YW5jZTtcbiAgfSxcbiAgLy8gRXZlbnRzXG4gIG9uR2VzdHVyZVN0YXJ0OiBmdW5jdGlvbiBvbkdlc3R1cmVTdGFydChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG4gICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcblxuICAgIGlmICghc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSB0cnVlO1xuICAgICAgZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgIH1cblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCB8fCAhZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGgpIHtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSAoMCwgX2RvbS5kZWZhdWx0KShlLnRhcmdldCkuY2xvc2VzdChcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGggPT09IDApIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KFwiLlwiICsgcGFyYW1zLmNvbnRhaW5lckNsYXNzKTtcbiAgICAgIGdlc3R1cmUubWF4UmF0aW8gPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuXG4gICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VFbCkge1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDApO1xuICAgIH1cblxuICAgIHN3aXBlci56b29tLmlzU2NhbGluZyA9IHRydWU7XG4gIH0sXG4gIG9uR2VzdHVyZUNoYW5nZTogZnVuY3Rpb24gb25HZXN0dXJlQ2hhbmdlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcblxuICAgIGlmICghc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChlLnR5cGUgPT09ICdnZXN0dXJlY2hhbmdlJykgem9vbS5vbkdlc3R1cmVTdGFydChlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgem9vbS5zY2FsZSA9IGUuc2NhbGUgKiB6b29tLmN1cnJlbnRTY2FsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuc2NhbGVNb3ZlIC8gZ2VzdHVyZS5zY2FsZVN0YXJ0ICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKHpvb20uc2NhbGUgPiBnZXN0dXJlLm1heFJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5tYXhSYXRpbyAtIDEgKyBNYXRoLnBvdyh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbyArIDEsIDAuNSk7XG4gICAgfVxuXG4gICAgaWYgKHpvb20uc2NhbGUgPCBwYXJhbXMubWluUmF0aW8pIHtcbiAgICAgIHpvb20uc2NhbGUgPSBwYXJhbXMubWluUmF0aW8gKyAxIC0gTWF0aC5wb3cocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSArIDEsIDAuNSk7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyB6b29tLnNjYWxlICsgXCIpXCIpO1xuICB9LFxuICBvbkdlc3R1cmVFbmQ6IGZ1bmN0aW9uIG9uR2VzdHVyZUVuZChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgdmFyIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG5cbiAgICBpZiAoIXN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmICghem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgfHwgIXpvb20uZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhZGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgem9vbS5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHpvb20uc2NhbGUsIGdlc3R1cmUubWF4UmF0aW8pLCBwYXJhbXMubWluUmF0aW8pO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyB6b29tLnNjYWxlICsgXCIpXCIpO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gem9vbS5zY2FsZTtcbiAgICB6b29tLmlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICB9LFxuICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZSxcbiAgICAgICAgaW1hZ2UgPSB6b29tLmltYWdlO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChpbWFnZS5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBpZiAoZGV2aWNlLmFuZHJvaWQgJiYgZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgfSxcbiAgb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlLFxuICAgICAgICBpbWFnZSA9IHpvb20uaW1hZ2UsXG4gICAgICAgIHZlbG9jaXR5ID0gem9vbS52ZWxvY2l0eTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFnZXN0dXJlLiRzbGlkZUVsKSByZXR1cm47XG5cbiAgICBpZiAoIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLndpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlLmhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgaW1hZ2Uuc3RhcnRYID0gKDAsIF91dGlscy5nZXRUcmFuc2xhdGUpKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneCcpIHx8IDA7XG4gICAgICBpbWFnZS5zdGFydFkgPSAoMCwgX3V0aWxzLmdldFRyYW5zbGF0ZSkoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd5JykgfHwgMDtcbiAgICAgIGdlc3R1cmUuc2xpZGVXaWR0aCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBnZXN0dXJlLnNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDApO1xuXG4gICAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgICBpbWFnZS5zdGFydFggPSAtaW1hZ2Uuc3RhcnRYO1xuICAgICAgICBpbWFnZS5zdGFydFkgPSAtaW1hZ2Uuc3RhcnRZO1xuICAgICAgfVxuICAgIH0gLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuXG5cbiAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgdmFyIHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaWYgKHNjYWxlZFdpZHRoIDwgZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHNjYWxlZEhlaWdodCA8IGdlc3R1cmUuc2xpZGVIZWlnaHQpIHJldHVybjtcbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuXG4gICAgaWYgKCFpbWFnZS5pc01vdmVkICYmICF6b29tLmlzU2NhbGluZykge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5YKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPCBpbWFnZS50b3VjaGVzU3RhcnQueCB8fCBNYXRoLmZsb29yKGltYWdlLm1heFgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA+IGltYWdlLnRvdWNoZXNTdGFydC54KSkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSB8fCBNYXRoLmZsb29yKGltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KSkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlLmNhbmNlbGFibGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGltYWdlLmlzTW92ZWQgPSB0cnVlO1xuICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIGltYWdlLnRvdWNoZXNTdGFydC54ICsgaW1hZ2Uuc3RhcnRYO1xuICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIGltYWdlLnRvdWNoZXNTdGFydC55ICsgaW1hZ2Uuc3RhcnRZO1xuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRYIDwgaW1hZ2UubWluWCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5taW5YICsgMSAtIE1hdGgucG93KGltYWdlLm1pblggLSBpbWFnZS5jdXJyZW50WCArIDEsIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRYID4gaW1hZ2UubWF4WCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5tYXhYIC0gMSArIE1hdGgucG93KGltYWdlLmN1cnJlbnRYIC0gaW1hZ2UubWF4WCArIDEsIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRZIDwgaW1hZ2UubWluWSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5taW5ZICsgMSAtIE1hdGgucG93KGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEsIDAuOCk7XG4gICAgfVxuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIE1hdGgucG93KGltYWdlLmN1cnJlbnRZIC0gaW1hZ2UubWF4WSArIDEsIDAuOCk7XG4gICAgfSAvLyBWZWxvY2l0eVxuXG5cbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgPCAyKSB2ZWxvY2l0eS54ID0gMDtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgdmVsb2NpdHkueSA9IDA7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgaW1hZ2UuY3VycmVudFggKyBcInB4LCBcIiArIGltYWdlLmN1cnJlbnRZICsgXCJweCwwKVwiKTtcbiAgfSxcbiAgb25Ub3VjaEVuZDogZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlLFxuICAgICAgICBpbWFnZSA9IHpvb20uaW1hZ2UsXG4gICAgICAgIHZlbG9jaXR5ID0gem9vbS52ZWxvY2l0eTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgdmFyIG1vbWVudHVtRHVyYXRpb25YID0gMzAwO1xuICAgIHZhciBtb21lbnR1bUR1cmF0aW9uWSA9IDMwMDtcbiAgICB2YXIgbW9tZW50dW1EaXN0YW5jZVggPSB2ZWxvY2l0eS54ICogbW9tZW50dW1EdXJhdGlvblg7XG4gICAgdmFyIG5ld1Bvc2l0aW9uWCA9IGltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgdmFyIG1vbWVudHVtRGlzdGFuY2VZID0gdmVsb2NpdHkueSAqIG1vbWVudHVtRHVyYXRpb25ZO1xuICAgIHZhciBuZXdQb3NpdGlvblkgPSBpbWFnZS5jdXJyZW50WSArIG1vbWVudHVtRGlzdGFuY2VZOyAvLyBGaXggZHVyYXRpb25cblxuICAgIGlmICh2ZWxvY2l0eS54ICE9PSAwKSBtb21lbnR1bUR1cmF0aW9uWCA9IE1hdGguYWJzKChuZXdQb3NpdGlvblggLSBpbWFnZS5jdXJyZW50WCkgLyB2ZWxvY2l0eS54KTtcbiAgICBpZiAodmVsb2NpdHkueSAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblkgPSBNYXRoLmFicygobmV3UG9zaXRpb25ZIC0gaW1hZ2UuY3VycmVudFkpIC8gdmVsb2NpdHkueSk7XG4gICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZOyAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG5cbiAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgdmFyIHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgaW1hZ2UuY3VycmVudFggKyBcInB4LCBcIiArIGltYWdlLmN1cnJlbnRZICsgXCJweCwwKVwiKTtcbiAgfSxcbiAgb25UcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcblxuICAgIGlmIChnZXN0dXJlLiRzbGlkZUVsICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICB9XG5cbiAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIFRvZ2dsZSBab29tXG4gIHRvZ2dsZTogZnVuY3Rpb24gdG9nZ2xlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuXG4gICAgaWYgKHpvb20uc2NhbGUgJiYgem9vbS5zY2FsZSAhPT0gMSkge1xuICAgICAgLy8gWm9vbSBPdXRcbiAgICAgIHpvb20ub3V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFpvb20gSW5cbiAgICAgIHpvb20uaW4oZSk7XG4gICAgfVxuICB9LFxuICBpbjogZnVuY3Rpb24gX2luKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmUsXG4gICAgICAgIGltYWdlID0gem9vbS5pbWFnZTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldCcpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChcIi5cIiArIHBhcmFtcy5jb250YWluZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgZ2VzdHVyZS4kc2xpZGVFbC5hZGRDbGFzcyhcIlwiICsgcGFyYW1zLnpvb21lZFNsaWRlQ2xhc3MpO1xuICAgIHZhciB0b3VjaFg7XG4gICAgdmFyIHRvdWNoWTtcbiAgICB2YXIgb2Zmc2V0WDtcbiAgICB2YXIgb2Zmc2V0WTtcbiAgICB2YXIgZGlmZlg7XG4gICAgdmFyIGRpZmZZO1xuICAgIHZhciB0cmFuc2xhdGVYO1xuICAgIHZhciB0cmFuc2xhdGVZO1xuICAgIHZhciBpbWFnZVdpZHRoO1xuICAgIHZhciBpbWFnZUhlaWdodDtcbiAgICB2YXIgc2NhbGVkV2lkdGg7XG4gICAgdmFyIHNjYWxlZEhlaWdodDtcbiAgICB2YXIgdHJhbnNsYXRlTWluWDtcbiAgICB2YXIgdHJhbnNsYXRlTWluWTtcbiAgICB2YXIgdHJhbnNsYXRlTWF4WDtcbiAgICB2YXIgdHJhbnNsYXRlTWF4WTtcbiAgICB2YXIgc2xpZGVXaWR0aDtcbiAgICB2YXIgc2xpZGVIZWlnaHQ7XG5cbiAgICBpZiAodHlwZW9mIGltYWdlLnRvdWNoZXNTdGFydC54ID09PSAndW5kZWZpbmVkJyAmJiBlKSB7XG4gICAgICB0b3VjaFggPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIHRvdWNoWSA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3VjaFggPSBpbWFnZS50b3VjaGVzU3RhcnQueDtcbiAgICAgIHRvdWNoWSA9IGltYWdlLnRvdWNoZXNTdGFydC55O1xuICAgIH1cblxuICAgIHpvb20uc2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcblxuICAgIGlmIChlKSB7XG4gICAgICBzbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBvZmZzZXRYID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS5sZWZ0O1xuICAgICAgb2Zmc2V0WSA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkudG9wO1xuICAgICAgZGlmZlggPSBvZmZzZXRYICsgc2xpZGVXaWR0aCAvIDIgLSB0b3VjaFg7XG4gICAgICBkaWZmWSA9IG9mZnNldFkgKyBzbGlkZUhlaWdodCAvIDIgLSB0b3VjaFk7XG4gICAgICBpbWFnZVdpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlSGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKHNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcbiAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuXG4gICAgICBpZiAodHJhbnNsYXRlWCA8IHRyYW5zbGF0ZU1pblgpIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1pblg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2xhdGVYID4gdHJhbnNsYXRlTWF4WCkge1xuICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWF4WDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgdHJhbnNsYXRlWCArIFwicHgsIFwiICsgdHJhbnNsYXRlWSArIFwicHgsMClcIik7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgem9vbS5zY2FsZSArIFwiKVwiKTtcbiAgfSxcbiAgb3V0OiBmdW5jdGlvbiBvdXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuXG4gICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KFwiLlwiICsgcGFyYW1zLmNvbnRhaW5lckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB6b29tLnNjYWxlID0gMTtcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IDE7XG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICBnZXN0dXJlLiRzbGlkZUVsLnJlbW92ZUNsYXNzKFwiXCIgKyBwYXJhbXMuem9vbWVkU2xpZGVDbGFzcyk7XG4gICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfSxcbiAgdG9nZ2xlR2VzdHVyZXM6IGZ1bmN0aW9uIHRvZ2dsZUdlc3R1cmVzKG1ldGhvZCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIHNlbGVjdG9yID0gem9vbS5zbGlkZVNlbGVjdG9yLFxuICAgICAgICBwYXNzaXZlID0gem9vbS5wYXNzaXZlTGlzdGVuZXI7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWxbbWV0aG9kXSgnZ2VzdHVyZXN0YXJ0Jywgc2VsZWN0b3IsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmUpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVjaGFuZ2UnLCBzZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmUpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVlbmQnLCBzZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmUpO1xuICB9LFxuICBlbmFibGVHZXN0dXJlczogZnVuY3Rpb24gZW5hYmxlR2VzdHVyZXMoKSB7XG4gICAgaWYgKHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQpIHJldHVybjtcbiAgICB0aGlzLnpvb20uZ2VzdHVyZXNFbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnpvb20udG9nZ2xlR2VzdHVyZXMoJ29uJyk7XG4gIH0sXG4gIGRpc2FibGVHZXN0dXJlczogZnVuY3Rpb24gZGlzYWJsZUdlc3R1cmVzKCkge1xuICAgIGlmICghdGhpcy56b29tLmdlc3R1cmVzRW5hYmxlZCkgcmV0dXJuO1xuICAgIHRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnpvb20udG9nZ2xlR2VzdHVyZXMoJ29mZicpO1xuICB9LFxuICAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG4gICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICB2YXIgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSA6IHRydWU7XG4gICAgdmFyIHNsaWRlU2VsZWN0b3IgPSBcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcztcbiAgICBzd2lwZXIuem9vbS5wYXNzaXZlTGlzdGVuZXIgPSBwYXNzaXZlTGlzdGVuZXI7XG4gICAgc3dpcGVyLnpvb20uc2xpZGVTZWxlY3RvciA9IHNsaWRlU2VsZWN0b3I7IC8vIFNjYWxlIGltYWdlXG5cbiAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIuem9vbS5lbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHN3aXBlci56b29tLmRpc2FibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgIGlmIChzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0gLy8gTW92ZSBpbWFnZVxuXG5cbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgXCIuXCIgKyBzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MsIHpvb20ub25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9LFxuICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKCF6b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHN3aXBlci56b29tLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIHZhciBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9IDogdHJ1ZTtcbiAgICB2YXIgc2xpZGVTZWxlY3RvciA9IFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzOyAvLyBTY2FsZSBpbWFnZVxuXG4gICAgaWYgKHN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci56b29tLmVuYWJsZUdlc3R1cmVzLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHN3aXBlci56b29tLmRpc2FibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG5cbiAgICAgIGlmIChzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9IC8vIE1vdmUgaW1hZ2VcblxuXG4gICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBcIi5cIiArIHN3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzcywgem9vbS5vblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIG5hbWU6ICd6b29tJyxcbiAgcGFyYW1zOiB7XG4gICAgem9vbToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtYXhSYXRpbzogMyxcbiAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgY29udGFpbmVyQ2xhc3M6ICdzd2lwZXItem9vbS1jb250YWluZXInLFxuICAgICAgem9vbWVkU2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZS16b29tZWQnXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAoMCwgX3V0aWxzLmJpbmRNb2R1bGVNZXRob2RzKShzd2lwZXIsIHtcbiAgICAgIHpvb206IF9leHRlbmRzKHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBjdXJyZW50U2NhbGU6IDEsXG4gICAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgICAkc2xpZGVFbDogdW5kZWZpbmVkLFxuICAgICAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgICRpbWFnZUVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWF4UmF0aW86IDNcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2U6IHtcbiAgICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgY3VycmVudFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjdXJyZW50WTogdW5kZWZpbmVkLFxuICAgICAgICAgIG1pblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtaW5ZOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWF4WDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1heFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0WDogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0WTogdW5kZWZpbmVkLFxuICAgICAgICAgIHRvdWNoZXNTdGFydDoge30sXG4gICAgICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHZlbG9jaXR5OiB7XG4gICAgICAgICAgeDogdW5kZWZpbmVkLFxuICAgICAgICAgIHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBwcmV2UG9zaXRpb25YOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLFxuICAgICAgICAgIHByZXZUaW1lOiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgfSwgWm9vbSlcbiAgICB9KTtcbiAgICB2YXIgc2NhbGUgPSAxO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBpZiAoc2NhbGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuem9vbS5nZXN0dXJlLiRpbWFnZUVsID8gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB2YXIgc2xpZGVFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCd6b29tQ2hhbmdlJywgdmFsdWUsIGltYWdlRWwsIHNsaWRlRWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NhbGUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci56b29tLmRpc2FibGUoKTtcbiAgICB9LFxuICAgIHRvdWNoU3RhcnQ6IGZ1bmN0aW9uIHRvdWNoU3RhcnQoc3dpcGVyLCBlKSB7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hTdGFydChlKTtcbiAgICB9LFxuICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZChzd2lwZXIsIGUpIHtcbiAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnpvb20ub25Ub3VjaEVuZChlKTtcbiAgICB9LFxuICAgIGRvdWJsZVRhcDogZnVuY3Rpb24gZG91YmxlVGFwKHN3aXBlciwgZSkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgICBzd2lwZXIuem9vbS50b2dnbGUoZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLnpvb20ub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLnpvb20ub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59LHtcIi4uLy4uL3V0aWxzL2RvbVwiOjg5LFwiLi4vLi4vdXRpbHMvdXRpbHNcIjo5M31dLDg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgT2JzZXJ2ZXIgPSB7XG4gIGF0dGFjaDogZnVuY3Rpb24gYXR0YWNoKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgd2luZG93ID0gKDAsIF9zc3JXaW5kb3cuZ2V0V2luZG93KSgpO1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIgfHwgIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICB2YXIgY29udGFpbmVyUGFyZW50cyA9IHN3aXBlci4kZWwucGFyZW50cygpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyXG5cblxuICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7IC8vIE9ic2VydmUgd3JhcHBlclxuXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJHdyYXBwZXJFbFswXSwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycyA9IFtdO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0ge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAoMCwgX3V0aWxzLmJpbmRNb2R1bGVNZXRob2RzKShzd2lwZXIsIHtcbiAgICAgIG9ic2VydmVyOiBfZXh0ZW5kcyh7fSwgT2JzZXJ2ZXIsIHtcbiAgICAgICAgb2JzZXJ2ZXJzOiBbXVxuICAgICAgfSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmluaXQoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCIuLi8uLi91dGlscy91dGlsc1wiOjkzLFwic3NyLXdpbmRvd1wiOjV9XSw4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zc3JXaW5kb3cgPSByZXF1aXJlKFwic3NyLXdpbmRvd1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc1wiKTtcblxudmFyIF9kZWZhdWx0ID0ge1xuICBuYW1lOiAncmVzaXplJyxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgKDAsIF91dGlscy5leHRlbmQpKHN3aXBlciwge1xuICAgICAgcmVzaXplOiB7XG4gICAgICAgIHJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTsgLy8gRW1pdCByZXNpemVcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7IC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHZhciB3aW5kb3cgPSAoMCwgX3NzcldpbmRvdy5nZXRXaW5kb3cpKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHN3aXBlci5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0se1wiLi4vLi4vdXRpbHMvdXRpbHNcIjo5MyxcInNzci13aW5kb3dcIjo1fV0sODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZG9tID0gcmVxdWlyZShcImRvbTdcIik7XG5cbnZhciBNZXRob2RzID0ge1xuICBhZGRDbGFzczogX2RvbS5hZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3M6IF9kb20ucmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzOiBfZG9tLmhhc0NsYXNzLFxuICB0b2dnbGVDbGFzczogX2RvbS50b2dnbGVDbGFzcyxcbiAgYXR0cjogX2RvbS5hdHRyLFxuICByZW1vdmVBdHRyOiBfZG9tLnJlbW92ZUF0dHIsXG4gIHRyYW5zZm9ybTogX2RvbS50cmFuc2Zvcm0sXG4gIHRyYW5zaXRpb246IF9kb20udHJhbnNpdGlvbixcbiAgb246IF9kb20ub24sXG4gIG9mZjogX2RvbS5vZmYsXG4gIHRyaWdnZXI6IF9kb20udHJpZ2dlcixcbiAgdHJhbnNpdGlvbkVuZDogX2RvbS50cmFuc2l0aW9uRW5kLFxuICBvdXRlcldpZHRoOiBfZG9tLm91dGVyV2lkdGgsXG4gIG91dGVySGVpZ2h0OiBfZG9tLm91dGVySGVpZ2h0LFxuICBzdHlsZXM6IF9kb20uc3R5bGVzLFxuICBvZmZzZXQ6IF9kb20ub2Zmc2V0LFxuICBjc3M6IF9kb20uY3NzLFxuICBlYWNoOiBfZG9tLmVhY2gsXG4gIGh0bWw6IF9kb20uaHRtbCxcbiAgdGV4dDogX2RvbS50ZXh0LFxuICBpczogX2RvbS5pcyxcbiAgaW5kZXg6IF9kb20uaW5kZXgsXG4gIGVxOiBfZG9tLmVxLFxuICBhcHBlbmQ6IF9kb20uYXBwZW5kLFxuICBwcmVwZW5kOiBfZG9tLnByZXBlbmQsXG4gIG5leHQ6IF9kb20ubmV4dCxcbiAgbmV4dEFsbDogX2RvbS5uZXh0QWxsLFxuICBwcmV2OiBfZG9tLnByZXYsXG4gIHByZXZBbGw6IF9kb20ucHJldkFsbCxcbiAgcGFyZW50OiBfZG9tLnBhcmVudCxcbiAgcGFyZW50czogX2RvbS5wYXJlbnRzLFxuICBjbG9zZXN0OiBfZG9tLmNsb3Nlc3QsXG4gIGZpbmQ6IF9kb20uZmluZCxcbiAgY2hpbGRyZW46IF9kb20uY2hpbGRyZW4sXG4gIGZpbHRlcjogX2RvbS5maWx0ZXIsXG4gIHJlbW92ZTogX2RvbS5yZW1vdmVcbn07XG5PYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gIF9kb20uJC5mblttZXRob2ROYW1lXSA9IE1ldGhvZHNbbWV0aG9kTmFtZV07XG59KTtcbnZhciBfZGVmYXVsdCA9IF9kb20uJDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xufSx7XCJkb203XCI6MX1dLDkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRCcm93c2VyID0gZ2V0QnJvd3NlcjtcblxudmFyIF9zc3JXaW5kb3cgPSByZXF1aXJlKFwic3NyLXdpbmRvd1wiKTtcblxudmFyIGJyb3dzZXI7XG5cbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICB2YXIgd2luZG93ID0gKDAsIF9zc3JXaW5kb3cuZ2V0V2luZG93KSgpO1xuXG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzRWRnZTogISF3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZS9nKSxcbiAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cblxuICByZXR1cm4gYnJvd3Nlcjtcbn1cbn0se1wic3NyLXdpbmRvd1wiOjV9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZ2V0RGV2aWNlID0gZ2V0RGV2aWNlO1xuXG52YXIgX3NzcldpbmRvdyA9IHJlcXVpcmUoXCJzc3Itd2luZG93XCIpO1xuXG52YXIgX2dldFN1cHBvcnQgPSByZXF1aXJlKFwiLi9nZXQtc3VwcG9ydFwiKTtcblxudmFyIGRldmljZTtcblxuZnVuY3Rpb24gY2FsY0RldmljZShfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgdXNlckFnZW50ID0gX3JlZi51c2VyQWdlbnQ7XG5cbiAgdmFyIHN1cHBvcnQgPSAoMCwgX2dldFN1cHBvcnQuZ2V0U3VwcG9ydCkoKTtcbiAgdmFyIHdpbmRvdyA9ICgwLCBfc3NyV2luZG93LmdldFdpbmRvdykoKTtcbiAgdmFyIHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgdmFyIHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICB2YXIgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2VcbiAgfTtcbiAgdmFyIHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgdmFyIHNjcmVlbkhlaWdodCA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICB2YXIgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIHZhciBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgdmFyIGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICB2YXIgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIHZhciB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIHZhciBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnOyAvLyBpUGFkT3MgMTMgZml4XG5cbiAgdmFyIGlQYWRTY3JlZW5zID0gWycxMDI0eDEzNjYnLCAnMTM2NngxMDI0JywgJzgzNHgxMTk0JywgJzExOTR4ODM0JywgJzgzNHgxMTEyJywgJzExMTJ4ODM0JywgJzc2OHgxMDI0JywgJzEwMjR4NzY4JywgJzgyMHgxMTgwJywgJzExODB4ODIwJywgJzgxMHgxMDgwJywgJzEwODB4ODEwJ107XG5cbiAgaWYgKCFpcGFkICYmIG1hY29zICYmIHN1cHBvcnQudG91Y2ggJiYgaVBhZFNjcmVlbnMuaW5kZXhPZihzY3JlZW5XaWR0aCArIFwieFwiICsgc2NyZWVuSGVpZ2h0KSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH0gLy8gQW5kcm9pZFxuXG5cbiAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfSAvLyBFeHBvcnQgb2JqZWN0XG5cblxuICByZXR1cm4gZGV2aWNlO1xufVxuXG5mdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzKSB7XG4gIGlmIChvdmVycmlkZXMgPT09IHZvaWQgMCkge1xuICAgIG92ZXJyaWRlcyA9IHt9O1xuICB9XG5cbiAgaWYgKCFkZXZpY2UpIHtcbiAgICBkZXZpY2UgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cblxuICByZXR1cm4gZGV2aWNlO1xufVxufSx7XCIuL2dldC1zdXBwb3J0XCI6OTIsXCJzc3Itd2luZG93XCI6NX1dLDkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRTdXBwb3J0ID0gZ2V0U3VwcG9ydDtcblxudmFyIF9zc3JXaW5kb3cgPSByZXF1aXJlKFwic3NyLXdpbmRvd1wiKTtcblxudmFyIHN1cHBvcnQ7XG5cbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICB2YXIgd2luZG93ID0gKDAsIF9zc3JXaW5kb3cuZ2V0V2luZG93KSgpO1xuICB2YXIgZG9jdW1lbnQgPSAoMCwgX3NzcldpbmRvdy5nZXREb2N1bWVudCkoKTtcbiAgcmV0dXJuIHtcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpLFxuICAgIHBvaW50ZXJFdmVudHM6ICEhd2luZG93LlBvaW50ZXJFdmVudCAmJiAnbWF4VG91Y2hQb2ludHMnIGluIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+PSAwLFxuICAgIG9ic2VydmVyOiBmdW5jdGlvbiBjaGVja09ic2VydmVyKCkge1xuICAgICAgcmV0dXJuICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgfHwgJ1dlYmtpdE11dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdztcbiAgICB9KCksXG4gICAgcGFzc2l2ZUxpc3RlbmVyOiBmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkgey8vIE5vIHN1cHBvcnRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9KCksXG4gICAgZ2VzdHVyZXM6IGZ1bmN0aW9uIGNoZWNrR2VzdHVyZXMoKSB7XG4gICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgfSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG59LHtcInNzci13aW5kb3dcIjo1fV0sOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlbGV0ZVByb3BzID0gZGVsZXRlUHJvcHM7XG5leHBvcnRzLm5leHRUaWNrID0gbmV4dFRpY2s7XG5leHBvcnRzLm5vdyA9IG5vdztcbmV4cG9ydHMuZ2V0VHJhbnNsYXRlID0gZ2V0VHJhbnNsYXRlO1xuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG5leHBvcnRzLmJpbmRNb2R1bGVNZXRob2RzID0gYmluZE1vZHVsZU1ldGhvZHM7XG5cbnZhciBfc3NyV2luZG93ID0gcmVxdWlyZShcInNzci13aW5kb3dcIik7XG5cbmZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaikge1xuICB2YXIgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHRyeSB7XG4gICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgfSBjYXRjaCAoZSkgey8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7Ly8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSkge1xuICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgIGRlbGF5ID0gMDtcbiAgfVxuXG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9ICd4JztcbiAgfVxuXG4gIHZhciB3aW5kb3cgPSAoMCwgX3NzcldpbmRvdy5nZXRXaW5kb3cpKCk7XG4gIHZhciBtYXRyaXg7XG4gIHZhciBjdXJUcmFuc2Zvcm07XG4gIHZhciB0cmFuc2Zvcm1NYXRyaXg7XG4gIHZhciBjdXJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcblxuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gYS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgIH0pLmpvaW4oJywgJyk7XG4gICAgfSAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG5cblxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuXG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyOyAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pOyAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG5cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIG8uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICB2YXIgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuXG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsKSB7XG4gICAgICB2YXIga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKTtcblxuICAgICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICB2YXIgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG5cbiAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIGJpbmRNb2R1bGVNZXRob2RzKGluc3RhbmNlLCBvYmopIHtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmpba2V5XSkuZm9yRWFjaChmdW5jdGlvbiAoc3ViS2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV1bc3ViS2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9ialtrZXldW3N1YktleV0gPSBvYmpba2V5XVtzdWJLZXldLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZVtrZXldID0gb2JqW2tleV07XG4gIH0pO1xufVxufSx7XCJzc3Itd2luZG93XCI6NX1dLDk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogU3dpcGVyIDYuNC41XG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cHM6Ly9zd2lwZXJqcy5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDIwIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IERlY2VtYmVyIDE4LCAyMDIwXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgU3dpcGVyID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9jb3JlL2NvcmUtY2xhc3MnKTtcbnZhciB2aXJ0dWFsID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy92aXJ0dWFsL3ZpcnR1YWwnKTtcbnZhciBrZXlib2FyZCA9IHJlcXVpcmUoJy4vY2pzL2NvbXBvbmVudHMva2V5Ym9hcmQva2V5Ym9hcmQnKTtcbnZhciBtb3VzZXdoZWVsID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9tb3VzZXdoZWVsL21vdXNld2hlZWwnKTtcbnZhciBuYXZpZ2F0aW9uID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb24nKTtcbnZhciBwYWdpbmF0aW9uID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb24nKTtcbnZhciBzY3JvbGxiYXIgPSByZXF1aXJlKCcuL2Nqcy9jb21wb25lbnRzL3Njcm9sbGJhci9zY3JvbGxiYXInKTtcbnZhciBwYXJhbGxheCA9IHJlcXVpcmUoJy4vY2pzL2NvbXBvbmVudHMvcGFyYWxsYXgvcGFyYWxsYXgnKTtcbnZhciB6b29tID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy96b29tL3pvb20nKTtcbnZhciBsYXp5ID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9sYXp5L2xhenknKTtcbnZhciBjb250cm9sbGVyID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9jb250cm9sbGVyL2NvbnRyb2xsZXInKTtcbnZhciBhMTF5ID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9hMTF5L2ExMXknKTtcbnZhciBoaXN0b3J5ID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9oaXN0b3J5L2hpc3RvcnknKTtcbnZhciBoYXNoTmF2aWdhdGlvbiA9IHJlcXVpcmUoJy4vY2pzL2NvbXBvbmVudHMvaGFzaC1uYXZpZ2F0aW9uL2hhc2gtbmF2aWdhdGlvbicpO1xudmFyIGF1dG9wbGF5ID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9hdXRvcGxheS9hdXRvcGxheScpO1xudmFyIGVmZmVjdEZhZGUgPSByZXF1aXJlKCcuL2Nqcy9jb21wb25lbnRzL2VmZmVjdC1mYWRlL2VmZmVjdC1mYWRlJyk7XG52YXIgZWZmZWN0Q3ViZSA9IHJlcXVpcmUoJy4vY2pzL2NvbXBvbmVudHMvZWZmZWN0LWN1YmUvZWZmZWN0LWN1YmUnKTtcbnZhciBlZmZlY3RGbGlwID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy9lZmZlY3QtZmxpcC9lZmZlY3QtZmxpcCcpO1xudmFyIGVmZmVjdENvdmVyZmxvdyA9IHJlcXVpcmUoJy4vY2pzL2NvbXBvbmVudHMvZWZmZWN0LWNvdmVyZmxvdy9lZmZlY3QtY292ZXJmbG93Jyk7XG52YXIgdGh1bWJzID0gcmVxdWlyZSgnLi9janMvY29tcG9uZW50cy90aHVtYnMvdGh1bWJzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeSAoZSkgeyByZXR1cm4gZSAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCcgJiYgJ2RlZmF1bHQnIGluIGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgU3dpcGVyX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShTd2lwZXIpO1xudmFyIHZpcnR1YWxfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KHZpcnR1YWwpO1xudmFyIGtleWJvYXJkX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShrZXlib2FyZCk7XG52YXIgbW91c2V3aGVlbF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kobW91c2V3aGVlbCk7XG52YXIgbmF2aWdhdGlvbl9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kobmF2aWdhdGlvbik7XG52YXIgcGFnaW5hdGlvbl9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kocGFnaW5hdGlvbik7XG52YXIgc2Nyb2xsYmFyX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShzY3JvbGxiYXIpO1xudmFyIHBhcmFsbGF4X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShwYXJhbGxheCk7XG52YXIgem9vbV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koem9vbSk7XG52YXIgbGF6eV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3kobGF6eSk7XG52YXIgY29udHJvbGxlcl9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koY29udHJvbGxlcik7XG52YXIgYTExeV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koYTExeSk7XG52YXIgaGlzdG9yeV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koaGlzdG9yeSk7XG52YXIgaGFzaE5hdmlnYXRpb25fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KGhhc2hOYXZpZ2F0aW9uKTtcbnZhciBhdXRvcGxheV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koYXV0b3BsYXkpO1xudmFyIGVmZmVjdEZhZGVfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KGVmZmVjdEZhZGUpO1xudmFyIGVmZmVjdEN1YmVfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KGVmZmVjdEN1YmUpO1xudmFyIGVmZmVjdEZsaXBfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KGVmZmVjdEZsaXApO1xudmFyIGVmZmVjdENvdmVyZmxvd19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koZWZmZWN0Q292ZXJmbG93KTtcbnZhciB0aHVtYnNfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KHRodW1icyk7XG5cbi8vIFN3aXBlciBDbGFzc1xudmFyIGNvbXBvbmVudHMgPSBbXTtcblN3aXBlcl9fZGVmYXVsdFsnZGVmYXVsdCddLnVzZShjb21wb25lbnRzKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTd2lwZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBTd2lwZXJfX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2RlZmF1bHQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBTd2lwZXJfX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1ZpcnR1YWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXJ0dWFsX19kZWZhdWx0WydkZWZhdWx0J107XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdLZXlib2FyZCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGtleWJvYXJkX19kZWZhdWx0WydkZWZhdWx0J107XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdNb3VzZXdoZWVsJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW91c2V3aGVlbF9fZGVmYXVsdFsnZGVmYXVsdCddO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnTmF2aWdhdGlvbicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5hdmlnYXRpb25fX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1BhZ2luYXRpb24nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwYWdpbmF0aW9uX19kZWZhdWx0WydkZWZhdWx0J107XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTY3JvbGxiYXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzY3JvbGxiYXJfX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1BhcmFsbGF4Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGFyYWxsYXhfX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1pvb20nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB6b29tX19kZWZhdWx0WydkZWZhdWx0J107XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdMYXp5Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbGF6eV9fZGVmYXVsdFsnZGVmYXVsdCddO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQ29udHJvbGxlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvbnRyb2xsZXJfX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0ExMXknLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhMTF5X19kZWZhdWx0WydkZWZhdWx0J107XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdIaXN0b3J5Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGlzdG9yeV9fZGVmYXVsdFsnZGVmYXVsdCddO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnSGFzaE5hdmlnYXRpb24nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoYXNoTmF2aWdhdGlvbl9fZGVmYXVsdFsnZGVmYXVsdCddO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQXV0b3BsYXknLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhdXRvcGxheV9fZGVmYXVsdFsnZGVmYXVsdCddO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnRWZmZWN0RmFkZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZhZGVfX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0VmZmVjdEN1YmUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlZmZlY3RDdWJlX19kZWZhdWx0WydkZWZhdWx0J107XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdFZmZlY3RGbGlwJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZWZmZWN0RmxpcF9fZGVmYXVsdFsnZGVmYXVsdCddO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnRWZmZWN0Q292ZXJmbG93Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZWZmZWN0Q292ZXJmbG93X19kZWZhdWx0WydkZWZhdWx0J107XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdUaHVtYnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aHVtYnNfX2RlZmF1bHRbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbn0se1wiLi9janMvY29tcG9uZW50cy9hMTF5L2ExMXlcIjo2LFwiLi9janMvY29tcG9uZW50cy9hdXRvcGxheS9hdXRvcGxheVwiOjcsXCIuL2Nqcy9jb21wb25lbnRzL2NvbnRyb2xsZXIvY29udHJvbGxlclwiOjgsXCIuL2Nqcy9jb21wb25lbnRzL2NvcmUvY29yZS1jbGFzc1wiOjE2LFwiLi9janMvY29tcG9uZW50cy9lZmZlY3QtY292ZXJmbG93L2VmZmVjdC1jb3ZlcmZsb3dcIjo3MSxcIi4vY2pzL2NvbXBvbmVudHMvZWZmZWN0LWN1YmUvZWZmZWN0LWN1YmVcIjo3MixcIi4vY2pzL2NvbXBvbmVudHMvZWZmZWN0LWZhZGUvZWZmZWN0LWZhZGVcIjo3MyxcIi4vY2pzL2NvbXBvbmVudHMvZWZmZWN0LWZsaXAvZWZmZWN0LWZsaXBcIjo3NCxcIi4vY2pzL2NvbXBvbmVudHMvaGFzaC1uYXZpZ2F0aW9uL2hhc2gtbmF2aWdhdGlvblwiOjc1LFwiLi9janMvY29tcG9uZW50cy9oaXN0b3J5L2hpc3RvcnlcIjo3NixcIi4vY2pzL2NvbXBvbmVudHMva2V5Ym9hcmQva2V5Ym9hcmRcIjo3NyxcIi4vY2pzL2NvbXBvbmVudHMvbGF6eS9sYXp5XCI6NzgsXCIuL2Nqcy9jb21wb25lbnRzL21vdXNld2hlZWwvbW91c2V3aGVlbFwiOjc5LFwiLi9janMvY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb25cIjo4MCxcIi4vY2pzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uXCI6ODEsXCIuL2Nqcy9jb21wb25lbnRzL3BhcmFsbGF4L3BhcmFsbGF4XCI6ODIsXCIuL2Nqcy9jb21wb25lbnRzL3Njcm9sbGJhci9zY3JvbGxiYXJcIjo4MyxcIi4vY2pzL2NvbXBvbmVudHMvdGh1bWJzL3RodW1ic1wiOjg0LFwiLi9janMvY29tcG9uZW50cy92aXJ0dWFsL3ZpcnR1YWxcIjo4NSxcIi4vY2pzL2NvbXBvbmVudHMvem9vbS96b29tXCI6ODZ9XSw5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAjUE9MWUZJTExTXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICNMQVpZTE9BRCAtIExBWllTSVpFXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxucmVxdWlyZShcImxhenlzaXplc1wiKTtcblxucmVxdWlyZShcImxhenlzaXplcy9wbHVnaW5zL3BhcmVudC1maXQvbHMucGFyZW50LWZpdFwiKTtcblxucmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9zbW9vdGhzY3JvbGwtZm9yLXdlYnNpdGVzL1Ntb290aFNjcm9sbC5qc1wiKTtcblxudmFyIF9zd2lwZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwic3dpcGVyXCIpKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgI01BU0sgRk9SIElOUFVUXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qaW1wb3J0IElNYXNrIGZyb20gJ2ltYXNrJztcclxuXHJcbmxldCBpbnB1dFRlbEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2pzLWlucHV0LXRlbCcpO1xyXG5sZXQgbWFza09wdGlvbnMgPSB7XHJcbiAgbWFzazogJyt7Mzh9KDAwMCkwMDAtMDAtMDAnXHJcbn07XHJcblxyXG5pbnB1dFRlbEVsZW1lbnRzLmZvckVhY2goaW5wdXRFbGVtZW50ID0+IHtcclxuICBJTWFzayhpbnB1dEVsZW1lbnQsIG1hc2tPcHRpb25zKTtcclxufSkqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAjU01PVEggU0NST0xMXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG47XG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAjU1dJUEVSXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbl9zd2lwZXJbXCJkZWZhdWx0XCJdLnVzZShbX3N3aXBlci5OYXZpZ2F0aW9uLCBfc3dpcGVyLlBhZ2luYXRpb25dKTtcblxudmFyIG15U3dpcGVyID0gbmV3IF9zd2lwZXJbXCJkZWZhdWx0XCJdKCcuc3dpcGVyLWNvbnRhaW5lcicsIHtcbiAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgbG9vcDogdHJ1ZSxcbiAgLy8gTmF2aWdhdGlvbiBhcnJvd3NcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5leHRFbDogJy5zd2lwZXItYnV0dG9uLW5leHQnLFxuICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYnXG4gIH1cbn0pO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNjcmVlblcgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgI1NDUk9MTCAgT04vT0ZGXHJcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICB2YXIgZ2V0Rml4ZWQgPSBmdW5jdGlvbiBnZXRGaXhlZCgpIHtcbiAgICB2YXIgYWxsID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcqJyk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYWxsKS5maWx0ZXIoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHZhciBib29sID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJztcbiAgICAgIHJldHVybiBib29sO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBmaXhlZEVsZW1lbnRzID0gZ2V0Rml4ZWQoKTtcblxuICB2YXIgc2Nyb2xsT24gPSBmdW5jdGlvbiBzY3JvbGxPbigpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnc2Nyb2xsLW9mZicpO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcbiAgICAgIGZpeGVkRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICBlbGVtLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCI7XG4gICAgICB9KTtcbiAgICB9LCAzMDApO1xuICB9O1xuXG4gIHZhciBzY3JvbGxPZiA9IGZ1bmN0aW9uIHNjcm9sbE9mKCkge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnc2Nyb2xsLW9mZicpO1xuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoc2Nyb2xsVywgXCJweFwiKTtcbiAgICBmaXhlZEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIGVsZW0uc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoc2Nyb2xsVywgXCJweFwiKTtcbiAgICB9KTtcbiAgfTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAjQlVSR0VSIC8gRFJPUCBNRU5VXHJcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4gIHZhciBidXJnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyJyksXG4gICAgICBkcm9wTWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kcm9wLWNvbnRlbnQnKSxcbiAgICAgIG1lbnVPdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICBzY3JvbGxXID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7IC8v0J7QsdGA0L7QsdC70Y/QtSDQvdCw0LLRltCz0LDRhtGW0Y4g0YfQtdGA0LXQtyDQutC70LDQstGW0YjRgyDQotCQ0JJcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCFkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsb3Nlc3QoJy5kcm9wLWNvbnRlbnQnKSkge1xuICAgICAgLy8g0KTQvtC60YPRgSDQv9C+0LrQuNC90YPQsiDQvtGB0YLQsNC90L3RltC5INC10LvQtdC80LXQvdGCINGWINC/0YDQtdGF0L7QtNC40YLRjCDQt9C90L7QsiDQvdCwIGJ1cmdlclxuICAgICAgaWYgKGUuY29kZSA9PT0gJ1RhYicgJiYgZHJvcE1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy12aXNpYmxlJykpIHtcbiAgICAgICAgYnVyZ2VyLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgYnVyZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzY3JvbGxXID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgYnVyZ2VyLmNsYXNzTGlzdC50b2dnbGUoJ2lzLWFjdGl2ZScpO1xuICAgIGRyb3BNZW51LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXZpc2libGUnKTtcblxuICAgIGlmIChkcm9wTWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLXZpc2libGUnKSkge1xuICAgICAgLy8g0JTQvtC00LDRjiBvdmVybGF5XG4gICAgICBkcm9wTWVudS5hZnRlcihtZW51T3ZlcmxheSk7XG4gICAgICBtZW51T3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdvdmVybGF5Jyk7XG4gICAgICBtZW51T3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdpcy12aXNpYmxlJyk7IC8vINCS0LjQutC70Y7Rh9Cw0Y4g0YHQutGA0L7Qu9C7XG5cbiAgICAgIHNjcm9sbE9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8v0KPQtNCw0LvRj9GOIG92ZXJsYXlcbiAgICAgIG1lbnVPdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTsgLy8g0JLQutC70Y7Rh9Cw0Y4g0YHQutGA0L7Qu9C7XG5cbiAgICAgIHNjcm9sbE9uKCk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBtZW51T3ZlcmxheS5yZW1vdmUoKTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfVxuICB9KTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAjTU9EQUxcclxuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgI01FRElBIEpVTVBFUlNcclxuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuICAvLyAqKipcbiAgLy8qINCf0YDQuNCz0LDRjtGH0L7QvNGDINC40LXQu9C10LzQtdC90YLRgyDQv9GA0LjRgdCy0L7Rl9GC0Lgg0LDRgtGA0LjQsdGD0YIgZGF0YS1qdW1wINGC0LAgZGF0YS1qdW1wLXRvXG4gIC8vKiDQkiBkYXRhLWp1bXAtdG8g0LfQsNC/0LjRgdCw0YLQuCDRgdGC0YDQvtC60YM6IFxuICAvLyogXCJuZXdQYXJlbnRFbGVtZW50U2VsZWN0b3IuanMtanVtcCBhZnRlckVMZW1lbnRQb3NpdGlvbiBtZWRpYVNjcmVlbldpZHRoXCJcbiAgLy8qIG5ld1BhcmVudEVsZW1lbnRTZWxlY3Rvci5qcy1qdW1wICAtINCx0LDRgtGM0LrRltCy0YHRjNC60LjQuSDRgdC10LvQtdC60YLQvtGAICsgLmpzLWp1bXBcbiAgLy8qIGFmdGVyRUxlbWVudFBvc2l0aW9uIC0g0L/RltGB0LvRjyDRj9C60L7Qs9C+INC10LvQtdC80LXQvdGC0LAg0LLRgdGC0LDQstC70Y/RgtC4IFxuICAvLyogbWVkaWFTY3JlZW5XaWR0aCAtINC/0YDQuCDRj9C60L7QvNGDINGA0L7Qt9GI0LjRgNC10L3QvdGWINC/0LXRgNC10YHRgtCw0LLQu9GP0YLQuFxuICAvLyogXG4gIC8vICoqKlxuXG4gIHZhciBhcnIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1qdW1wXScpO1xuICB2YXIganVtcGVycyA9IEFycmF5LmZyb20oYXJyKS5tYXAoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICB2YXIgcGFyYW0gPSBlbGVtLmRhdGFzZXQuanVtcFRvLnNwbGl0KCcgJyk7IC8vIElmIGluIGRhdGEtanVtcC10byBlbGVtZW50IHBvc2l0aW9uIDw9IDAgc2hvd2VkIGFsZXJ0KCk7IFxuXG4gICAgaWYgKCtwYXJhbVsxXSA8IDAgfHwgcGFyYW1bMV0gPT09ICcnKSB7XG4gICAgICBhbGVydChcIkVycm9yOiBiYWQgdmFsdWUgaW4gZGF0YS1qdW1wLXRvOiBcXFwiLi4uIFwiLmNvbmNhdCgrcGFyYW1bMV0sIFwiIC4uLlxcXCJcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBlbDogZWxlbSxcbiAgICAgIHJlYWxQYXJlbnQ6IGVsZW0ucGFyZW50RWxlbWVudCxcbiAgICAgIHJlYWxQcmV2RWxlbTogZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLFxuICAgICAgbmV3UGFyZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBhcmFtWzBdKSxcbiAgICAgIG5ld1BvczogK3BhcmFtWzFdLFxuICAgICAgc2NyZWVuOiArcGFyYW1bMl1cbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBqdW1wKCkge1xuICAgIHNjcmVlblcgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBqdW1wZXJzLmZvckVhY2goZnVuY3Rpb24gKGp1bXBlcikge1xuICAgICAgaWYgKHNjcmVlblcgPj0ganVtcGVyLnNjcmVlbiAmJiBqdW1wZXIuZWwuZGF0YXNldC5qdW1wKSB7XG4gICAgICAgIC8vINCe0LHRgNC+0LHQu9GP0ZQg0L/RgNC40LbQvtC6INCyINC/0L7Rh9Cw0YLQutC+0LLQuNC5INC10LvQtdC80LXQvdGCIFxuICAgICAgICBpZiAoIWp1bXBlci5yZWFsUHJldkVsZW0pIHtcbiAgICAgICAgICBqdW1wZXIucmVhbFBhcmVudC5wcmVwZW5kKGp1bXBlci5lbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAganVtcGVyLnJlYWxQcmV2RWxlbS5hZnRlcihqdW1wZXIuZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAganVtcGVyLmVsLmRhdGFzZXQuanVtcCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NyZWVuVyA8IGp1bXBlci5zY3JlZW4gJiYgIWp1bXBlci5lbC5kYXRhc2V0Lmp1bXApIHtcbiAgICAgICAgLy8g0J7QsdGA0L7QsdC70Y/RlCDQv9GA0LjQttC+0Log0LIg0L3QvtCy0LjQuSDQtdC70LXQvNC10L3RglxuICAgICAgICBpZiAoIWp1bXBlci5uZXdQYXJlbnQuY2hpbGRFbGVtZW50Q291bnQpIHtcbiAgICAgICAgICBqdW1wZXIubmV3UGFyZW50LmFwcGVuZChqdW1wZXIuZWwpO1xuICAgICAgICB9IGVsc2UgaWYgKGp1bXBlci5uZXdQYXJlbnQuY2hpbGRFbGVtZW50Q291bnQgPCBqdW1wZXIubmV3UG9zKSB7XG4gICAgICAgICAganVtcGVyLm5ld1BhcmVudC5hcHBlbmQoanVtcGVyLmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoanVtcGVyLm5ld1BvcyA9PT0gMCkge1xuICAgICAgICAgICAganVtcGVyLm5ld1BhcmVudC5wcmVwZW5kKGp1bXBlci5lbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFtqdW1wZXIubmV3UG9zIC0xXSDQt9C80ZbRidGD0Y4g0L3QsCDQvtC00LjQvdC40YbRji4gSlMg0YDQsNGF0YPRlCDQv9C+0YfQuNC90LDRjtGH0Lgg0LcgMC5cbiAgICAgICAgICAgIGp1bXBlci5uZXdQYXJlbnQuY2hpbGRyZW5banVtcGVyLm5ld1BvcyAtIDFdLmFmdGVyKGp1bXBlci5lbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAganVtcGVyLmVsLmRhdGFzZXQuanVtcCA9ICdtb3ZlZCc7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBqdW1wKCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoZSkge1xuICAgIC8vINCv0LrRidC+INC30LzRltC90Y7RlNGC0YzRgdGPINCy0LjRgdC+0YLQsCDQtdC60YDQsNC90LAg0YLQvtC00ZYg0L/QtdGA0LXRgNC40LLQsNGU0Lwg0LLQuNC60L7QvdCw0L3QvdGPINGE0YPQvdC60YbRltGXXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID09PSBzY3JlZW5XKSByZXR1cm47XG4gICAganVtcCgpO1xuICB9KTtcbn0pO1xuXG59LHtcIi4uLy4uL25vZGVfbW9kdWxlcy9zbW9vdGhzY3JvbGwtZm9yLXdlYnNpdGVzL1Ntb290aFNjcm9sbC5qc1wiOjQsXCJsYXp5c2l6ZXNcIjoyLFwibGF6eXNpemVzL3BsdWdpbnMvcGFyZW50LWZpdC9scy5wYXJlbnQtZml0XCI6MyxcInN3aXBlclwiOjk0fV19LHt9LFs5NV0pO1xuIl19
